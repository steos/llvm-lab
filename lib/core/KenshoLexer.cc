/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : f:/dev/projects/kensho/docs/Kensho.g
 *     -                            On : 2009-10-05 01:26:49
 *     -                 for the lexer : KenshoLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "KenshoLexer.h"
/* ----------------------------------------- */


/** String literals used by KenshoLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x62, 0x6F, 0x6F, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x62, 0x79, 0x74, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x73, 0x68, 0x6F, 0x72, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x69, 0x6E, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x63, 0x68, 0x61, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x6C, 0x6F, 0x6E, 0x67,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x64, 0x6F, 0x75, 0x62, 0x6C, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x76, 0x6F, 0x69, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x26, 0x26,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_11[]  = { 0x7C, 0x7C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_12[]  = { 0x3C, 0x3C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_13[]  = { 0x3E, 0x3E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_14[]  = { 0x3E, 0x3E, 0x3E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_15[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_16[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_17[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_18[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_19[]  = { 0x69, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_20[]  = { 0x65, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_21[]  = { 0x77, 0x68, 0x69, 0x6C, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_22[]  = { 0x74, 0x72, 0x75, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_23[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_24[]  = { 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_25[]  = { 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_26[]  = { 0x6E, 0x65, 0x77,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_27[]  = { 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_28[]  = { 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_29[]  = { 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_30[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_31[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_32[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_33[]  = { 0x30, 0x78,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pKenshoLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pKenshoLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pKenshoLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pKenshoLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mT_BOOL    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mT_BYTE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mT_SHORT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mT_INT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mT_CHAR    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mT_LONG    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mT_FLOAT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mT_DOUBLE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mT_VOID    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_ADD    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_SUB    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_MUL    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_DIV    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_NOT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_BIT_NOT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_AND    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_OR    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_REM    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_BIT_AND    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_BIT_OR    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_XOR    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_SHIFT_L    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_SHIFT_R    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_USHIFT_R    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mCMP_EQ    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mCMP_NEQ    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mCMP_LT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mCMP_GT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mCMP_LTE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mCMP_GTE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mOP_ASSIGN    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mK_IF    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mK_ELSE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mK_WHILE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mLITERAL_TRUE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mLITERAL_FALSE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mK_NATIVE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mK_RETURN    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mK_NEW    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mK_DELETE    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mK_STRUCT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mK_STATIC    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mBRACE_L    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mBRACE_R    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mPAREN_L    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mPAREN_R    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mCOMMA    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mSEMICOLON    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mLETTER    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mDIGIT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mPOSDIGIT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mHEXDIGIT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mEXPONENT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mESCSEQ    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mWS    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mLINE_COMMENT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mBLOCK_COMMENT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mLITERAL_OCT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mLITERAL_HEX    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mLITERAL_INT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mLITERAL_FLOAT    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mID    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mLITERAL_CHAR    (pKenshoLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pKenshoLexer ctx);
static void	KenshoLexerFree(pKenshoLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
KenshoLexerFree  (pKenshoLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "f:/dev/projects/kensho/docs/Kensho.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called KenshoLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pKenshoLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pKenshoLexer KenshoLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return KenshoLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called KenshoLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pKenshoLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pKenshoLexer KenshoLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pKenshoLexer ctx; // Context structure we will build and return

    ctx = (pKenshoLexer) ANTLR3_CALLOC(1, sizeof(KenshoLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in KenshoLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our KenshoLexer interface
     */
    ctx->mT_BOOL	= mT_BOOL;
    ctx->mT_BYTE	= mT_BYTE;
    ctx->mT_SHORT	= mT_SHORT;
    ctx->mT_INT	= mT_INT;
    ctx->mT_CHAR	= mT_CHAR;
    ctx->mT_LONG	= mT_LONG;
    ctx->mT_FLOAT	= mT_FLOAT;
    ctx->mT_DOUBLE	= mT_DOUBLE;
    ctx->mT_VOID	= mT_VOID;
    ctx->mOP_ADD	= mOP_ADD;
    ctx->mOP_SUB	= mOP_SUB;
    ctx->mOP_MUL	= mOP_MUL;
    ctx->mOP_DIV	= mOP_DIV;
    ctx->mOP_NOT	= mOP_NOT;
    ctx->mOP_BIT_NOT	= mOP_BIT_NOT;
    ctx->mOP_AND	= mOP_AND;
    ctx->mOP_OR	= mOP_OR;
    ctx->mOP_REM	= mOP_REM;
    ctx->mOP_BIT_AND	= mOP_BIT_AND;
    ctx->mOP_BIT_OR	= mOP_BIT_OR;
    ctx->mOP_XOR	= mOP_XOR;
    ctx->mOP_SHIFT_L	= mOP_SHIFT_L;
    ctx->mOP_SHIFT_R	= mOP_SHIFT_R;
    ctx->mOP_USHIFT_R	= mOP_USHIFT_R;
    ctx->mCMP_EQ	= mCMP_EQ;
    ctx->mCMP_NEQ	= mCMP_NEQ;
    ctx->mCMP_LT	= mCMP_LT;
    ctx->mCMP_GT	= mCMP_GT;
    ctx->mCMP_LTE	= mCMP_LTE;
    ctx->mCMP_GTE	= mCMP_GTE;
    ctx->mOP_ASSIGN	= mOP_ASSIGN;
    ctx->mK_IF	= mK_IF;
    ctx->mK_ELSE	= mK_ELSE;
    ctx->mK_WHILE	= mK_WHILE;
    ctx->mLITERAL_TRUE	= mLITERAL_TRUE;
    ctx->mLITERAL_FALSE	= mLITERAL_FALSE;
    ctx->mK_NATIVE	= mK_NATIVE;
    ctx->mK_RETURN	= mK_RETURN;
    ctx->mK_NEW	= mK_NEW;
    ctx->mK_DELETE	= mK_DELETE;
    ctx->mK_STRUCT	= mK_STRUCT;
    ctx->mK_STATIC	= mK_STATIC;
    ctx->mBRACE_L	= mBRACE_L;
    ctx->mBRACE_R	= mBRACE_R;
    ctx->mPAREN_L	= mPAREN_L;
    ctx->mPAREN_R	= mPAREN_R;
    ctx->mCOMMA	= mCOMMA;
    ctx->mSEMICOLON	= mSEMICOLON;
    ctx->mLETTER	= mLETTER;
    ctx->mDIGIT	= mDIGIT;
    ctx->mPOSDIGIT	= mPOSDIGIT;
    ctx->mHEXDIGIT	= mHEXDIGIT;
    ctx->mEXPONENT	= mEXPONENT;
    ctx->mESCSEQ	= mESCSEQ;
    ctx->mWS	= mWS;
    ctx->mLINE_COMMENT	= mLINE_COMMENT;
    ctx->mBLOCK_COMMENT	= mBLOCK_COMMENT;
    ctx->mLITERAL_OCT	= mLITERAL_OCT;
    ctx->mLITERAL_HEX	= mLITERAL_HEX;
    ctx->mLITERAL_INT	= mLITERAL_INT;
    ctx->mLITERAL_FLOAT	= mLITERAL_FLOAT;
    ctx->mID	= mID;
    ctx->mLITERAL_CHAR	= mLITERAL_CHAR;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= KenshoLexerFree;

    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    487:4: ( POSDIGIT ( DIGIT )* | ( POSDIGIT ( DIGIT )+ | DIGIT )? '.' ( DIGIT )+ )
 */
static const ANTLR3_INT32 dfa16_eot[5] =
    {
	-1, 3, -1, -1, 3
    };
static const ANTLR3_INT32 dfa16_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_min[5] =
    {
	46, 46, -1, -1, 46
    };
static const ANTLR3_INT32 dfa16_max[5] =
    {
	57, 57, -1, -1, 57
    };
static const ANTLR3_INT32 dfa16_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa16_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa16_T_empty	    NULL

static const ANTLR3_INT32 dfa16_T0[] =
    {
	2, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
    };static const ANTLR3_INT32 dfa16_T1[] =
    {
	2, -1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa16_transitions[] =
{
    dfa16_T1, dfa16_T0, dfa16_T_empty, dfa16_T_empty, dfa16_T0	
};


/* Declare tracking structure for Cyclic DFA 16
 */
static
ANTLR3_CYCLIC_DFA cdfa16
    =	{
	    16,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"487:4: ( POSDIGIT ( DIGIT )* | ( POSDIGIT ( DIGIT )+ | DIGIT )? '.' ( DIGIT )+ )",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa16_eot,	    /* EOT table			    */
	    dfa16_eof,	    /* EOF table			    */
	    dfa16_min,	    /* Minimum tokens for each state    */
	    dfa16_max,	    /* Maximum tokens for each state    */
	    dfa16_accept,	/* Accept table			    */
	    dfa16_special,	/* Special transition states	    */
	    dfa16_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 16
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T_BOOL | T_BYTE | T_SHORT | T_INT | T_CHAR | T_LONG | T_FLOAT | T_DOUBLE | T_VOID | OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_NOT | OP_BIT_NOT | OP_AND | OP_OR | OP_REM | OP_BIT_AND | OP_BIT_OR | OP_XOR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | CMP_EQ | CMP_NEQ | CMP_LT | CMP_GT | CMP_LTE | CMP_GTE | OP_ASSIGN | K_IF | K_ELSE | K_WHILE | LITERAL_TRUE | LITERAL_FALSE | K_NATIVE | K_RETURN | K_NEW | K_DELETE | K_STRUCT | K_STATIC | BRACE_L | BRACE_R | PAREN_L | PAREN_R | COMMA | SEMICOLON | WS | LINE_COMMENT | BLOCK_COMMENT | LITERAL_OCT | LITERAL_HEX | LITERAL_INT | LITERAL_FLOAT | ID | LITERAL_CHAR );
 */
static const ANTLR3_INT32 dfa21_eot[153] =
    {
	-1, 38, 38, 38, 38, 38, 38, 38, 38, -1, -1, -1, 54, 56, -1, 58, 60, -1, 
	-1, 63, 66, 68, 38, 38, 38, 38, 38, -1, -1, -1, -1, -1, -1, -1, -1, 76, 
	76, -1, -1, -1, 38, 38, 38, 38, 38, 85, 38, 38, 38, 38, 38, 38, 38, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, 38, 38, 38, 
	38, 38, 38, -1, -1, -1, 76, 38, 38, 38, 38, 38, 106, -1, 38, 38, 38, 38, 
	38, 38, 38, -1, -1, 38, 38, 38, 38, 118, 38, 120, 121, 38, 38, 38, -1, 
	125, 126, 38, 38, 38, 38, 131, 132, 38, 134, 38, -1, 38, -1, -1, 137, 38, 
	38, -1, -1, 140, 141, 38, 38, -1, -1, 144, -1, 38, 38, -1, 147, 148, -1, 
	-1, 149, 150, -1, 151, 152, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa21_eof[153] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa21_min[153] =
    {
	9, 111, 104, 102, 104, 111, 97, 101, 111, -1, -1, -1, 42, 61, -1, 38, 
	124, -1, -1, 60, 61, 61, 108, 104, 114, 97, 101, -1, -1, -1, -1, -1, -1, 
	-1, -1, 46, 46, -1, -1, -1, 111, 116, 111, 97, 116, 48, 97, 110, 111, 108, 
	117, 108, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, 
	-1, -1, 115, 105, 117, 116, 119, 116, -1, -1, -1, 46, 108, 101, 114, 117, 
	116, 48, -1, 114, 103, 97, 115, 98, 101, 100, -1, -1, 101, 108, 101, 105, 
	48, 117, 48, 48, 116, 99, 105, -1, 48, 48, 116, 101, 108, 116, 48, 48, 
	101, 48, 118, -1, 114, -1, -1, 48, 116, 99, -1, -1, 48, 48, 101, 101, -1, 
	-1, 48, -1, 101, 110, -1, 48, 48, -1, -1, 48, 48, -1, 48, 48, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa21_max[153] =
    {
	126, 121, 116, 110, 104, 111, 108, 111, 111, -1, -1, -1, 47, 61, -1, 38, 
	124, -1, -1, 61, 62, 61, 108, 104, 114, 101, 101, -1, -1, -1, -1, -1, -1, 
	-1, -1, 120, 102, -1, -1, -1, 111, 116, 111, 114, 116, 122, 97, 110, 111, 
	108, 117, 108, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 
	-1, -1, -1, 115, 105, 117, 116, 119, 116, -1, -1, -1, 102, 108, 101, 114, 
	117, 116, 122, -1, 114, 103, 97, 115, 98, 101, 100, -1, -1, 101, 108, 101, 
	105, 122, 117, 122, 122, 116, 99, 105, -1, 122, 122, 116, 101, 108, 116, 
	122, 122, 101, 122, 118, -1, 114, -1, -1, 122, 116, 99, -1, -1, 122, 122, 
	101, 101, -1, -1, 122, -1, 101, 110, -1, 122, 122, -1, -1, 122, 122, -1, 
	122, 122, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa21_accept[153] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, -1, -1, 15, -1, -1, 18, 
	21, -1, -1, -1, -1, -1, -1, -1, -1, 43, 44, 45, 46, 47, 48, 49, 50, -1, 
	-1, 55, 56, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 
	13, 26, 14, 16, 19, 17, 20, 22, 29, 27, -1, 30, 28, 25, 31, -1, -1, -1, 
	-1, -1, -1, 53, 54, 52, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, 
	-1, -1, -1, 24, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, 1, 2, -1, -1, -1, 5, 6, 
	-1, -1, -1, -1, 9, 33, -1, 35, -1, -1, 3, -1, -1, 7, 36, -1, -1, 34, -1, 
	-1, 41, 42, 8, 40, 37, 38
    };
static const ANTLR3_INT32 dfa21_special[153] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa21_T_empty	    NULL

static const ANTLR3_INT32 dfa21_T0[] =
    {
	105
    };static const ANTLR3_INT32 dfa21_T1[] =
    {
	124
    };static const ANTLR3_INT32 dfa21_T2[] =
    {
	139
    };static const ANTLR3_INT32 dfa21_T3[] =
    {
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38, -1, -1, -1, -1, -1, -1, -1, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, -1, -1, -1, -1, -1, -1, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38
    };static const ANTLR3_INT32 dfa21_T4[] =
    {
	57
    };static const ANTLR3_INT32 dfa21_T5[] =
    {
	143
    };static const ANTLR3_INT32 dfa21_T6[] =
    {
	104
    };static const ANTLR3_INT32 dfa21_T7[] =
    {
	138
    };static const ANTLR3_INT32 dfa21_T8[] =
    {
	123
    };static const ANTLR3_INT32 dfa21_T9[] =
    {
	55
    };static const ANTLR3_INT32 dfa21_T10[] =
    {
	79
    };static const ANTLR3_INT32 dfa21_T11[] =
    {
	101
    };static const ANTLR3_INT32 dfa21_T12[] =
    {
	136
    };static const ANTLR3_INT32 dfa21_T13[] =
    {
	146
    };static const ANTLR3_INT32 dfa21_T14[] =
    {
	99
    };static const ANTLR3_INT32 dfa21_T15[] =
    {
	112
    };static const ANTLR3_INT32 dfa21_T16[] =
    {
	130
    };static const ANTLR3_INT32 dfa21_T17[] =
    {
	91
    };static const ANTLR3_INT32 dfa21_T18[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41
    };static const ANTLR3_INT32 dfa21_T19[] =
    {
	135
    };static const ANTLR3_INT32 dfa21_T20[] =
    {
	117
    };static const ANTLR3_INT32 dfa21_T21[] =
    {
	98
    };static const ANTLR3_INT32 dfa21_T22[] =
    {
	145
    };static const ANTLR3_INT32 dfa21_T23[] =
    {
	119
    };static const ANTLR3_INT32 dfa21_T24[] =
    {
	100
    };static const ANTLR3_INT32 dfa21_T25[] =
    {
	52
    };static const ANTLR3_INT32 dfa21_T26[] =
    {
	108
    };static const ANTLR3_INT32 dfa21_T27[] =
    {
	87
    };static const ANTLR3_INT32 dfa21_T28[] =
    {
	127
    };static const ANTLR3_INT32 dfa21_T29[] =
    {
	109
    };static const ANTLR3_INT32 dfa21_T30[] =
    {
	88
    };static const ANTLR3_INT32 dfa21_T31[] =
    {
	129
    };static const ANTLR3_INT32 dfa21_T32[] =
    {
	142
    };static const ANTLR3_INT32 dfa21_T33[] =
    {
	53, -1, -1, -1, -1, 34
    };static const ANTLR3_INT32 dfa21_T34[] =
    {
	90
    };static const ANTLR3_INT32 dfa21_T35[] =
    {
	111
    };static const ANTLR3_INT32 dfa21_T36[] =
    {
	47
    };static const ANTLR3_INT32 dfa21_T37[] =
    {
	113
    };static const ANTLR3_INT32 dfa21_T38[] =
    {
	92
    };static const ANTLR3_INT32 dfa21_T39[] =
    {
	80
    };static const ANTLR3_INT32 dfa21_T40[] =
    {
	102
    };static const ANTLR3_INT32 dfa21_T41[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43
    };static const ANTLR3_INT32 dfa21_T42[] =
    {
	103
    };static const ANTLR3_INT32 dfa21_T43[] =
    {
	81
    };static const ANTLR3_INT32 dfa21_T44[] =
    {
	122
    };static const ANTLR3_INT32 dfa21_T45[] =
    {
	84
    };static const ANTLR3_INT32 dfa21_T46[] =
    {
	37, -1, 77, 77, 77, 77, 77, 77, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 75
    };static const ANTLR3_INT32 dfa21_T47[] =
    {
	86
    };static const ANTLR3_INT32 dfa21_T48[] =
    {
	107
    };static const ANTLR3_INT32 dfa21_T49[] =
    {
	33, 33, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 33, 13, -1, 34, -1, 17, 15, 39, 29, 30, 11, 9, 31, 
	10, 37, 12, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 32, 19, 21, 20, 
	-1, -1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38, -1, -1, -1, 18, -1, -1, 38, 1, 
	4, 7, 22, 6, 38, 38, 3, 38, 38, 5, 38, 25, 38, 38, 38, 26, 2, 24, 38, 8, 
	23, 38, 38, 38, 27, 16, 28, 14
    };static const ANTLR3_INT32 dfa21_T50[] =
    {
	61, 62
    };static const ANTLR3_INT32 dfa21_T51[] =
    {
	83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82
    };static const ANTLR3_INT32 dfa21_T52[] =
    {
	67
    };static const ANTLR3_INT32 dfa21_T53[] =
    {
	72, -1, -1, -1, 73
    };static const ANTLR3_INT32 dfa21_T54[] =
    {
	65, 64
    };static const ANTLR3_INT32 dfa21_T55[] =
    {
	45, -1, -1, -1, -1, -1, -1, -1, 44
    };static const ANTLR3_INT32 dfa21_T56[] =
    {
	93
    };static const ANTLR3_INT32 dfa21_T57[] =
    {
	46
    };static const ANTLR3_INT32 dfa21_T58[] =
    {
	96
    };static const ANTLR3_INT32 dfa21_T59[] =
    {
	115
    };static const ANTLR3_INT32 dfa21_T60[] =
    {
	37, -1, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 37, 37, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	37, 37, 37
    };static const ANTLR3_INT32 dfa21_T61[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50
    };static const ANTLR3_INT32 dfa21_T62[] =
    {
	114
    };static const ANTLR3_INT32 dfa21_T63[] =
    {
	70
    };static const ANTLR3_INT32 dfa21_T64[] =
    {
	95
    };static const ANTLR3_INT32 dfa21_T65[] =
    {
	71
    };static const ANTLR3_INT32 dfa21_T66[] =
    {
	128
    };static const ANTLR3_INT32 dfa21_T67[] =
    {
	110
    };static const ANTLR3_INT32 dfa21_T68[] =
    {
	89
    };static const ANTLR3_INT32 dfa21_T69[] =
    {
	116
    };static const ANTLR3_INT32 dfa21_T70[] =
    {
	97
    };static const ANTLR3_INT32 dfa21_T71[] =
    {
	133
    };static const ANTLR3_INT32 dfa21_T72[] =
    {
	69
    };static const ANTLR3_INT32 dfa21_T73[] =
    {
	74
    };static const ANTLR3_INT32 dfa21_T74[] =
    {
	59
    };static const ANTLR3_INT32 dfa21_T75[] =
    {
	49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa21_transitions[] =
{
    dfa21_T49, dfa21_T18, dfa21_T41, dfa21_T55, dfa21_T57, dfa21_T36, dfa21_T75, 
    dfa21_T61, dfa21_T25, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T33, 
    dfa21_T9, dfa21_T_empty, dfa21_T4, dfa21_T74, dfa21_T_empty, dfa21_T_empty, 
    dfa21_T50, dfa21_T54, dfa21_T52, dfa21_T72, dfa21_T63, dfa21_T65, dfa21_T53, 
    dfa21_T73, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, 
    dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T46, 
    dfa21_T60, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T10, dfa21_T39, 
    dfa21_T43, dfa21_T51, dfa21_T45, dfa21_T3, dfa21_T47, dfa21_T27, dfa21_T30, 
    dfa21_T68, dfa21_T34, dfa21_T17, dfa21_T38, dfa21_T_empty, dfa21_T_empty, 
    dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, 
    dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T56, 
    dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T64, 
    dfa21_T58, dfa21_T70, dfa21_T21, dfa21_T14, dfa21_T24, dfa21_T_empty, 
    dfa21_T_empty, dfa21_T_empty, dfa21_T60, dfa21_T11, dfa21_T40, dfa21_T42, 
    dfa21_T6, dfa21_T0, dfa21_T3, dfa21_T_empty, dfa21_T48, dfa21_T26, dfa21_T29, 
    dfa21_T67, dfa21_T35, dfa21_T15, dfa21_T37, dfa21_T_empty, dfa21_T_empty, 
    dfa21_T62, dfa21_T59, dfa21_T69, dfa21_T20, dfa21_T3, dfa21_T23, dfa21_T3, 
    dfa21_T3, dfa21_T44, dfa21_T8, dfa21_T1, dfa21_T_empty, dfa21_T3, dfa21_T3, 
    dfa21_T28, dfa21_T66, dfa21_T31, dfa21_T16, dfa21_T3, dfa21_T3, dfa21_T71, 
    dfa21_T3, dfa21_T19, dfa21_T_empty, dfa21_T12, dfa21_T_empty, dfa21_T_empty, 
    dfa21_T3, dfa21_T7, dfa21_T2, dfa21_T_empty, dfa21_T_empty, dfa21_T3, 
    dfa21_T3, dfa21_T32, dfa21_T5, dfa21_T_empty, dfa21_T_empty, dfa21_T3, 
    dfa21_T_empty, dfa21_T22, dfa21_T13, dfa21_T_empty, dfa21_T3, dfa21_T3, 
    dfa21_T_empty, dfa21_T_empty, dfa21_T3, dfa21_T3, dfa21_T_empty, dfa21_T3, 
    dfa21_T3, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty, 
    dfa21_T_empty, dfa21_T_empty	
};


/* Declare tracking structure for Cyclic DFA 21
 */
static
ANTLR3_CYCLIC_DFA cdfa21
    =	{
	    21,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( T_BOOL | T_BYTE | T_SHORT | T_INT | T_CHAR | T_LONG | T_FLOAT | T_DOUBLE | T_VOID | OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_NOT | OP_BIT_NOT | OP_AND | OP_OR | OP_REM | OP_BIT_AND | OP_BIT_OR | OP_XOR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | CMP_EQ | CMP_NEQ | CMP_LT | CMP_GT | CMP_LTE | CMP_GTE | OP_ASSIGN | K_IF | K_ELSE | K_WHILE | LITERAL_TRUE | LITERAL_FALSE | K_NATIVE | K_RETURN | K_NEW | K_DELETE | K_STRUCT | K_STATIC | BRACE_L | BRACE_R | PAREN_L | PAREN_R | COMMA | SEMICOLON | WS | LINE_COMMENT | BLOCK_COMMENT | LITERAL_OCT | LITERAL_HEX | LITERAL_INT | LITERAL_FLOAT | ID | LITERAL_CHAR );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa21_eot,	    /* EOT table			    */
	    dfa21_eof,	    /* EOF table			    */
	    dfa21_min,	    /* Minimum tokens for each state    */
	    dfa21_max,	    /* Maximum tokens for each state    */
	    dfa21_accept,	/* Accept table			    */
	    dfa21_special,	/* Special transition states	    */
	    dfa21_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 21
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */ 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 7:8: ( 'bool' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_BOOL
 *
 * Looks to match the characters the constitute the token T_BOOL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_BOOL(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_BOOL;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:7:8: ( 'bool' )
    // f:/dev/projects/kensho/docs/Kensho.g:7:10: 'bool'
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleT_BOOLEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_BOOLEx; /* Prevent compiler warnings */
    ruleT_BOOLEx: ;

}
// $ANTLR end T_BOOL

//   Comes from: 8:8: ( 'byte' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_BYTE
 *
 * Looks to match the characters the constitute the token T_BYTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_BYTE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_BYTE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:8:8: ( 'byte' )
    // f:/dev/projects/kensho/docs/Kensho.g:8:10: 'byte'
    {
        MATCHS(lit_2); 
        if  (HASEXCEPTION())
        {
            goto ruleT_BYTEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_BYTEEx; /* Prevent compiler warnings */
    ruleT_BYTEEx: ;

}
// $ANTLR end T_BYTE

//   Comes from: 9:9: ( 'short' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_SHORT
 *
 * Looks to match the characters the constitute the token T_SHORT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_SHORT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_SHORT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:9:9: ( 'short' )
    // f:/dev/projects/kensho/docs/Kensho.g:9:11: 'short'
    {
        MATCHS(lit_3); 
        if  (HASEXCEPTION())
        {
            goto ruleT_SHORTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_SHORTEx; /* Prevent compiler warnings */
    ruleT_SHORTEx: ;

}
// $ANTLR end T_SHORT

//   Comes from: 10:7: ( 'int' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_INT
 *
 * Looks to match the characters the constitute the token T_INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_INT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_INT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:10:7: ( 'int' )
    // f:/dev/projects/kensho/docs/Kensho.g:10:9: 'int'
    {
        MATCHS(lit_4); 
        if  (HASEXCEPTION())
        {
            goto ruleT_INTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_INTEx; /* Prevent compiler warnings */
    ruleT_INTEx: ;

}
// $ANTLR end T_INT

//   Comes from: 11:8: ( 'char' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_CHAR
 *
 * Looks to match the characters the constitute the token T_CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_CHAR(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_CHAR;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:11:8: ( 'char' )
    // f:/dev/projects/kensho/docs/Kensho.g:11:10: 'char'
    {
        MATCHS(lit_5); 
        if  (HASEXCEPTION())
        {
            goto ruleT_CHAREx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_CHAREx; /* Prevent compiler warnings */
    ruleT_CHAREx: ;

}
// $ANTLR end T_CHAR

//   Comes from: 12:8: ( 'long' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_LONG
 *
 * Looks to match the characters the constitute the token T_LONG
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_LONG(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_LONG;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:12:8: ( 'long' )
    // f:/dev/projects/kensho/docs/Kensho.g:12:10: 'long'
    {
        MATCHS(lit_6); 
        if  (HASEXCEPTION())
        {
            goto ruleT_LONGEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_LONGEx; /* Prevent compiler warnings */
    ruleT_LONGEx: ;

}
// $ANTLR end T_LONG

//   Comes from: 13:9: ( 'float' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_FLOAT
 *
 * Looks to match the characters the constitute the token T_FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_FLOAT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_FLOAT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:13:9: ( 'float' )
    // f:/dev/projects/kensho/docs/Kensho.g:13:11: 'float'
    {
        MATCHS(lit_7); 
        if  (HASEXCEPTION())
        {
            goto ruleT_FLOATEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_FLOATEx; /* Prevent compiler warnings */
    ruleT_FLOATEx: ;

}
// $ANTLR end T_FLOAT

//   Comes from: 14:10: ( 'double' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_DOUBLE
 *
 * Looks to match the characters the constitute the token T_DOUBLE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_DOUBLE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_DOUBLE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:14:10: ( 'double' )
    // f:/dev/projects/kensho/docs/Kensho.g:14:12: 'double'
    {
        MATCHS(lit_8); 
        if  (HASEXCEPTION())
        {
            goto ruleT_DOUBLEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_DOUBLEEx; /* Prevent compiler warnings */
    ruleT_DOUBLEEx: ;

}
// $ANTLR end T_DOUBLE

//   Comes from: 15:8: ( 'void' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T_VOID
 *
 * Looks to match the characters the constitute the token T_VOID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT_VOID(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T_VOID;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:15:8: ( 'void' )
    // f:/dev/projects/kensho/docs/Kensho.g:15:10: 'void'
    {
        MATCHS(lit_9); 
        if  (HASEXCEPTION())
        {
            goto ruleT_VOIDEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT_VOIDEx; /* Prevent compiler warnings */
    ruleT_VOIDEx: ;

}
// $ANTLR end T_VOID

//   Comes from: 16:8: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_ADD
 *
 * Looks to match the characters the constitute the token OP_ADD
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_ADD(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_ADD;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:16:8: ( '+' )
    // f:/dev/projects/kensho/docs/Kensho.g:16:10: '+'
    {
        MATCHC('+'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_ADDEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_ADDEx; /* Prevent compiler warnings */
    ruleOP_ADDEx: ;

}
// $ANTLR end OP_ADD

//   Comes from: 17:8: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_SUB
 *
 * Looks to match the characters the constitute the token OP_SUB
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_SUB(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_SUB;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:17:8: ( '-' )
    // f:/dev/projects/kensho/docs/Kensho.g:17:10: '-'
    {
        MATCHC('-'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_SUBEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_SUBEx; /* Prevent compiler warnings */
    ruleOP_SUBEx: ;

}
// $ANTLR end OP_SUB

//   Comes from: 18:8: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_MUL
 *
 * Looks to match the characters the constitute the token OP_MUL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_MUL(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_MUL;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:18:8: ( '*' )
    // f:/dev/projects/kensho/docs/Kensho.g:18:10: '*'
    {
        MATCHC('*'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_MULEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_MULEx; /* Prevent compiler warnings */
    ruleOP_MULEx: ;

}
// $ANTLR end OP_MUL

//   Comes from: 19:8: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_DIV
 *
 * Looks to match the characters the constitute the token OP_DIV
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_DIV(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_DIV;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:19:8: ( '/' )
    // f:/dev/projects/kensho/docs/Kensho.g:19:10: '/'
    {
        MATCHC('/'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_DIVEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_DIVEx; /* Prevent compiler warnings */
    ruleOP_DIVEx: ;

}
// $ANTLR end OP_DIV

//   Comes from: 20:8: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_NOT
 *
 * Looks to match the characters the constitute the token OP_NOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_NOT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_NOT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:20:8: ( '!' )
    // f:/dev/projects/kensho/docs/Kensho.g:20:10: '!'
    {
        MATCHC('!'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_NOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_NOTEx; /* Prevent compiler warnings */
    ruleOP_NOTEx: ;

}
// $ANTLR end OP_NOT

//   Comes from: 21:12: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_BIT_NOT
 *
 * Looks to match the characters the constitute the token OP_BIT_NOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_BIT_NOT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_BIT_NOT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:21:12: ( '~' )
    // f:/dev/projects/kensho/docs/Kensho.g:21:14: '~'
    {
        MATCHC('~'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_BIT_NOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_BIT_NOTEx; /* Prevent compiler warnings */
    ruleOP_BIT_NOTEx: ;

}
// $ANTLR end OP_BIT_NOT

//   Comes from: 22:8: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_AND
 *
 * Looks to match the characters the constitute the token OP_AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_AND(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_AND;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:22:8: ( '&&' )
    // f:/dev/projects/kensho/docs/Kensho.g:22:10: '&&'
    {
        MATCHS(lit_10); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_ANDEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_ANDEx; /* Prevent compiler warnings */
    ruleOP_ANDEx: ;

}
// $ANTLR end OP_AND

//   Comes from: 23:7: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_OR
 *
 * Looks to match the characters the constitute the token OP_OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_OR(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_OR;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:23:7: ( '||' )
    // f:/dev/projects/kensho/docs/Kensho.g:23:9: '||'
    {
        MATCHS(lit_11); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_OREx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_OREx; /* Prevent compiler warnings */
    ruleOP_OREx: ;

}
// $ANTLR end OP_OR

//   Comes from: 24:8: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_REM
 *
 * Looks to match the characters the constitute the token OP_REM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_REM(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_REM;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:24:8: ( '%' )
    // f:/dev/projects/kensho/docs/Kensho.g:24:10: '%'
    {
        MATCHC('%'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_REMEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_REMEx; /* Prevent compiler warnings */
    ruleOP_REMEx: ;

}
// $ANTLR end OP_REM

//   Comes from: 25:12: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_BIT_AND
 *
 * Looks to match the characters the constitute the token OP_BIT_AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_BIT_AND(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_BIT_AND;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:25:12: ( '&' )
    // f:/dev/projects/kensho/docs/Kensho.g:25:14: '&'
    {
        MATCHC('&'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_BIT_ANDEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_BIT_ANDEx; /* Prevent compiler warnings */
    ruleOP_BIT_ANDEx: ;

}
// $ANTLR end OP_BIT_AND

//   Comes from: 26:11: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_BIT_OR
 *
 * Looks to match the characters the constitute the token OP_BIT_OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_BIT_OR(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_BIT_OR;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:26:11: ( '|' )
    // f:/dev/projects/kensho/docs/Kensho.g:26:13: '|'
    {
        MATCHC('|'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_BIT_OREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_BIT_OREx; /* Prevent compiler warnings */
    ruleOP_BIT_OREx: ;

}
// $ANTLR end OP_BIT_OR

//   Comes from: 27:8: ( '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_XOR
 *
 * Looks to match the characters the constitute the token OP_XOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_XOR(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_XOR;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:27:8: ( '^' )
    // f:/dev/projects/kensho/docs/Kensho.g:27:10: '^'
    {
        MATCHC('^'); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_XOREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_XOREx; /* Prevent compiler warnings */
    ruleOP_XOREx: ;

}
// $ANTLR end OP_XOR

//   Comes from: 28:12: ( '<<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_SHIFT_L
 *
 * Looks to match the characters the constitute the token OP_SHIFT_L
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_SHIFT_L(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_SHIFT_L;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:28:12: ( '<<' )
    // f:/dev/projects/kensho/docs/Kensho.g:28:14: '<<'
    {
        MATCHS(lit_12); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_SHIFT_LEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_SHIFT_LEx; /* Prevent compiler warnings */
    ruleOP_SHIFT_LEx: ;

}
// $ANTLR end OP_SHIFT_L

//   Comes from: 29:12: ( '>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_SHIFT_R
 *
 * Looks to match the characters the constitute the token OP_SHIFT_R
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_SHIFT_R(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_SHIFT_R;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:29:12: ( '>>' )
    // f:/dev/projects/kensho/docs/Kensho.g:29:14: '>>'
    {
        MATCHS(lit_13); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_SHIFT_REx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_SHIFT_REx; /* Prevent compiler warnings */
    ruleOP_SHIFT_REx: ;

}
// $ANTLR end OP_SHIFT_R

//   Comes from: 30:13: ( '>>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_USHIFT_R
 *
 * Looks to match the characters the constitute the token OP_USHIFT_R
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_USHIFT_R(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_USHIFT_R;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:30:13: ( '>>>' )
    // f:/dev/projects/kensho/docs/Kensho.g:30:15: '>>>'
    {
        MATCHS(lit_14); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_USHIFT_REx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_USHIFT_REx; /* Prevent compiler warnings */
    ruleOP_USHIFT_REx: ;

}
// $ANTLR end OP_USHIFT_R

//   Comes from: 31:8: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CMP_EQ
 *
 * Looks to match the characters the constitute the token CMP_EQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCMP_EQ(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CMP_EQ;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:31:8: ( '==' )
    // f:/dev/projects/kensho/docs/Kensho.g:31:10: '=='
    {
        MATCHS(lit_15); 
        if  (HASEXCEPTION())
        {
            goto ruleCMP_EQEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCMP_EQEx; /* Prevent compiler warnings */
    ruleCMP_EQEx: ;

}
// $ANTLR end CMP_EQ

//   Comes from: 32:9: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CMP_NEQ
 *
 * Looks to match the characters the constitute the token CMP_NEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCMP_NEQ(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CMP_NEQ;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:32:9: ( '!=' )
    // f:/dev/projects/kensho/docs/Kensho.g:32:11: '!='
    {
        MATCHS(lit_16); 
        if  (HASEXCEPTION())
        {
            goto ruleCMP_NEQEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCMP_NEQEx; /* Prevent compiler warnings */
    ruleCMP_NEQEx: ;

}
// $ANTLR end CMP_NEQ

//   Comes from: 33:8: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CMP_LT
 *
 * Looks to match the characters the constitute the token CMP_LT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCMP_LT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CMP_LT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:33:8: ( '<' )
    // f:/dev/projects/kensho/docs/Kensho.g:33:10: '<'
    {
        MATCHC('<'); 
        if  (HASEXCEPTION())
        {
            goto ruleCMP_LTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCMP_LTEx; /* Prevent compiler warnings */
    ruleCMP_LTEx: ;

}
// $ANTLR end CMP_LT

//   Comes from: 34:8: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CMP_GT
 *
 * Looks to match the characters the constitute the token CMP_GT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCMP_GT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CMP_GT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:34:8: ( '>' )
    // f:/dev/projects/kensho/docs/Kensho.g:34:10: '>'
    {
        MATCHC('>'); 
        if  (HASEXCEPTION())
        {
            goto ruleCMP_GTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCMP_GTEx; /* Prevent compiler warnings */
    ruleCMP_GTEx: ;

}
// $ANTLR end CMP_GT

//   Comes from: 35:9: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CMP_LTE
 *
 * Looks to match the characters the constitute the token CMP_LTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCMP_LTE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CMP_LTE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:35:9: ( '<=' )
    // f:/dev/projects/kensho/docs/Kensho.g:35:11: '<='
    {
        MATCHS(lit_17); 
        if  (HASEXCEPTION())
        {
            goto ruleCMP_LTEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCMP_LTEEx; /* Prevent compiler warnings */
    ruleCMP_LTEEx: ;

}
// $ANTLR end CMP_LTE

//   Comes from: 36:9: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CMP_GTE
 *
 * Looks to match the characters the constitute the token CMP_GTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCMP_GTE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CMP_GTE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:36:9: ( '>=' )
    // f:/dev/projects/kensho/docs/Kensho.g:36:11: '>='
    {
        MATCHS(lit_18); 
        if  (HASEXCEPTION())
        {
            goto ruleCMP_GTEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCMP_GTEEx; /* Prevent compiler warnings */
    ruleCMP_GTEEx: ;

}
// $ANTLR end CMP_GTE

//   Comes from: 37:11: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_ASSIGN
 *
 * Looks to match the characters the constitute the token OP_ASSIGN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_ASSIGN(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_ASSIGN;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:37:11: ( '=' )
    // f:/dev/projects/kensho/docs/Kensho.g:37:13: '='
    {
        MATCHC('='); 
        if  (HASEXCEPTION())
        {
            goto ruleOP_ASSIGNEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOP_ASSIGNEx; /* Prevent compiler warnings */
    ruleOP_ASSIGNEx: ;

}
// $ANTLR end OP_ASSIGN

//   Comes from: 38:6: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K_IF
 *
 * Looks to match the characters the constitute the token K_IF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK_IF(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = K_IF;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:38:6: ( 'if' )
    // f:/dev/projects/kensho/docs/Kensho.g:38:8: 'if'
    {
        MATCHS(lit_19); 
        if  (HASEXCEPTION())
        {
            goto ruleK_IFEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleK_IFEx; /* Prevent compiler warnings */
    ruleK_IFEx: ;

}
// $ANTLR end K_IF

//   Comes from: 39:8: ( 'else' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K_ELSE
 *
 * Looks to match the characters the constitute the token K_ELSE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK_ELSE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = K_ELSE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:39:8: ( 'else' )
    // f:/dev/projects/kensho/docs/Kensho.g:39:10: 'else'
    {
        MATCHS(lit_20); 
        if  (HASEXCEPTION())
        {
            goto ruleK_ELSEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleK_ELSEEx; /* Prevent compiler warnings */
    ruleK_ELSEEx: ;

}
// $ANTLR end K_ELSE

//   Comes from: 40:9: ( 'while' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K_WHILE
 *
 * Looks to match the characters the constitute the token K_WHILE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK_WHILE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = K_WHILE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:40:9: ( 'while' )
    // f:/dev/projects/kensho/docs/Kensho.g:40:11: 'while'
    {
        MATCHS(lit_21); 
        if  (HASEXCEPTION())
        {
            goto ruleK_WHILEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleK_WHILEEx; /* Prevent compiler warnings */
    ruleK_WHILEEx: ;

}
// $ANTLR end K_WHILE

//   Comes from: 41:14: ( 'true' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LITERAL_TRUE
 *
 * Looks to match the characters the constitute the token LITERAL_TRUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLITERAL_TRUE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LITERAL_TRUE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:41:14: ( 'true' )
    // f:/dev/projects/kensho/docs/Kensho.g:41:16: 'true'
    {
        MATCHS(lit_22); 
        if  (HASEXCEPTION())
        {
            goto ruleLITERAL_TRUEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLITERAL_TRUEEx; /* Prevent compiler warnings */
    ruleLITERAL_TRUEEx: ;

}
// $ANTLR end LITERAL_TRUE

//   Comes from: 42:15: ( 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LITERAL_FALSE
 *
 * Looks to match the characters the constitute the token LITERAL_FALSE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLITERAL_FALSE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LITERAL_FALSE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:42:15: ( 'false' )
    // f:/dev/projects/kensho/docs/Kensho.g:42:17: 'false'
    {
        MATCHS(lit_23); 
        if  (HASEXCEPTION())
        {
            goto ruleLITERAL_FALSEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLITERAL_FALSEEx; /* Prevent compiler warnings */
    ruleLITERAL_FALSEEx: ;

}
// $ANTLR end LITERAL_FALSE

//   Comes from: 43:10: ( 'native' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K_NATIVE
 *
 * Looks to match the characters the constitute the token K_NATIVE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK_NATIVE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = K_NATIVE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:43:10: ( 'native' )
    // f:/dev/projects/kensho/docs/Kensho.g:43:12: 'native'
    {
        MATCHS(lit_24); 
        if  (HASEXCEPTION())
        {
            goto ruleK_NATIVEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleK_NATIVEEx; /* Prevent compiler warnings */
    ruleK_NATIVEEx: ;

}
// $ANTLR end K_NATIVE

//   Comes from: 44:10: ( 'return' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K_RETURN
 *
 * Looks to match the characters the constitute the token K_RETURN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK_RETURN(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = K_RETURN;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:44:10: ( 'return' )
    // f:/dev/projects/kensho/docs/Kensho.g:44:12: 'return'
    {
        MATCHS(lit_25); 
        if  (HASEXCEPTION())
        {
            goto ruleK_RETURNEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleK_RETURNEx; /* Prevent compiler warnings */
    ruleK_RETURNEx: ;

}
// $ANTLR end K_RETURN

//   Comes from: 45:7: ( 'new' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K_NEW
 *
 * Looks to match the characters the constitute the token K_NEW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK_NEW(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = K_NEW;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:45:7: ( 'new' )
    // f:/dev/projects/kensho/docs/Kensho.g:45:9: 'new'
    {
        MATCHS(lit_26); 
        if  (HASEXCEPTION())
        {
            goto ruleK_NEWEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleK_NEWEx; /* Prevent compiler warnings */
    ruleK_NEWEx: ;

}
// $ANTLR end K_NEW

//   Comes from: 46:10: ( 'delete' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K_DELETE
 *
 * Looks to match the characters the constitute the token K_DELETE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK_DELETE(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = K_DELETE;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:46:10: ( 'delete' )
    // f:/dev/projects/kensho/docs/Kensho.g:46:12: 'delete'
    {
        MATCHS(lit_27); 
        if  (HASEXCEPTION())
        {
            goto ruleK_DELETEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleK_DELETEEx; /* Prevent compiler warnings */
    ruleK_DELETEEx: ;

}
// $ANTLR end K_DELETE

//   Comes from: 47:10: ( 'struct' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K_STRUCT
 *
 * Looks to match the characters the constitute the token K_STRUCT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK_STRUCT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = K_STRUCT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:47:10: ( 'struct' )
    // f:/dev/projects/kensho/docs/Kensho.g:47:12: 'struct'
    {
        MATCHS(lit_28); 
        if  (HASEXCEPTION())
        {
            goto ruleK_STRUCTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleK_STRUCTEx; /* Prevent compiler warnings */
    ruleK_STRUCTEx: ;

}
// $ANTLR end K_STRUCT

//   Comes from: 48:10: ( 'static' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K_STATIC
 *
 * Looks to match the characters the constitute the token K_STATIC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK_STATIC(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = K_STATIC;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:48:10: ( 'static' )
    // f:/dev/projects/kensho/docs/Kensho.g:48:12: 'static'
    {
        MATCHS(lit_29); 
        if  (HASEXCEPTION())
        {
            goto ruleK_STATICEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleK_STATICEx; /* Prevent compiler warnings */
    ruleK_STATICEx: ;

}
// $ANTLR end K_STATIC

//   Comes from: 49:9: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BRACE_L
 *
 * Looks to match the characters the constitute the token BRACE_L
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBRACE_L(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BRACE_L;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:49:9: ( '{' )
    // f:/dev/projects/kensho/docs/Kensho.g:49:11: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleBRACE_LEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBRACE_LEx; /* Prevent compiler warnings */
    ruleBRACE_LEx: ;

}
// $ANTLR end BRACE_L

//   Comes from: 50:9: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BRACE_R
 *
 * Looks to match the characters the constitute the token BRACE_R
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBRACE_R(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BRACE_R;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:50:9: ( '}' )
    // f:/dev/projects/kensho/docs/Kensho.g:50:11: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleBRACE_REx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBRACE_REx; /* Prevent compiler warnings */
    ruleBRACE_REx: ;

}
// $ANTLR end BRACE_R

//   Comes from: 51:9: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PAREN_L
 *
 * Looks to match the characters the constitute the token PAREN_L
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPAREN_L(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PAREN_L;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:51:9: ( '(' )
    // f:/dev/projects/kensho/docs/Kensho.g:51:11: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto rulePAREN_LEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePAREN_LEx; /* Prevent compiler warnings */
    rulePAREN_LEx: ;

}
// $ANTLR end PAREN_L

//   Comes from: 52:9: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PAREN_R
 *
 * Looks to match the characters the constitute the token PAREN_R
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPAREN_R(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PAREN_R;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:52:9: ( ')' )
    // f:/dev/projects/kensho/docs/Kensho.g:52:11: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto rulePAREN_REx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePAREN_REx; /* Prevent compiler warnings */
    rulePAREN_REx: ;

}
// $ANTLR end PAREN_R

//   Comes from: 53:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMA(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMA;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:53:7: ( ',' )
    // f:/dev/projects/kensho/docs/Kensho.g:53:9: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMMAEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 54:11: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMICOLON
 *
 * Looks to match the characters the constitute the token SEMICOLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEMICOLON(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SEMICOLON;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:54:11: ( ';' )
    // f:/dev/projects/kensho/docs/Kensho.g:54:13: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleSEMICOLONEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSEMICOLONEx; /* Prevent compiler warnings */
    ruleSEMICOLONEx: ;

}
// $ANTLR end SEMICOLON

//   Comes from: 431:2: ( 'a' .. 'z' | 'A' .. 'Z' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LETTER
 *
 * Looks to match the characters the constitute the token LETTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLETTER(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // f:/dev/projects/kensho/docs/Kensho.g:431:2: ( 'a' .. 'z' | 'A' .. 'Z' )
    // f:/dev/projects/kensho/docs/Kensho.g:
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleLETTEREx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleLETTEREx; /* Prevent compiler warnings */
    ruleLETTEREx: ;

}
// $ANTLR end LETTER

//   Comes from: 436:2: ( '0' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIGIT
 *
 * Looks to match the characters the constitute the token DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDIGIT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // f:/dev/projects/kensho/docs/Kensho.g:436:2: ( '0' .. '9' )
    // f:/dev/projects/kensho/docs/Kensho.g:436:4: '0' .. '9'
    {
        MATCHRANGE('0', '9'); 
        if  (HASEXCEPTION())
        {
            goto ruleDIGITEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleDIGITEx; /* Prevent compiler warnings */
    ruleDIGITEx: ;

}
// $ANTLR end DIGIT

//   Comes from: 441:2: ( '1' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start POSDIGIT
 *
 * Looks to match the characters the constitute the token POSDIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPOSDIGIT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // f:/dev/projects/kensho/docs/Kensho.g:441:2: ( '1' .. '9' )
    // f:/dev/projects/kensho/docs/Kensho.g:441:4: '1' .. '9'
    {
        MATCHRANGE('1', '9'); 
        if  (HASEXCEPTION())
        {
            goto rulePOSDIGITEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto rulePOSDIGITEx; /* Prevent compiler warnings */
    rulePOSDIGITEx: ;

}
// $ANTLR end POSDIGIT

//   Comes from: 446:2: ( DIGIT | 'a' .. 'f' | 'A' .. 'F' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEXDIGIT
 *
 * Looks to match the characters the constitute the token HEXDIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEXDIGIT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // f:/dev/projects/kensho/docs/Kensho.g:446:2: ( DIGIT | 'a' .. 'f' | 'A' .. 'F' )
    // f:/dev/projects/kensho/docs/Kensho.g:
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleHEXDIGITEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleHEXDIGITEx; /* Prevent compiler warnings */
    ruleHEXDIGITEx: ;

}
// $ANTLR end HEXDIGIT

//   Comes from: 451:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXPONENT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // f:/dev/projects/kensho/docs/Kensho.g:451:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DIGIT )+ )
    // f:/dev/projects/kensho/docs/Kensho.g:451:4: ( 'e' | 'E' ) ( '+' | '-' )? ( DIGIT )+
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXPONENTEx;
        }


        // f:/dev/projects/kensho/docs/Kensho.g:451:18: ( '+' | '-' )?
        {
            int alt1=2;
            switch ( LA(1) ) 
            {
                case '+':
                case '-':
                	{
                		alt1=1;
                	}
                    break;
            }

            switch (alt1) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }
        // f:/dev/projects/kensho/docs/Kensho.g:451:33: ( DIGIT )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt2=1;
        		}
        	    break;

        	}

        	switch (alt2) 
        	{
        	    case 1:
        	        // f:/dev/projects/kensho/docs/Kensho.g:451:33: DIGIT
        	        {
        	            /* 451:33: DIGIT */
        	            mDIGIT(ctx ); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleEXPONENTEx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 456:2: ( '\\\\' ( 't' | 'n' | 'r' | '\\\\' | '\\'' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESCSEQ
 *
 * Looks to match the characters the constitute the token ESCSEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mESCSEQ(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // f:/dev/projects/kensho/docs/Kensho.g:456:2: ( '\\\\' ( 't' | 'n' | 'r' | '\\\\' | '\\'' ) )
    // f:/dev/projects/kensho/docs/Kensho.g:456:4: '\\\\' ( 't' | 'n' | 'r' | '\\\\' | '\\'' )
    {
        MATCHC('\\'); 
        if  (HASEXCEPTION())
        {
            goto ruleESCSEQEx;
        }

        if ( LA(1) == '\'' || LA(1) == '\\' || LA(1) == 'n' || LA(1) == 'r' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleESCSEQEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleESCSEQEx; /* Prevent compiler warnings */
    ruleESCSEQEx: ;

}
// $ANTLR end ESCSEQ

//   Comes from: 460:2: ( ( ' ' | '\\t' | '\\n' | '\\r' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:460:2: ( ( ' ' | '\\t' | '\\n' | '\\r' ) )
    // f:/dev/projects/kensho/docs/Kensho.g:460:4: ( ' ' | '\\t' | '\\n' | '\\r' )
    {
        if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWSEx;
        }

        {
             LEXSTATE->channel=HIDDEN; 
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 465:2: ( ( '#' | '//' ) (~ ( '\\r' | '\\n' ) )* ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LINE_COMMENT
 *
 * Looks to match the characters the constitute the token LINE_COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLINE_COMMENT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LINE_COMMENT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:465:2: ( ( '#' | '//' ) (~ ( '\\r' | '\\n' ) )* ( '\\r' )? '\\n' )
    // f:/dev/projects/kensho/docs/Kensho.g:465:4: ( '#' | '//' ) (~ ( '\\r' | '\\n' ) )* ( '\\r' )? '\\n'
    {

        // f:/dev/projects/kensho/docs/Kensho.g:465:4: ( '#' | '//' )
        {
            int alt3=2;
            switch ( LA(1) ) 
            {
            case '#':
            	{
            		alt3=1;
            	}
                break;
            case '/':
            	{
            		alt3=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 3;
                EXCEPTION->state        = 0;


                goto ruleLINE_COMMENTEx;
            }

            switch (alt3) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:465:6: '#'
        	    {
        	        MATCHC('#'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:465:12: '//'
        	    {
        	        MATCHS(lit_30); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }



        	    }
        	    break;

            }
        }

        // f:/dev/projects/kensho/docs/Kensho.g:465:19: (~ ( '\\r' | '\\n' ) )*

        for (;;)
        {
            int alt4=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA4_0 = LA(1);
                if ( (((LA4_0 >= 0x0000) && (LA4_0 <= '\t')) || ((LA4_0 >= 0x000B) && (LA4_0 <= '\f')) || ((LA4_0 >= 0x000E) && (LA4_0 <= 0xFFFF))) ) 
                {
                    alt4=1;
                }

            }
            switch (alt4) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:465:19: ~ ( '\\r' | '\\n' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop4;	/* break out of the loop */
        	    break;
            }
        }
        loop4: ; /* Jump out to here if this rule does not match */


        // f:/dev/projects/kensho/docs/Kensho.g:465:33: ( '\\r' )?
        {
            int alt5=2;
            switch ( LA(1) ) 
            {
                case '\r':
                	{
                		alt5=1;
                	}
                    break;
            }

            switch (alt5) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:465:33: '\\r'
        	    {
        	        MATCHC('\r'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

            }
        }
        MATCHC('\n'); 
        if  (HASEXCEPTION())
        {
            goto ruleLINE_COMMENTEx;
        }

        {
             LEXSTATE->channel = HIDDEN; 
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLINE_COMMENTEx; /* Prevent compiler warnings */
    ruleLINE_COMMENTEx: ;

}
// $ANTLR end LINE_COMMENT

//   Comes from: 470:2: ( '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BLOCK_COMMENT
 *
 * Looks to match the characters the constitute the token BLOCK_COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBLOCK_COMMENT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BLOCK_COMMENT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:470:2: ( '/*' ( options {greedy=false; } : . )* '*/' )
    // f:/dev/projects/kensho/docs/Kensho.g:470:4: '/*' ( options {greedy=false; } : . )* '*/'
    {
        MATCHS(lit_31); 
        if  (HASEXCEPTION())
        {
            goto ruleBLOCK_COMMENTEx;
        }



        // f:/dev/projects/kensho/docs/Kensho.g:470:9: ( options {greedy=false; } : . )*

        for (;;)
        {
            int alt6=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA6_0 = LA(1);
                if ( (LA6_0 == '*') ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA6_1 = LA(2);
                        if ( (LA6_1 == '/') ) 
                        {
                            alt6=2;
                        }
                        else if ( (((LA6_1 >= 0x0000) && (LA6_1 <= '.')) || ((LA6_1 >= '0') && (LA6_1 <= 0xFFFF))) ) 
                        {
                            alt6=1;
                        }

                    }
                }
                else if ( (((LA6_0 >= 0x0000) && (LA6_0 <= ')')) || ((LA6_0 >= '+') && (LA6_0 <= 0xFFFF))) ) 
                {
                    alt6=1;
                }

            }
            switch (alt6) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:470:39: .
        	    {
        	        MATCHANY(); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleBLOCK_COMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop6;	/* break out of the loop */
        	    break;
            }
        }
        loop6: ; /* Jump out to here if this rule does not match */

        MATCHS(lit_32); 
        if  (HASEXCEPTION())
        {
            goto ruleBLOCK_COMMENTEx;
        }


        {
             LEXSTATE->channel = HIDDEN; 
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBLOCK_COMMENTEx; /* Prevent compiler warnings */
    ruleBLOCK_COMMENTEx: ;

}
// $ANTLR end BLOCK_COMMENT

//   Comes from: 475:2: ( '0' ( '0' .. '7' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LITERAL_OCT
 *
 * Looks to match the characters the constitute the token LITERAL_OCT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLITERAL_OCT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LITERAL_OCT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:475:2: ( '0' ( '0' .. '7' )+ )
    // f:/dev/projects/kensho/docs/Kensho.g:475:4: '0' ( '0' .. '7' )+
    {
        MATCHC('0'); 
        if  (HASEXCEPTION())
        {
            goto ruleLITERAL_OCTEx;
        }

        // f:/dev/projects/kensho/docs/Kensho.g:475:8: ( '0' .. '7' )+
        {
            int cnt7=0;

            for (;;)
            {
                int alt7=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        		{
        			alt7=1;
        		}
        	    break;

        	}

        	switch (alt7) 
        	{
        	    case 1:
        	        // f:/dev/projects/kensho/docs/Kensho.g:475:10: '0' .. '7'
        	        {
        	            MATCHRANGE('0', '7'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleLITERAL_OCTEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt7 >= 1 )
        		{
        		    goto loop7;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleLITERAL_OCTEx;
        	}
        	cnt7++;
            }
            loop7: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLITERAL_OCTEx; /* Prevent compiler warnings */
    ruleLITERAL_OCTEx: ;

}
// $ANTLR end LITERAL_OCT

//   Comes from: 479:2: ( '0x' ( HEXDIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LITERAL_HEX
 *
 * Looks to match the characters the constitute the token LITERAL_HEX
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLITERAL_HEX(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LITERAL_HEX;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:479:2: ( '0x' ( HEXDIGIT )+ )
    // f:/dev/projects/kensho/docs/Kensho.g:479:4: '0x' ( HEXDIGIT )+
    {
        MATCHS(lit_33); 
        if  (HASEXCEPTION())
        {
            goto ruleLITERAL_HEXEx;
        }


        // f:/dev/projects/kensho/docs/Kensho.g:479:9: ( HEXDIGIT )+
        {
            int cnt8=0;

            for (;;)
            {
                int alt8=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        	case 'A':
        	case 'B':
        	case 'C':
        	case 'D':
        	case 'E':
        	case 'F':
        	case 'a':
        	case 'b':
        	case 'c':
        	case 'd':
        	case 'e':
        	case 'f':
        		{
        			alt8=1;
        		}
        	    break;

        	}

        	switch (alt8) 
        	{
        	    case 1:
        	        // f:/dev/projects/kensho/docs/Kensho.g:479:11: HEXDIGIT
        	        {
        	            /* 479:11: HEXDIGIT */
        	            mHEXDIGIT(ctx ); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleLITERAL_HEXEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt8 >= 1 )
        		{
        		    goto loop8;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleLITERAL_HEXEx;
        	}
        	cnt8++;
            }
            loop8: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLITERAL_HEXEx; /* Prevent compiler warnings */
    ruleLITERAL_HEXEx: ;

}
// $ANTLR end LITERAL_HEX

//   Comes from: 483:2: ( ( DIGIT | POSDIGIT ( DIGIT )+ ) ( 'l' | 'L' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LITERAL_INT
 *
 * Looks to match the characters the constitute the token LITERAL_INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLITERAL_INT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LITERAL_INT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:483:2: ( ( DIGIT | POSDIGIT ( DIGIT )+ ) ( 'l' | 'L' )? )
    // f:/dev/projects/kensho/docs/Kensho.g:483:4: ( DIGIT | POSDIGIT ( DIGIT )+ ) ( 'l' | 'L' )?
    {

        // f:/dev/projects/kensho/docs/Kensho.g:483:4: ( DIGIT | POSDIGIT ( DIGIT )+ )
        {
            int alt10=2;
            switch ( LA(1) ) 
            {
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            	{
            		switch ( LA(2) ) 
            		{
            		case '0':
            		case '1':
            		case '2':
            		case '3':
            		case '4':
            		case '5':
            		case '6':
            		case '7':
            		case '8':
            		case '9':
            			{
            				alt10=2;
            			}
            		    break;

            		default:
            		    alt10=1;}

            	}
                break;
            case '0':
            	{
            		alt10=1;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 10;
                EXCEPTION->state        = 0;


                goto ruleLITERAL_INTEx;
            }

            switch (alt10) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:483:6: DIGIT
        	    {
        	        /* 483:6: DIGIT */
        	        mDIGIT(ctx ); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLITERAL_INTEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:483:14: POSDIGIT ( DIGIT )+
        	    {
        	        /* 483:14: POSDIGIT ( DIGIT )+ */
        	        mPOSDIGIT(ctx ); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLITERAL_INTEx;
        	        }

        	        // f:/dev/projects/kensho/docs/Kensho.g:483:23: ( DIGIT )+
        	        {
        	            int cnt9=0;

        	            for (;;)
        	            {
        	                int alt9=2;
        	        	switch ( LA(1) ) 
        	        	{
        	        	case '0':
        	        	case '1':
        	        	case '2':
        	        	case '3':
        	        	case '4':
        	        	case '5':
        	        	case '6':
        	        	case '7':
        	        	case '8':
        	        	case '9':
        	        		{
        	        			alt9=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt9) 
        	        	{
        	        	    case 1:
        	        	        // f:/dev/projects/kensho/docs/Kensho.g:483:23: DIGIT
        	        	        {
        	        	            /* 483:23: DIGIT */
        	        	            mDIGIT(ctx ); 
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruleLITERAL_INTEx;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:
        	        	    
        	        		if ( cnt9 >= 1 )
        	        		{
        	        		    goto loop9;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto ruleLITERAL_INTEx;
        	        	}
        	        	cnt9++;
        	            }
        	            loop9: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;

            }
        }

        // f:/dev/projects/kensho/docs/Kensho.g:483:32: ( 'l' | 'L' )?
        {
            int alt11=2;
            switch ( LA(1) ) 
            {
                case 'L':
                case 'l':
                	{
                		alt11=1;
                	}
                    break;
            }

            switch (alt11) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:
        	    {
        	        if ( LA(1) == 'L' || LA(1) == 'l' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleLITERAL_INTEx;
        	        }


        	    }
        	    break;

            }
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLITERAL_INTEx; /* Prevent compiler warnings */
    ruleLITERAL_INTEx: ;

}
// $ANTLR end LITERAL_INT

//   Comes from: 487:2: ( ( POSDIGIT ( DIGIT )* | ( POSDIGIT ( DIGIT )+ | DIGIT )? '.' ( DIGIT )+ ) ( EXPONENT )? ( 'f' | 'F' | 'd' | 'D' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LITERAL_FLOAT
 *
 * Looks to match the characters the constitute the token LITERAL_FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLITERAL_FLOAT(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LITERAL_FLOAT;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:487:2: ( ( POSDIGIT ( DIGIT )* | ( POSDIGIT ( DIGIT )+ | DIGIT )? '.' ( DIGIT )+ ) ( EXPONENT )? ( 'f' | 'F' | 'd' | 'D' )? )
    // f:/dev/projects/kensho/docs/Kensho.g:487:4: ( POSDIGIT ( DIGIT )* | ( POSDIGIT ( DIGIT )+ | DIGIT )? '.' ( DIGIT )+ ) ( EXPONENT )? ( 'f' | 'F' | 'd' | 'D' )?
    {

        // f:/dev/projects/kensho/docs/Kensho.g:487:4: ( POSDIGIT ( DIGIT )* | ( POSDIGIT ( DIGIT )+ | DIGIT )? '.' ( DIGIT )+ )
        {
            int alt16=2;
            alt16 = cdfa16.predict(ctx, RECOGNIZER, ISTREAM, &cdfa16);
            if  (HASEXCEPTION())
            {
                goto ruleLITERAL_FLOATEx;
            }

            switch (alt16) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:487:6: POSDIGIT ( DIGIT )*
        	    {
        	        /* 487:6: POSDIGIT ( DIGIT )* */
        	        mPOSDIGIT(ctx ); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLITERAL_FLOATEx;
        	        }


        	        // f:/dev/projects/kensho/docs/Kensho.g:487:15: ( DIGIT )*

        	        for (;;)
        	        {
        	            int alt12=2;
        	            switch ( LA(1) ) 
        	            {
        	            case '0':
        	            case '1':
        	            case '2':
        	            case '3':
        	            case '4':
        	            case '5':
        	            case '6':
        	            case '7':
        	            case '8':
        	            case '9':
        	            	{
        	            		alt12=1;
        	            	}
        	                break;

        	            }

        	            switch (alt12) 
        	            {
        	        	case 1:
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:487:15: DIGIT
        	        	    {
        	        	        /* 487:15: DIGIT */
        	        	        mDIGIT(ctx ); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleLITERAL_FLOATEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop12;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop12: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:487:24: ( POSDIGIT ( DIGIT )+ | DIGIT )? '.' ( DIGIT )+
        	    {

        	        // f:/dev/projects/kensho/docs/Kensho.g:487:24: ( POSDIGIT ( DIGIT )+ | DIGIT )?
        	        {
        	            int alt14=3;
        	            switch ( LA(1) ) 
        	            {
        	                case '1':
        	                case '2':
        	                case '3':
        	                case '4':
        	                case '5':
        	                case '6':
        	                case '7':
        	                case '8':
        	                case '9':
        	                	{
        	                		switch ( LA(2) ) 
        	                		{
        	                		    case '0':
        	                		    case '1':
        	                		    case '2':
        	                		    case '3':
        	                		    case '4':
        	                		    case '5':
        	                		    case '6':
        	                		    case '7':
        	                		    case '8':
        	                		    case '9':
        	                		    	{
        	                		    		alt14=1;
        	                		    	}
        	                		        break;
        	                		    case '.':
        	                		    	{
        	                		    		alt14=2;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case '0':
        	                	{
        	                		alt14=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt14) 
        	            {
        	        	case 1:
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:487:26: POSDIGIT ( DIGIT )+
        	        	    {
        	        	        /* 487:26: POSDIGIT ( DIGIT )+ */
        	        	        mPOSDIGIT(ctx ); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleLITERAL_FLOATEx;
        	        	        }

        	        	        // f:/dev/projects/kensho/docs/Kensho.g:487:35: ( DIGIT )+
        	        	        {
        	        	            int cnt13=0;

        	        	            for (;;)
        	        	            {
        	        	                int alt13=2;
        	        	        	switch ( LA(1) ) 
        	        	        	{
        	        	        	case '0':
        	        	        	case '1':
        	        	        	case '2':
        	        	        	case '3':
        	        	        	case '4':
        	        	        	case '5':
        	        	        	case '6':
        	        	        	case '7':
        	        	        	case '8':
        	        	        	case '9':
        	        	        		{
        	        	        			alt13=1;
        	        	        		}
        	        	        	    break;

        	        	        	}

        	        	        	switch (alt13) 
        	        	        	{
        	        	        	    case 1:
        	        	        	        // f:/dev/projects/kensho/docs/Kensho.g:487:35: DIGIT
        	        	        	        {
        	        	        	            /* 487:35: DIGIT */
        	        	        	            mDIGIT(ctx ); 
        	        	        	            if  (HASEXCEPTION())
        	        	        	            {
        	        	        	                goto ruleLITERAL_FLOATEx;
        	        	        	            }


        	        	        	        }
        	        	        	        break;

        	        	        	    default:
        	        	        	    
        	        	        		if ( cnt13 >= 1 )
        	        	        		{
        	        	        		    goto loop13;
        	        	        		}
        	        	        		/* mismatchedSetEx()
        	        	        		 */
        	        	        		CONSTRUCTEX();
        	        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        	        		goto ruleLITERAL_FLOATEx;
        	        	        	}
        	        	        	cnt13++;
        	        	            }
        	        	            loop13: ;	/* Jump to here if this rule does not match */
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:487:44: DIGIT
        	        	    {
        	        	        /* 487:44: DIGIT */
        	        	        mDIGIT(ctx ); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleLITERAL_FLOATEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        MATCHC('.'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLITERAL_FLOATEx;
        	        }

        	        // f:/dev/projects/kensho/docs/Kensho.g:487:57: ( DIGIT )+
        	        {
        	            int cnt15=0;

        	            for (;;)
        	            {
        	                int alt15=2;
        	        	switch ( LA(1) ) 
        	        	{
        	        	case '0':
        	        	case '1':
        	        	case '2':
        	        	case '3':
        	        	case '4':
        	        	case '5':
        	        	case '6':
        	        	case '7':
        	        	case '8':
        	        	case '9':
        	        		{
        	        			alt15=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt15) 
        	        	{
        	        	    case 1:
        	        	        // f:/dev/projects/kensho/docs/Kensho.g:487:57: DIGIT
        	        	        {
        	        	            /* 487:57: DIGIT */
        	        	            mDIGIT(ctx ); 
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruleLITERAL_FLOATEx;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:
        	        	    
        	        		if ( cnt15 >= 1 )
        	        		{
        	        		    goto loop15;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto ruleLITERAL_FLOATEx;
        	        	}
        	        	cnt15++;
        	            }
        	            loop15: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;

            }
        }

        // f:/dev/projects/kensho/docs/Kensho.g:488:3: ( EXPONENT )?
        {
            int alt17=2;
            switch ( LA(1) ) 
            {
                case 'E':
                case 'e':
                	{
                		alt17=1;
                	}
                    break;
            }

            switch (alt17) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:488:3: EXPONENT
        	    {
        	        /* 488:3: EXPONENT */
        	        mEXPONENT(ctx ); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLITERAL_FLOATEx;
        	        }


        	    }
        	    break;

            }
        }

        // f:/dev/projects/kensho/docs/Kensho.g:488:13: ( 'f' | 'F' | 'd' | 'D' )?
        {
            int alt18=2;
            switch ( LA(1) ) 
            {
                case 'D':
                case 'F':
                case 'd':
                case 'f':
                	{
                		alt18=1;
                	}
                    break;
            }

            switch (alt18) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:
        	    {
        	        if ( LA(1) == 'D' || LA(1) == 'F' || LA(1) == 'd' || LA(1) == 'f' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleLITERAL_FLOATEx;
        	        }


        	    }
        	    break;

            }
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLITERAL_FLOATEx; /* Prevent compiler warnings */
    ruleLITERAL_FLOATEx: ;

}
// $ANTLR end LITERAL_FLOAT

//   Comes from: 492:2: ( LETTER ( LETTER | DIGIT )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mID(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ID;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:492:2: ( LETTER ( LETTER | DIGIT )* )
    // f:/dev/projects/kensho/docs/Kensho.g:492:4: LETTER ( LETTER | DIGIT )*
    {
        /* 492:4: LETTER ( LETTER | DIGIT )* */
        mLETTER(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleIDEx;
        }


        // f:/dev/projects/kensho/docs/Kensho.g:492:11: ( LETTER | DIGIT )*

        for (;;)
        {
            int alt19=2;
            switch ( LA(1) ) 
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt19=1;
            	}
                break;

            }

            switch (alt19) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop19;	/* break out of the loop */
        	    break;
            }
        }
        loop19: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 496:2: ( '\\'' ( ESCSEQ | ~ ( '\\'' | '\\r' | '\\n' | '\\t' | '\\\\' ) ) '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LITERAL_CHAR
 *
 * Looks to match the characters the constitute the token LITERAL_CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLITERAL_CHAR(pKenshoLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LITERAL_CHAR;
       
    
    // f:/dev/projects/kensho/docs/Kensho.g:496:2: ( '\\'' ( ESCSEQ | ~ ( '\\'' | '\\r' | '\\n' | '\\t' | '\\\\' ) ) '\\'' )
    // f:/dev/projects/kensho/docs/Kensho.g:496:4: '\\'' ( ESCSEQ | ~ ( '\\'' | '\\r' | '\\n' | '\\t' | '\\\\' ) ) '\\''
    {
        MATCHC('\''); 
        if  (HASEXCEPTION())
        {
            goto ruleLITERAL_CHAREx;
        }


        // f:/dev/projects/kensho/docs/Kensho.g:496:9: ( ESCSEQ | ~ ( '\\'' | '\\r' | '\\n' | '\\t' | '\\\\' ) )
        {
            int alt20=2;

            {
                int LA20_0 = LA(1);
                if ( (LA20_0 == '\\') ) 
                {
                    alt20=1;
                }
                else if ( (((LA20_0 >= 0x0000) && (LA20_0 <= '\b')) || ((LA20_0 >= 0x000B) && (LA20_0 <= '\f')) || ((LA20_0 >= 0x000E) && (LA20_0 <= '&')) || ((LA20_0 >= '(') && (LA20_0 <= '[')) || ((LA20_0 >= ']') && (LA20_0 <= 0xFFFF))) ) 
                {
                    alt20=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 20;
                    EXCEPTION->state        = 0;


                    goto ruleLITERAL_CHAREx;
                }
            }
            switch (alt20) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:496:11: ESCSEQ
        	    {
        	        /* 496:11: ESCSEQ */
        	        mESCSEQ(ctx ); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLITERAL_CHAREx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:496:20: ~ ( '\\'' | '\\r' | '\\n' | '\\t' | '\\\\' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\b')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= '&')) || ((LA(1) >= '(') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleLITERAL_CHAREx;
        	        }


        	    }
        	    break;

            }
        }
        MATCHC('\''); 
        if  (HASEXCEPTION())
        {
            goto ruleLITERAL_CHAREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLITERAL_CHAREx; /* Prevent compiler warnings */
    ruleLITERAL_CHAREx: ;

}
// $ANTLR end LITERAL_CHAR

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pKenshoLexer ctx)
{
    {
        //  f:/dev/projects/kensho/docs/Kensho.g:1:8: ( T_BOOL | T_BYTE | T_SHORT | T_INT | T_CHAR | T_LONG | T_FLOAT | T_DOUBLE | T_VOID | OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_NOT | OP_BIT_NOT | OP_AND | OP_OR | OP_REM | OP_BIT_AND | OP_BIT_OR | OP_XOR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | CMP_EQ | CMP_NEQ | CMP_LT | CMP_GT | CMP_LTE | CMP_GTE | OP_ASSIGN | K_IF | K_ELSE | K_WHILE | LITERAL_TRUE | LITERAL_FALSE | K_NATIVE | K_RETURN | K_NEW | K_DELETE | K_STRUCT | K_STATIC | BRACE_L | BRACE_R | PAREN_L | PAREN_R | COMMA | SEMICOLON | WS | LINE_COMMENT | BLOCK_COMMENT | LITERAL_OCT | LITERAL_HEX | LITERAL_INT | LITERAL_FLOAT | ID | LITERAL_CHAR )
        
        ANTLR3_UINT32 alt21;

        alt21=57;

        alt21 = cdfa21.predict(ctx, RECOGNIZER, ISTREAM, &cdfa21);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt21) 
        {
    	case 1:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:10: T_BOOL
    	    {
    	        /* 1:10: T_BOOL */
    	        mT_BOOL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:17: T_BYTE
    	    {
    	        /* 1:17: T_BYTE */
    	        mT_BYTE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:24: T_SHORT
    	    {
    	        /* 1:24: T_SHORT */
    	        mT_SHORT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:32: T_INT
    	    {
    	        /* 1:32: T_INT */
    	        mT_INT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:38: T_CHAR
    	    {
    	        /* 1:38: T_CHAR */
    	        mT_CHAR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:45: T_LONG
    	    {
    	        /* 1:45: T_LONG */
    	        mT_LONG(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:52: T_FLOAT
    	    {
    	        /* 1:52: T_FLOAT */
    	        mT_FLOAT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:60: T_DOUBLE
    	    {
    	        /* 1:60: T_DOUBLE */
    	        mT_DOUBLE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:69: T_VOID
    	    {
    	        /* 1:69: T_VOID */
    	        mT_VOID(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:76: OP_ADD
    	    {
    	        /* 1:76: OP_ADD */
    	        mOP_ADD(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:83: OP_SUB
    	    {
    	        /* 1:83: OP_SUB */
    	        mOP_SUB(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:90: OP_MUL
    	    {
    	        /* 1:90: OP_MUL */
    	        mOP_MUL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:97: OP_DIV
    	    {
    	        /* 1:97: OP_DIV */
    	        mOP_DIV(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:104: OP_NOT
    	    {
    	        /* 1:104: OP_NOT */
    	        mOP_NOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:111: OP_BIT_NOT
    	    {
    	        /* 1:111: OP_BIT_NOT */
    	        mOP_BIT_NOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:122: OP_AND
    	    {
    	        /* 1:122: OP_AND */
    	        mOP_AND(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:129: OP_OR
    	    {
    	        /* 1:129: OP_OR */
    	        mOP_OR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:135: OP_REM
    	    {
    	        /* 1:135: OP_REM */
    	        mOP_REM(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:142: OP_BIT_AND
    	    {
    	        /* 1:142: OP_BIT_AND */
    	        mOP_BIT_AND(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:153: OP_BIT_OR
    	    {
    	        /* 1:153: OP_BIT_OR */
    	        mOP_BIT_OR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:163: OP_XOR
    	    {
    	        /* 1:163: OP_XOR */
    	        mOP_XOR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:170: OP_SHIFT_L
    	    {
    	        /* 1:170: OP_SHIFT_L */
    	        mOP_SHIFT_L(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:181: OP_SHIFT_R
    	    {
    	        /* 1:181: OP_SHIFT_R */
    	        mOP_SHIFT_R(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 24:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:192: OP_USHIFT_R
    	    {
    	        /* 1:192: OP_USHIFT_R */
    	        mOP_USHIFT_R(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 25:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:204: CMP_EQ
    	    {
    	        /* 1:204: CMP_EQ */
    	        mCMP_EQ(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 26:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:211: CMP_NEQ
    	    {
    	        /* 1:211: CMP_NEQ */
    	        mCMP_NEQ(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 27:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:219: CMP_LT
    	    {
    	        /* 1:219: CMP_LT */
    	        mCMP_LT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 28:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:226: CMP_GT
    	    {
    	        /* 1:226: CMP_GT */
    	        mCMP_GT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 29:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:233: CMP_LTE
    	    {
    	        /* 1:233: CMP_LTE */
    	        mCMP_LTE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 30:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:241: CMP_GTE
    	    {
    	        /* 1:241: CMP_GTE */
    	        mCMP_GTE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 31:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:249: OP_ASSIGN
    	    {
    	        /* 1:249: OP_ASSIGN */
    	        mOP_ASSIGN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 32:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:259: K_IF
    	    {
    	        /* 1:259: K_IF */
    	        mK_IF(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 33:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:264: K_ELSE
    	    {
    	        /* 1:264: K_ELSE */
    	        mK_ELSE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 34:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:271: K_WHILE
    	    {
    	        /* 1:271: K_WHILE */
    	        mK_WHILE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 35:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:279: LITERAL_TRUE
    	    {
    	        /* 1:279: LITERAL_TRUE */
    	        mLITERAL_TRUE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 36:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:292: LITERAL_FALSE
    	    {
    	        /* 1:292: LITERAL_FALSE */
    	        mLITERAL_FALSE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 37:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:306: K_NATIVE
    	    {
    	        /* 1:306: K_NATIVE */
    	        mK_NATIVE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 38:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:315: K_RETURN
    	    {
    	        /* 1:315: K_RETURN */
    	        mK_RETURN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 39:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:324: K_NEW
    	    {
    	        /* 1:324: K_NEW */
    	        mK_NEW(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 40:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:330: K_DELETE
    	    {
    	        /* 1:330: K_DELETE */
    	        mK_DELETE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 41:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:339: K_STRUCT
    	    {
    	        /* 1:339: K_STRUCT */
    	        mK_STRUCT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 42:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:348: K_STATIC
    	    {
    	        /* 1:348: K_STATIC */
    	        mK_STATIC(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 43:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:357: BRACE_L
    	    {
    	        /* 1:357: BRACE_L */
    	        mBRACE_L(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 44:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:365: BRACE_R
    	    {
    	        /* 1:365: BRACE_R */
    	        mBRACE_R(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 45:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:373: PAREN_L
    	    {
    	        /* 1:373: PAREN_L */
    	        mPAREN_L(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 46:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:381: PAREN_R
    	    {
    	        /* 1:381: PAREN_R */
    	        mPAREN_R(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 47:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:389: COMMA
    	    {
    	        /* 1:389: COMMA */
    	        mCOMMA(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 48:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:395: SEMICOLON
    	    {
    	        /* 1:395: SEMICOLON */
    	        mSEMICOLON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 49:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:405: WS
    	    {
    	        /* 1:405: WS */
    	        mWS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 50:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:408: LINE_COMMENT
    	    {
    	        /* 1:408: LINE_COMMENT */
    	        mLINE_COMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 51:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:421: BLOCK_COMMENT
    	    {
    	        /* 1:421: BLOCK_COMMENT */
    	        mBLOCK_COMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 52:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:435: LITERAL_OCT
    	    {
    	        /* 1:435: LITERAL_OCT */
    	        mLITERAL_OCT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 53:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:447: LITERAL_HEX
    	    {
    	        /* 1:447: LITERAL_HEX */
    	        mLITERAL_HEX(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 54:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:459: LITERAL_INT
    	    {
    	        /* 1:459: LITERAL_INT */
    	        mLITERAL_INT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 55:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:471: LITERAL_FLOAT
    	    {
    	        /* 1:471: LITERAL_FLOAT */
    	        mLITERAL_FLOAT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 56:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:485: ID
    	    {
    	        /* 1:485: ID */
    	        mID(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 57:
    	    // f:/dev/projects/kensho/docs/Kensho.g:1:488: LITERAL_CHAR
    	    {
    	        /* 1:488: LITERAL_CHAR */
    	        mLITERAL_CHAR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
