/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : f:/dev/projects/kensho/docs/Kensho.g
 *     -                            On : 2009-10-06 19:01:33
 *     -                for the parser : KenshoParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "KenshoParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pKenshoParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pKenshoParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pKenshoParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pKenshoParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   KenshoParserTokenNames[80+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "T_BOOL",
        (pANTLR3_UINT8) "T_BYTE",
        (pANTLR3_UINT8) "T_SHORT",
        (pANTLR3_UINT8) "T_INT",
        (pANTLR3_UINT8) "T_CHAR",
        (pANTLR3_UINT8) "T_LONG",
        (pANTLR3_UINT8) "T_FLOAT",
        (pANTLR3_UINT8) "T_DOUBLE",
        (pANTLR3_UINT8) "T_VOID",
        (pANTLR3_UINT8) "OP_ADD",
        (pANTLR3_UINT8) "OP_SUB",
        (pANTLR3_UINT8) "OP_MUL",
        (pANTLR3_UINT8) "OP_DIV",
        (pANTLR3_UINT8) "OP_NOT",
        (pANTLR3_UINT8) "OP_BIT_NOT",
        (pANTLR3_UINT8) "OP_AND",
        (pANTLR3_UINT8) "OP_OR",
        (pANTLR3_UINT8) "OP_REM",
        (pANTLR3_UINT8) "OP_BIT_AND",
        (pANTLR3_UINT8) "OP_BIT_OR",
        (pANTLR3_UINT8) "OP_XOR",
        (pANTLR3_UINT8) "OP_SHIFT_L",
        (pANTLR3_UINT8) "OP_SHIFT_R",
        (pANTLR3_UINT8) "OP_USHIFT_R",
        (pANTLR3_UINT8) "CMP_EQ",
        (pANTLR3_UINT8) "CMP_NEQ",
        (pANTLR3_UINT8) "CMP_LT",
        (pANTLR3_UINT8) "CMP_GT",
        (pANTLR3_UINT8) "CMP_LTE",
        (pANTLR3_UINT8) "CMP_GTE",
        (pANTLR3_UINT8) "OP_ASSIGN",
        (pANTLR3_UINT8) "K_IF",
        (pANTLR3_UINT8) "K_ELSE",
        (pANTLR3_UINT8) "K_WHILE",
        (pANTLR3_UINT8) "LITERAL_TRUE",
        (pANTLR3_UINT8) "LITERAL_FALSE",
        (pANTLR3_UINT8) "K_NATIVE",
        (pANTLR3_UINT8) "K_RETURN",
        (pANTLR3_UINT8) "K_NEW",
        (pANTLR3_UINT8) "K_DELETE",
        (pANTLR3_UINT8) "K_THIS",
        (pANTLR3_UINT8) "K_STRUCT",
        (pANTLR3_UINT8) "K_STATIC",
        (pANTLR3_UINT8) "BRACE_L",
        (pANTLR3_UINT8) "BRACE_R",
        (pANTLR3_UINT8) "PAREN_L",
        (pANTLR3_UINT8) "PAREN_R",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "FUNDEF",
        (pANTLR3_UINT8) "FUNSIG",
        (pANTLR3_UINT8) "ARGDEF",
        (pANTLR3_UINT8) "BINOP",
        (pANTLR3_UINT8) "LIT",
        (pANTLR3_UINT8) "UNOP",
        (pANTLR3_UINT8) "VARDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "CAST",
        (pANTLR3_UINT8) "KENNIDEF",
        (pANTLR3_UINT8) "ELSEIF",
        (pANTLR3_UINT8) "STRUCTFUN",
        (pANTLR3_UINT8) "MODS",
        (pANTLR3_UINT8) "CTOR",
        (pANTLR3_UINT8) "DTOR",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LITERAL_INT",
        (pANTLR3_UINT8) "LITERAL_OCT",
        (pANTLR3_UINT8) "LITERAL_HEX",
        (pANTLR3_UINT8) "LITERAL_FLOAT",
        (pANTLR3_UINT8) "LITERAL_CHAR",
        (pANTLR3_UINT8) "OP_USHIFT_L",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "POSDIGIT",
        (pANTLR3_UINT8) "HEXDIGIT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "ESCSEQ",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "BLOCK_COMMENT"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static KenshoParser_program_return	program    (pKenshoParser ctx);
static KenshoParser_kenniFunction_return	kenniFunction    (pKenshoParser ctx);
static KenshoParser_function_return	function    (pKenshoParser ctx);
static KenshoParser_signature_return	signature    (pKenshoParser ctx);
static KenshoParser_functionType_return	functionType    (pKenshoParser ctx);
static KenshoParser_params_return	params    (pKenshoParser ctx);
static KenshoParser_structDecl_return	structDecl    (pKenshoParser ctx);
static KenshoParser_structBodyDecl_return	structBodyDecl    (pKenshoParser ctx);
static KenshoParser_structCtor_return	structCtor    (pKenshoParser ctx);
static KenshoParser_structDtor_return	structDtor    (pKenshoParser ctx);
static KenshoParser_structFunction_return	structFunction    (pKenshoParser ctx);
static KenshoParser_structFunMods_return	structFunMods    (pKenshoParser ctx);
static KenshoParser_statement_return	statement    (pKenshoParser ctx);
static KenshoParser_returnStatement_return	returnStatement    (pKenshoParser ctx);
static KenshoParser_deleteStatement_return	deleteStatement    (pKenshoParser ctx);
static KenshoParser_block_return	block    (pKenshoParser ctx);
static KenshoParser_ifStat_return	ifStat    (pKenshoParser ctx);
static KenshoParser_elseIfStat_return	elseIfStat    (pKenshoParser ctx);
static KenshoParser_elseStat_return	elseStat    (pKenshoParser ctx);
static KenshoParser_whileStat_return	whileStat    (pKenshoParser ctx);
static KenshoParser_variable_return	variable    (pKenshoParser ctx);
static KenshoParser_args_return	args    (pKenshoParser ctx);
static KenshoParser_type_return	type    (pKenshoParser ctx);
static KenshoParser_expression_return	expression    (pKenshoParser ctx);
static KenshoParser_primary_return	primary    (pKenshoParser ctx);
static KenshoParser_castExpr_return	castExpr    (pKenshoParser ctx);
static KenshoParser_atom_return	atom    (pKenshoParser ctx);
static KenshoParser_atomOrParenExpr_return	atomOrParenExpr    (pKenshoParser ctx);
static KenshoParser_parenOrCastExpr_return	parenOrCastExpr    (pKenshoParser ctx);
static KenshoParser_parenExpr_return	parenExpr    (pKenshoParser ctx);
static KenshoParser_call_return	call    (pKenshoParser ctx);
static KenshoParser_literal_return	literal    (pKenshoParser ctx);
static KenshoParser_unop_return	unop    (pKenshoParser ctx);
static KenshoParser_binop_return	binop    (pKenshoParser ctx);
static ANTLR3_BOOLEAN	synpred1_Kensho    (pKenshoParser ctx);
static void	KenshoParserFree(pKenshoParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "f:/dev/projects/kensho/docs/Kensho.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new KenshoParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoParser
KenshoParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return KenshoParserNewSSD(instream, NULL);
}

/** \brief Create a new KenshoParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoParser
KenshoParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pKenshoParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pKenshoParser) ANTLR3_CALLOC(1, sizeof(KenshoParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in KenshoParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our KenshoParser interface
     */
    ctx->program	= program;
    ctx->kenniFunction	= kenniFunction;
    ctx->function	= function;
    ctx->signature	= signature;
    ctx->functionType	= functionType;
    ctx->params	= params;
    ctx->structDecl	= structDecl;
    ctx->structBodyDecl	= structBodyDecl;
    ctx->structCtor	= structCtor;
    ctx->structDtor	= structDtor;
    ctx->structFunction	= structFunction;
    ctx->structFunMods	= structFunMods;
    ctx->statement	= statement;
    ctx->returnStatement	= returnStatement;
    ctx->deleteStatement	= deleteStatement;
    ctx->block	= block;
    ctx->ifStat	= ifStat;
    ctx->elseIfStat	= elseIfStat;
    ctx->elseStat	= elseStat;
    ctx->whileStat	= whileStat;
    ctx->variable	= variable;
    ctx->args	= args;
    ctx->type	= type;
    ctx->expression	= expression;
    ctx->primary	= primary;
    ctx->castExpr	= castExpr;
    ctx->atom	= atom;
    ctx->atomOrParenExpr	= atomOrParenExpr;
    ctx->parenOrCastExpr	= parenOrCastExpr;
    ctx->parenExpr	= parenExpr;
    ctx->call	= call;
    ctx->literal	= literal;
    ctx->unop	= unop;
    ctx->binop	= binop;
    ctx->synpred1_Kensho	= synpred1_Kensho;
    ctx->free			= KenshoParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    	RECOGNIZER->displayRecognitionError = kenshoAntlrErrorReporter;

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = KenshoParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 KenshoParserFree(pKenshoParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return KenshoParserTokenNames; 
}


    	extern "C" void kenshoAntlrErrorReporter(pANTLR3_BASE_RECOGNIZER rec, pANTLR3_UINT8* tokens) {
    		assert(rec->state->exception->message != NULL);
    	
    		std::string err((char*)rec->state->exception->message);
    		std::string exp(antlrTokenName(rec->state->exception->expecting));
    		
    		throw(kensho::ParseError(
    			err + ", expected " + exp, 
    			rec->state->exception->line,
    			rec->state->exception->charPositionInLine
    		));
    	}

    	char* antlrTokenName(int type) {
    		return (char*)KenshoParserTokenNames[type];
    	}
    	
    	bool isRightAssociative(ANTLR3_UINT32 type) {
    		switch (type) {
    			case OP_ASSIGN:
    				return true;
    		}
    		return false;
    	}
    	
    	ANTLR3_UINT32 getOperatorPrecedence(ANTLR3_UINT32 type) {
    		switch (type) {
    			// note: lowest number binds most tightly i.e. has highest precedence
    			case OP_MUL:
    			case OP_DIV:		
    			case OP_REM:		return 1;
    			
    			case OP_SUB:		return 2;
    			case OP_ADD:		return 3;
    			
    			case OP_SHIFT_L:
    			case OP_SHIFT_R:
    			case OP_USHIFT_R:	return 4;
    			
    			case CMP_LT:
    			case CMP_LTE:
    			case CMP_GT:	
    			case CMP_GTE:		return 5;
    				
    			case CMP_EQ:
    			case CMP_NEQ:		return 6;
    			
    			case OP_BIT_AND:	return 7;
    			case OP_XOR:		return 8;
    			case OP_BIT_OR:		return 9;
    				
    			case OP_AND:		return 10;
    			case OP_OR:			return 11;
    			
    			case OP_ASSIGN:		return 12;
    		
    			default:
    				// missing switch case
    				assert(false);
    				return 0;
    		}
    	}
    	
    	int findPivot(std::vector<pANTLR3_COMMON_TOKEN> ops, int start, int stop) {
    		int pivot = start;
    		ANTLR3_UINT32 pivotRank = getOperatorPrecedence(ops.at(pivot)->getType(ops.at(pivot)));
    		for (int i = start; i <= stop; i++) {
    			ANTLR3_UINT32 type = ops.at(i)->getType(ops.at(i));
    			ANTLR3_UINT32 currentRank = getOperatorPrecedence(type);
    			bool rightAssoc = isRightAssociative(type);
    			if (currentRank > pivotRank || (currentRank == pivotRank && rightAssoc)) {
    				pivot = i;
    				pivotRank = currentRank;
    			}
    		}
    		return pivot;
    	}
    	
    	pANTLR3_BASE_TREE createPrecedenceTree(
    		pKenshoParser ctx,
    		std::vector<pANTLR3_BASE_TREE> expressions,
    		std::vector<pANTLR3_COMMON_TOKEN> operators,
    		int start, 
    		int stop) {
    		if (stop == start) {
    			return expressions.at(start);
    		}
    		assert(expressions.size() > 0);
    		assert(operators.size() > 0);
    		assert(expressions.size() == operators.size() + 1);
    		
    		int pivot = findPivot( operators, start, stop - 1 );
    		pANTLR3_COMMON_TOKEN rootTok = ADAPTOR->createToken(ADAPTOR, BINOP, (uint8_t*)"BINOP");
    		pANTLR3_BASE_TREE root = (pANTLR3_BASE_TREE)ADAPTOR->nilNode(ADAPTOR);
    		root = (pANTLR3_BASE_TREE)ADAPTOR->becomeRootToken(
    			ADAPTOR, rootTok, root);	
    		ADAPTOR->addChildToken(ADAPTOR, root, operators.at(pivot));
    		ADAPTOR->addChild(ADAPTOR, root, createPrecedenceTree(
    			ctx, expressions, operators, start, pivot));
    		ADAPTOR->addChild(ADAPTOR, root, createPrecedenceTree(
    			ctx, expressions, operators, pivot + 1, stop));
    		return root;
    	} 
    	
    	pANTLR3_BASE_TREE createPrecedenceTree(
    		pKenshoParser ctx,
    		std::vector<pANTLR3_BASE_TREE> expressions,
    		std::vector<pANTLR3_COMMON_TOKEN> operators) {
    		return createPrecedenceTree(ctx, expressions, operators, 0, expressions.size() - 1);
    	}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_program669  */
static	ANTLR3_BITWORD FOLLOW_function_in_program669_bits[]	= { ANTLR3_UINT64_LIT(0x0000210000001FF2), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_program669	= { FOLLOW_function_in_program669_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_kenniFunction_in_program673  */
static	ANTLR3_BITWORD FOLLOW_kenniFunction_in_program673_bits[]	= { ANTLR3_UINT64_LIT(0x0000210000001FF2), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_kenniFunction_in_program673	= { FOLLOW_kenniFunction_in_program673_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structDecl_in_program677  */
static	ANTLR3_BITWORD FOLLOW_structDecl_in_program677_bits[]	= { ANTLR3_UINT64_LIT(0x0000210000001FF2), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_structDecl_in_program677	= { FOLLOW_structDecl_in_program677_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_NATIVE_in_kenniFunction694  */
static	ANTLR3_BITWORD FOLLOW_K_NATIVE_in_kenniFunction694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_K_NATIVE_in_kenniFunction694	= { FOLLOW_K_NATIVE_in_kenniFunction694_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_kenniFunction696  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_kenniFunction696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_kenniFunction696	= { FOLLOW_functionType_in_kenniFunction696_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_kenniFunction698  */
static	ANTLR3_BITWORD FOLLOW_ID_in_kenniFunction698_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_kenniFunction698	= { FOLLOW_ID_in_kenniFunction698_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_kenniFunction700  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_kenniFunction700_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_kenniFunction700	= { FOLLOW_PAREN_L_in_kenniFunction700_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_kenniFunction704  */
static	ANTLR3_BITWORD FOLLOW_type_in_kenniFunction704_bits[]	= { ANTLR3_UINT64_LIT(0x000C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_kenniFunction704	= { FOLLOW_type_in_kenniFunction704_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_kenniFunction708  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_kenniFunction708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_kenniFunction708	= { FOLLOW_COMMA_in_kenniFunction708_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_kenniFunction710  */
static	ANTLR3_BITWORD FOLLOW_type_in_kenniFunction710_bits[]	= { ANTLR3_UINT64_LIT(0x000C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_kenniFunction710	= { FOLLOW_type_in_kenniFunction710_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_kenniFunction718  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_kenniFunction718_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_kenniFunction718	= { FOLLOW_PAREN_R_in_kenniFunction718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_kenniFunction720  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_kenniFunction720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_kenniFunction720	= { FOLLOW_SEMICOLON_in_kenniFunction720_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_function748  */
static	ANTLR3_BITWORD FOLLOW_signature_in_function748_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_function748	= { FOLLOW_signature_in_function748_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_L_in_function752  */
static	ANTLR3_BITWORD FOLLOW_BRACE_L_in_function752_bits[]	= { ANTLR3_UINT64_LIT(0x00030EE800067FF0), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_L_in_function752	= { FOLLOW_BRACE_L_in_function752_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_function754  */
static	ANTLR3_BITWORD FOLLOW_statement_in_function754_bits[]	= { ANTLR3_UINT64_LIT(0x00030EE800067FF0), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_function754	= { FOLLOW_statement_in_function754_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_R_in_function757  */
static	ANTLR3_BITWORD FOLLOW_BRACE_R_in_function757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_R_in_function757	= { FOLLOW_BRACE_R_in_function757_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_signature784  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_signature784_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_signature784	= { FOLLOW_functionType_in_signature784_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_signature786  */
static	ANTLR3_BITWORD FOLLOW_ID_in_signature786_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_signature786	= { FOLLOW_ID_in_signature786_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_signature790  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_signature790_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_signature790	= { FOLLOW_PAREN_L_in_signature790_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_params_in_signature792  */
static	ANTLR3_BITWORD FOLLOW_params_in_signature792_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_params_in_signature792	= { FOLLOW_params_in_signature792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_signature795  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_signature795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_signature795	= { FOLLOW_PAREN_R_in_signature795_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_VOID_in_functionType824  */
static	ANTLR3_BITWORD FOLLOW_T_VOID_in_functionType824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_VOID_in_functionType824	= { FOLLOW_T_VOID_in_functionType824_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_functionType828  */
static	ANTLR3_BITWORD FOLLOW_type_in_functionType828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_functionType828	= { FOLLOW_type_in_functionType828_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params842  */
static	ANTLR3_BITWORD FOLLOW_type_in_params842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params842	= { FOLLOW_type_in_params842_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params846  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params846_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params846	= { FOLLOW_ID_in_params846_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_params850  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_params850_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_params850	= { FOLLOW_COMMA_in_params850_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params852  */
static	ANTLR3_BITWORD FOLLOW_type_in_params852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params852	= { FOLLOW_type_in_params852_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params854  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params854_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params854	= { FOLLOW_ID_in_params854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_STRUCT_in_structDecl883  */
static	ANTLR3_BITWORD FOLLOW_K_STRUCT_in_structDecl883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_K_STRUCT_in_structDecl883	= { FOLLOW_K_STRUCT_in_structDecl883_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_structDecl885  */
static	ANTLR3_BITWORD FOLLOW_ID_in_structDecl885_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_structDecl885	= { FOLLOW_ID_in_structDecl885_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_L_in_structDecl887  */
static	ANTLR3_BITWORD FOLLOW_BRACE_L_in_structDecl887_bits[]	= { ANTLR3_UINT64_LIT(0x00014C0000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_L_in_structDecl887	= { FOLLOW_BRACE_L_in_structDecl887_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structBodyDecl_in_structDecl889  */
static	ANTLR3_BITWORD FOLLOW_structBodyDecl_in_structDecl889_bits[]	= { ANTLR3_UINT64_LIT(0x00014C0000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_structBodyDecl_in_structDecl889	= { FOLLOW_structBodyDecl_in_structDecl889_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_R_in_structDecl892  */
static	ANTLR3_BITWORD FOLLOW_BRACE_R_in_structDecl892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_R_in_structDecl892	= { FOLLOW_BRACE_R_in_structDecl892_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_structBodyDecl917  */
static	ANTLR3_BITWORD FOLLOW_variable_in_structBodyDecl917_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_structBodyDecl917	= { FOLLOW_variable_in_structBodyDecl917_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_structBodyDecl919  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_structBodyDecl919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_structBodyDecl919	= { FOLLOW_SEMICOLON_in_structBodyDecl919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structFunction_in_structBodyDecl925  */
static	ANTLR3_BITWORD FOLLOW_structFunction_in_structBodyDecl925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structFunction_in_structBodyDecl925	= { FOLLOW_structFunction_in_structBodyDecl925_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structCtor_in_structBodyDecl930  */
static	ANTLR3_BITWORD FOLLOW_structCtor_in_structBodyDecl930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structCtor_in_structBodyDecl930	= { FOLLOW_structCtor_in_structBodyDecl930_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structDtor_in_structBodyDecl935  */
static	ANTLR3_BITWORD FOLLOW_structDtor_in_structBodyDecl935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structDtor_in_structBodyDecl935	= { FOLLOW_structDtor_in_structBodyDecl935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_NEW_in_structCtor947  */
static	ANTLR3_BITWORD FOLLOW_K_NEW_in_structCtor947_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_NEW_in_structCtor947	= { FOLLOW_K_NEW_in_structCtor947_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_structCtor949  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_structCtor949_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_structCtor949	= { FOLLOW_PAREN_L_in_structCtor949_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_params_in_structCtor951  */
static	ANTLR3_BITWORD FOLLOW_params_in_structCtor951_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_params_in_structCtor951	= { FOLLOW_params_in_structCtor951_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_structCtor954  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_structCtor954_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_structCtor954	= { FOLLOW_PAREN_R_in_structCtor954_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_structCtor956  */
static	ANTLR3_BITWORD FOLLOW_block_in_structCtor956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_structCtor956	= { FOLLOW_block_in_structCtor956_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_DELETE_in_structDtor981  */
static	ANTLR3_BITWORD FOLLOW_K_DELETE_in_structDtor981_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_DELETE_in_structDtor981	= { FOLLOW_K_DELETE_in_structDtor981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_structDtor983  */
static	ANTLR3_BITWORD FOLLOW_block_in_structDtor983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_structDtor983	= { FOLLOW_block_in_structDtor983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structFunMods_in_structFunction1003  */
static	ANTLR3_BITWORD FOLLOW_structFunMods_in_structFunction1003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_structFunMods_in_structFunction1003	= { FOLLOW_structFunMods_in_structFunction1003_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_structFunction1006  */
static	ANTLR3_BITWORD FOLLOW_signature_in_structFunction1006_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_structFunction1006	= { FOLLOW_signature_in_structFunction1006_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_L_in_structFunction1010  */
static	ANTLR3_BITWORD FOLLOW_BRACE_L_in_structFunction1010_bits[]	= { ANTLR3_UINT64_LIT(0x00030EE800067FF0), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_L_in_structFunction1010	= { FOLLOW_BRACE_L_in_structFunction1010_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_structFunction1012  */
static	ANTLR3_BITWORD FOLLOW_statement_in_structFunction1012_bits[]	= { ANTLR3_UINT64_LIT(0x00030EE800067FF0), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_structFunction1012	= { FOLLOW_statement_in_structFunction1012_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_R_in_structFunction1015  */
static	ANTLR3_BITWORD FOLLOW_BRACE_R_in_structFunction1015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_R_in_structFunction1015	= { FOLLOW_BRACE_R_in_structFunction1015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_STATIC_in_structFunMods1048  */
static	ANTLR3_BITWORD FOLLOW_K_STATIC_in_structFunMods1048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_K_STATIC_in_structFunMods1048	= { FOLLOW_K_STATIC_in_structFunMods1048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_statement1059  */
static	ANTLR3_BITWORD FOLLOW_variable_in_statement1059_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_statement1059	= { FOLLOW_variable_in_statement1059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement1061  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement1061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement1061	= { FOLLOW_SEMICOLON_in_statement1061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_statement1067  */
static	ANTLR3_BITWORD FOLLOW_expression_in_statement1067_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_statement1067	= { FOLLOW_expression_in_statement1067_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement1069  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement1069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement1069	= { FOLLOW_SEMICOLON_in_statement1069_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStat_in_statement1075  */
static	ANTLR3_BITWORD FOLLOW_ifStat_in_statement1075_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStat_in_statement1075	= { FOLLOW_ifStat_in_statement1075_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStat_in_statement1080  */
static	ANTLR3_BITWORD FOLLOW_whileStat_in_statement1080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStat_in_statement1080	= { FOLLOW_whileStat_in_statement1080_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1085  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1085_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1085	= { FOLLOW_returnStatement_in_statement1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement1087  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement1087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement1087	= { FOLLOW_SEMICOLON_in_statement1087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_deleteStatement_in_statement1093  */
static	ANTLR3_BITWORD FOLLOW_deleteStatement_in_statement1093_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_deleteStatement_in_statement1093	= { FOLLOW_deleteStatement_in_statement1093_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement1095  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement1095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement1095	= { FOLLOW_SEMICOLON_in_statement1095_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_RETURN_in_returnStatement1108  */
static	ANTLR3_BITWORD FOLLOW_K_RETURN_in_returnStatement1108_bits[]	= { ANTLR3_UINT64_LIT(0x000204C000066002), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_K_RETURN_in_returnStatement1108	= { FOLLOW_K_RETURN_in_returnStatement1108_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement1110  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement1110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement1110	= { FOLLOW_expression_in_returnStatement1110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_DELETE_in_deleteStatement1134  */
static	ANTLR3_BITWORD FOLLOW_K_DELETE_in_deleteStatement1134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_K_DELETE_in_deleteStatement1134	= { FOLLOW_K_DELETE_in_deleteStatement1134_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_deleteStatement1137  */
static	ANTLR3_BITWORD FOLLOW_ID_in_deleteStatement1137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_deleteStatement1137	= { FOLLOW_ID_in_deleteStatement1137_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_L_in_block1149  */
static	ANTLR3_BITWORD FOLLOW_BRACE_L_in_block1149_bits[]	= { ANTLR3_UINT64_LIT(0x00030EE800067FF0), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_L_in_block1149	= { FOLLOW_BRACE_L_in_block1149_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_block1152  */
static	ANTLR3_BITWORD FOLLOW_statement_in_block1152_bits[]	= { ANTLR3_UINT64_LIT(0x00030EE800067FF0), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_block1152	= { FOLLOW_statement_in_block1152_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_R_in_block1155  */
static	ANTLR3_BITWORD FOLLOW_BRACE_R_in_block1155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_R_in_block1155	= { FOLLOW_BRACE_R_in_block1155_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_IF_in_ifStat1169  */
static	ANTLR3_BITWORD FOLLOW_K_IF_in_ifStat1169_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_IF_in_ifStat1169	= { FOLLOW_K_IF_in_ifStat1169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_ifStat1171  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_ifStat1171_bits[]	= { ANTLR3_UINT64_LIT(0x000204C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_ifStat1171	= { FOLLOW_PAREN_L_in_ifStat1171_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStat1173  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStat1173_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStat1173	= { FOLLOW_expression_in_ifStat1173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_ifStat1175  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_ifStat1175_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_ifStat1175	= { FOLLOW_PAREN_R_in_ifStat1175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_ifStat1177  */
static	ANTLR3_BITWORD FOLLOW_block_in_ifStat1177_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_ifStat1177	= { FOLLOW_block_in_ifStat1177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseIfStat_in_ifStat1182  */
static	ANTLR3_BITWORD FOLLOW_elseIfStat_in_ifStat1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_elseIfStat_in_ifStat1182	= { FOLLOW_elseIfStat_in_ifStat1182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseStat_in_ifStat1187  */
static	ANTLR3_BITWORD FOLLOW_elseStat_in_ifStat1187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_elseStat_in_ifStat1187	= { FOLLOW_elseStat_in_ifStat1187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_ELSE_in_elseIfStat1237  */
static	ANTLR3_BITWORD FOLLOW_K_ELSE_in_elseIfStat1237_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_ELSE_in_elseIfStat1237	= { FOLLOW_K_ELSE_in_elseIfStat1237_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_IF_in_elseIfStat1240  */
static	ANTLR3_BITWORD FOLLOW_K_IF_in_elseIfStat1240_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_IF_in_elseIfStat1240	= { FOLLOW_K_IF_in_elseIfStat1240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_elseIfStat1243  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_elseIfStat1243_bits[]	= { ANTLR3_UINT64_LIT(0x000204C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_elseIfStat1243	= { FOLLOW_PAREN_L_in_elseIfStat1243_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_elseIfStat1246  */
static	ANTLR3_BITWORD FOLLOW_expression_in_elseIfStat1246_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_elseIfStat1246	= { FOLLOW_expression_in_elseIfStat1246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_elseIfStat1248  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_elseIfStat1248_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_elseIfStat1248	= { FOLLOW_PAREN_R_in_elseIfStat1248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_elseIfStat1251  */
static	ANTLR3_BITWORD FOLLOW_block_in_elseIfStat1251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_elseIfStat1251	= { FOLLOW_block_in_elseIfStat1251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_ELSE_in_elseStat1262  */
static	ANTLR3_BITWORD FOLLOW_K_ELSE_in_elseStat1262_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_ELSE_in_elseStat1262	= { FOLLOW_K_ELSE_in_elseStat1262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_elseStat1265  */
static	ANTLR3_BITWORD FOLLOW_block_in_elseStat1265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_elseStat1265	= { FOLLOW_block_in_elseStat1265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_WHILE_in_whileStat1276  */
static	ANTLR3_BITWORD FOLLOW_K_WHILE_in_whileStat1276_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_WHILE_in_whileStat1276	= { FOLLOW_K_WHILE_in_whileStat1276_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_whileStat1279  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_whileStat1279_bits[]	= { ANTLR3_UINT64_LIT(0x000204C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_whileStat1279	= { FOLLOW_PAREN_L_in_whileStat1279_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStat1282  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStat1282_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStat1282	= { FOLLOW_expression_in_whileStat1282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_whileStat1284  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_whileStat1284_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_whileStat1284	= { FOLLOW_PAREN_R_in_whileStat1284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_whileStat1287  */
static	ANTLR3_BITWORD FOLLOW_block_in_whileStat1287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_whileStat1287	= { FOLLOW_block_in_whileStat1287_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variable1300  */
static	ANTLR3_BITWORD FOLLOW_type_in_variable1300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variable1300	= { FOLLOW_type_in_variable1300_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable1304  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable1304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable1304	= { FOLLOW_ID_in_variable1304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_ASSIGN_in_variable1308  */
static	ANTLR3_BITWORD FOLLOW_OP_ASSIGN_in_variable1308_bits[]	= { ANTLR3_UINT64_LIT(0x000204C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_ASSIGN_in_variable1308	= { FOLLOW_OP_ASSIGN_in_variable1308_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_variable1310  */
static	ANTLR3_BITWORD FOLLOW_expression_in_variable1310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_variable1310	= { FOLLOW_expression_in_variable1310_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_args1354  */
static	ANTLR3_BITWORD FOLLOW_expression_in_args1354_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_args1354	= { FOLLOW_expression_in_args1354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_args1358  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_args1358_bits[]	= { ANTLR3_UINT64_LIT(0x000204C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_args1358	= { FOLLOW_COMMA_in_args1358_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_args1361  */
static	ANTLR3_BITWORD FOLLOW_expression_in_args1361_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_args1361	= { FOLLOW_expression_in_args1361_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type0	= { FOLLOW_set_in_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_expression1433  */
static	ANTLR3_BITWORD FOLLOW_primary_in_expression1433_bits[]	= { ANTLR3_UINT64_LIT(0x00000007FFF9E002), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_expression1433	= { FOLLOW_primary_in_expression1433_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binop_in_expression1446  */
static	ANTLR3_BITWORD FOLLOW_binop_in_expression1446_bits[]	= { ANTLR3_UINT64_LIT(0x000204C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_binop_in_expression1446	= { FOLLOW_binop_in_expression1446_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_expression1450  */
static	ANTLR3_BITWORD FOLLOW_primary_in_expression1450_bits[]	= { ANTLR3_UINT64_LIT(0x00000007FFF9E002), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_expression1450	= { FOLLOW_primary_in_expression1450_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_primary1483  */
static	ANTLR3_BITWORD FOLLOW_atom_in_primary1483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_primary1483	= { FOLLOW_atom_in_primary1483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parenOrCastExpr_in_primary1488  */
static	ANTLR3_BITWORD FOLLOW_parenOrCastExpr_in_primary1488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_parenOrCastExpr_in_primary1488	= { FOLLOW_parenOrCastExpr_in_primary1488_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_NEW_in_primary1493  */
static	ANTLR3_BITWORD FOLLOW_K_NEW_in_primary1493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_K_NEW_in_primary1493	= { FOLLOW_K_NEW_in_primary1493_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_primary1495  */
static	ANTLR3_BITWORD FOLLOW_ID_in_primary1495_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_primary1495	= { FOLLOW_ID_in_primary1495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_primary1497  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_primary1497_bits[]	= { ANTLR3_UINT64_LIT(0x000604C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_primary1497	= { FOLLOW_PAREN_L_in_primary1497_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_args_in_primary1499  */
static	ANTLR3_BITWORD FOLLOW_args_in_primary1499_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_args_in_primary1499	= { FOLLOW_args_in_primary1499_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_primary1502  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_primary1502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_primary1502	= { FOLLOW_PAREN_R_in_primary1502_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_castExpr1525  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_castExpr1525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_castExpr1525	= { FOLLOW_PAREN_L_in_castExpr1525_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_castExpr1527  */
static	ANTLR3_BITWORD FOLLOW_type_in_castExpr1527_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_castExpr1527	= { FOLLOW_type_in_castExpr1527_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_castExpr1529  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_castExpr1529_bits[]	= { ANTLR3_UINT64_LIT(0x000000C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_castExpr1529	= { FOLLOW_PAREN_R_in_castExpr1529_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_castExpr1531  */
static	ANTLR3_BITWORD FOLLOW_atom_in_castExpr1531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_castExpr1531	= { FOLLOW_atom_in_castExpr1531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_atom1554  */
static	ANTLR3_BITWORD FOLLOW_literal_in_atom1554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_atom1554	= { FOLLOW_literal_in_atom1554_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_call_in_atom1567  */
static	ANTLR3_BITWORD FOLLOW_call_in_atom1567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_call_in_atom1567	= { FOLLOW_call_in_atom1567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_atom1572  */
static	ANTLR3_BITWORD FOLLOW_ID_in_atom1572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_atom1572	= { FOLLOW_ID_in_atom1572_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unop_in_atom1577  */
static	ANTLR3_BITWORD FOLLOW_unop_in_atom1577_bits[]	= { ANTLR3_UINT64_LIT(0x000200C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_unop_in_atom1577	= { FOLLOW_unop_in_atom1577_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atomOrParenExpr_in_atom1579  */
static	ANTLR3_BITWORD FOLLOW_atomOrParenExpr_in_atom1579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atomOrParenExpr_in_atom1579	= { FOLLOW_atomOrParenExpr_in_atom1579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_atomOrParenExpr1601  */
static	ANTLR3_BITWORD FOLLOW_atom_in_atomOrParenExpr1601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_atomOrParenExpr1601	= { FOLLOW_atom_in_atomOrParenExpr1601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parenExpr_in_atomOrParenExpr1605  */
static	ANTLR3_BITWORD FOLLOW_parenExpr_in_atomOrParenExpr1605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_parenExpr_in_atomOrParenExpr1605	= { FOLLOW_parenExpr_in_atomOrParenExpr1605_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_castExpr_in_parenOrCastExpr1632  */
static	ANTLR3_BITWORD FOLLOW_castExpr_in_parenOrCastExpr1632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_castExpr_in_parenOrCastExpr1632	= { FOLLOW_castExpr_in_parenOrCastExpr1632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parenExpr_in_parenOrCastExpr1637  */
static	ANTLR3_BITWORD FOLLOW_parenExpr_in_parenOrCastExpr1637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_parenExpr_in_parenOrCastExpr1637	= { FOLLOW_parenExpr_in_parenOrCastExpr1637_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_parenExpr1649  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_parenExpr1649_bits[]	= { ANTLR3_UINT64_LIT(0x000204C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_parenExpr1649	= { FOLLOW_PAREN_L_in_parenExpr1649_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_parenExpr1652  */
static	ANTLR3_BITWORD FOLLOW_expression_in_parenExpr1652_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_parenExpr1652	= { FOLLOW_expression_in_parenExpr1652_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_parenExpr1654  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_parenExpr1654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_parenExpr1654	= { FOLLOW_PAREN_R_in_parenExpr1654_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_call1667  */
static	ANTLR3_BITWORD FOLLOW_ID_in_call1667_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_call1667	= { FOLLOW_ID_in_call1667_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_call1669  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_call1669_bits[]	= { ANTLR3_UINT64_LIT(0x000604C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_call1669	= { FOLLOW_PAREN_L_in_call1669_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_args_in_call1671  */
static	ANTLR3_BITWORD FOLLOW_args_in_call1671_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_args_in_call1671	= { FOLLOW_args_in_call1671_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_call1674  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_call1674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_call1674	= { FOLLOW_PAREN_R_in_call1674_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unop0	= { FOLLOW_set_in_unop0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_binop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_binop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_binop0	= { FOLLOW_set_in_binop0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_synpred1_Kensho1620  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_synpred1_Kensho1620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_synpred1_Kensho1620	= { FOLLOW_PAREN_L_in_synpred1_Kensho1620_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_synpred1_Kensho1622  */
static	ANTLR3_BITWORD FOLLOW_type_in_synpred1_Kensho1622_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_synpred1_Kensho1622	= { FOLLOW_type_in_synpred1_Kensho1622_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_synpred1_Kensho1624  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_synpred1_Kensho1624_bits[]	= { ANTLR3_UINT64_LIT(0x000000C000066000), ANTLR3_UINT64_LIT(0x00000000000003F0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_synpred1_Kensho1624	= { FOLLOW_PAREN_R_in_synpred1_Kensho1624_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_synpred1_Kensho1626  */
static	ANTLR3_BITWORD FOLLOW_atom_in_synpred1_Kensho1626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_synpred1_Kensho1626	= { FOLLOW_atom_in_synpred1_Kensho1626_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * f:/dev/projects/kensho/docs/Kensho.g:240:1: program : ( function | kenniFunction | structDecl )* ;
 */
static KenshoParser_program_return
program(pKenshoParser ctx)
{   
    KenshoParser_program_return retval;

    pANTLR3_BASE_TREE root_0;

    KenshoParser_function_return function1;
    #undef	RETURN_TYPE_function1
    #define	RETURN_TYPE_function1 KenshoParser_function_return

    KenshoParser_kenniFunction_return kenniFunction2;
    #undef	RETURN_TYPE_kenniFunction2
    #define	RETURN_TYPE_kenniFunction2 KenshoParser_kenniFunction_return

    KenshoParser_structDecl_return structDecl3;
    #undef	RETURN_TYPE_structDecl3
    #define	RETURN_TYPE_structDecl3 KenshoParser_structDecl_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    function1.tree = NULL;

    kenniFunction2.tree = NULL;

    structDecl3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:241:2: ( ( function | kenniFunction | structDecl )* )
        // f:/dev/projects/kensho/docs/Kensho.g:241:4: ( function | kenniFunction | structDecl )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // f:/dev/projects/kensho/docs/Kensho.g:241:4: ( function | kenniFunction | structDecl )*

            for (;;)
            {
                int alt1=4;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case T_VOID:
                case ID:
                	{
                		alt1=1;
                	}
                    break;
                case K_NATIVE:
                	{
                		alt1=2;
                	}
                    break;
                case K_STRUCT:
                	{
                		alt1=3;
                	}
                    break;

                }

                switch (alt1) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:241:6: function
            	    {
            	        FOLLOWPUSH(FOLLOW_function_in_program669);
            	        function1=function(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, function1.tree);

            	    }
            	    break;
            	case 2:
            	    // f:/dev/projects/kensho/docs/Kensho.g:241:17: kenniFunction
            	    {
            	        FOLLOWPUSH(FOLLOW_kenniFunction_in_program673);
            	        kenniFunction2=kenniFunction(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, kenniFunction2.tree);

            	    }
            	    break;
            	case 3:
            	    // f:/dev/projects/kensho/docs/Kensho.g:241:33: structDecl
            	    {
            	        FOLLOWPUSH(FOLLOW_structDecl_in_program677);
            	        structDecl3=structDecl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, structDecl3.tree);

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start kenniFunction
 * f:/dev/projects/kensho/docs/Kensho.g:244:1: kenniFunction : t= K_NATIVE functionType ID PAREN_L ( type ( COMMA type )* )? PAREN_R SEMICOLON -> ^( KENNIDEF[$t] functionType ID ( type )* ) ;
 */
static KenshoParser_kenniFunction_return
kenniFunction(pKenshoParser ctx)
{   
    KenshoParser_kenniFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    ID5;
    pANTLR3_COMMON_TOKEN    PAREN_L6;
    pANTLR3_COMMON_TOKEN    COMMA8;
    pANTLR3_COMMON_TOKEN    PAREN_R10;
    pANTLR3_COMMON_TOKEN    SEMICOLON11;
    KenshoParser_functionType_return functionType4;
    #undef	RETURN_TYPE_functionType4
    #define	RETURN_TYPE_functionType4 KenshoParser_functionType_return

    KenshoParser_type_return type7;
    #undef	RETURN_TYPE_type7
    #define	RETURN_TYPE_type7 KenshoParser_type_return

    KenshoParser_type_return type9;
    #undef	RETURN_TYPE_type9
    #define	RETURN_TYPE_type9 KenshoParser_type_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE ID5_tree;
    pANTLR3_BASE_TREE PAREN_L6_tree;
    pANTLR3_BASE_TREE COMMA8_tree;
    pANTLR3_BASE_TREE PAREN_R10_tree;
    pANTLR3_BASE_TREE SEMICOLON11_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_NATIVE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    ID5       = NULL;
    PAREN_L6       = NULL;
    COMMA8       = NULL;
    PAREN_R10       = NULL;
    SEMICOLON11       = NULL;
    functionType4.tree = NULL;

    type7.tree = NULL;

    type9.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    ID5_tree   = NULL;
    PAREN_L6_tree   = NULL;
    COMMA8_tree   = NULL;
    PAREN_R10_tree   = NULL;
    SEMICOLON11_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_K_NATIVE   = NULL;
    #define CREATE_stream_K_NATIVE  if (stream_K_NATIVE == NULL) {stream_K_NATIVE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_NATIVE"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_functionType   = NULL;
    #define CREATE_stream_functionType  if (stream_functionType == NULL) {stream_functionType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionType"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:245:2: (t= K_NATIVE functionType ID PAREN_L ( type ( COMMA type )* )? PAREN_R SEMICOLON -> ^( KENNIDEF[$t] functionType ID ( type )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:245:4: t= K_NATIVE functionType ID PAREN_L ( type ( COMMA type )* )? PAREN_R SEMICOLON
        {
            t = (pANTLR3_COMMON_TOKEN) MATCHT(K_NATIVE, &FOLLOW_K_NATIVE_in_kenniFunction694); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_K_NATIVE; stream_K_NATIVE->add(stream_K_NATIVE, t, NULL); }

            FOLLOWPUSH(FOLLOW_functionType_in_kenniFunction696);
            functionType4=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionType; stream_functionType->add(stream_functionType, functionType4.tree, NULL); }
            ID5 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_kenniFunction698); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID5, NULL); }

            PAREN_L6 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_kenniFunction700); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L6, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:245:39: ( type ( COMMA type )* )?
            {
                int alt3=2;
                switch ( LA(1) ) 
                {
                    case T_BOOL:
                    case T_BYTE:
                    case T_SHORT:
                    case T_INT:
                    case T_CHAR:
                    case T_LONG:
                    case T_FLOAT:
                    case T_DOUBLE:
                    case ID:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:245:41: type ( COMMA type )*
            	    {
            	        FOLLOWPUSH(FOLLOW_type_in_kenniFunction704);
            	        type7=type(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulekenniFunctionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type; stream_type->add(stream_type, type7.tree, NULL); }

            	        // f:/dev/projects/kensho/docs/Kensho.g:245:46: ( COMMA type )*

            	        for (;;)
            	        {
            	            int alt2=2;
            	            switch ( LA(1) ) 
            	            {
            	            case COMMA:
            	            	{
            	            		alt2=1;
            	            	}
            	                break;

            	            }

            	            switch (alt2) 
            	            {
            	        	case 1:
            	        	    // f:/dev/projects/kensho/docs/Kensho.g:245:48: COMMA type
            	        	    {
            	        	        COMMA8 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_kenniFunction708); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulekenniFunctionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA8, NULL); }

            	        	        FOLLOWPUSH(FOLLOW_type_in_kenniFunction710);
            	        	        type9=type(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulekenniFunctionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_type; stream_type->add(stream_type, type9.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop2;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop2: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }
            PAREN_R10 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_kenniFunction718); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R10, NULL); }

            SEMICOLON11 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_kenniFunction720); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON11, NULL); }


             
            /* AST REWRITE
             * elements          : type, functionType, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 246:2: -> ^( KENNIDEF[$t] functionType ID ( type )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:246:5: ^( KENNIDEF[$t] functionType ID ( type )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, KENNIDEF, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, KENNIDEF, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionType == NULL ? NULL : stream_functionType->nextTree(stream_functionType));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:246:36: ( type )*
            	        {
            	        	while ( (stream_type != NULL && stream_type->hasNext(stream_type))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));

            	        	}
            	        	if (stream_type != NULL) stream_type->reset(stream_type);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulekenniFunctionEx; /* Prevent compiler warnings */
    rulekenniFunctionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_K_NATIVE != NULL) stream_K_NATIVE->free(stream_K_NATIVE);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_functionType != NULL) stream_functionType->free(stream_functionType);
        if (stream_type != NULL) stream_type->free(stream_type);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end kenniFunction */

/** 
 * $ANTLR start function
 * f:/dev/projects/kensho/docs/Kensho.g:249:1: function : signature t= BRACE_L ( statement )* BRACE_R -> ^( FUNDEF[$t] signature ( statement )* ) ;
 */
static KenshoParser_function_return
function(pKenshoParser ctx)
{   
    KenshoParser_function_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    BRACE_R14;
    KenshoParser_signature_return signature12;
    #undef	RETURN_TYPE_signature12
    #define	RETURN_TYPE_signature12 KenshoParser_signature_return

    KenshoParser_statement_return statement13;
    #undef	RETURN_TYPE_statement13
    #define	RETURN_TYPE_statement13 KenshoParser_statement_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE BRACE_R14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_signature;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    BRACE_R14       = NULL;
    signature12.tree = NULL;

    statement13.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    BRACE_R14_tree   = NULL;

    stream_BRACE_L   = NULL;
    #define CREATE_stream_BRACE_L  if (stream_BRACE_L == NULL) {stream_BRACE_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_L"); } 
    stream_BRACE_R   = NULL;
    #define CREATE_stream_BRACE_R  if (stream_BRACE_R == NULL) {stream_BRACE_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_R"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_signature   = NULL;
    #define CREATE_stream_signature  if (stream_signature == NULL) {stream_signature = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule signature"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:250:2: ( signature t= BRACE_L ( statement )* BRACE_R -> ^( FUNDEF[$t] signature ( statement )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:250:4: signature t= BRACE_L ( statement )* BRACE_R
        {
            FOLLOWPUSH(FOLLOW_signature_in_function748);
            signature12=signature(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_signature; stream_signature->add(stream_signature, signature12.tree, NULL); }
            t = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_L, &FOLLOW_BRACE_L_in_function752); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_BRACE_L; stream_BRACE_L->add(stream_BRACE_L, t, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:250:24: ( statement )*

            for (;;)
            {
                int alt4=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case OP_ADD:
                case OP_SUB:
                case OP_NOT:
                case OP_BIT_NOT:
                case K_IF:
                case K_WHILE:
                case LITERAL_TRUE:
                case LITERAL_FALSE:
                case K_RETURN:
                case K_NEW:
                case K_DELETE:
                case PAREN_L:
                case ID:
                case LITERAL_INT:
                case LITERAL_OCT:
                case LITERAL_HEX:
                case LITERAL_FLOAT:
                case LITERAL_CHAR:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:250:24: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_function754);
            	        statement13=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement13.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */

            BRACE_R14 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_R, &FOLLOW_BRACE_R_in_function757); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_BRACE_R; stream_BRACE_R->add(stream_BRACE_R, BRACE_R14, NULL); }


             
            /* AST REWRITE
             * elements          : statement, signature
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 251:3: -> ^( FUNDEF[$t] signature ( statement )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:251:6: ^( FUNDEF[$t] signature ( statement )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FUNDEF, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNDEF, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_signature == NULL ? NULL : stream_signature->nextTree(stream_signature));
            	        // f:/dev/projects/kensho/docs/Kensho.g:251:29: ( statement )*
            	        {
            	        	while ( (stream_statement != NULL && stream_statement->hasNext(stream_statement))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	if (stream_statement != NULL) stream_statement->reset(stream_statement);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BRACE_L != NULL) stream_BRACE_L->free(stream_BRACE_L);
        if (stream_BRACE_R != NULL) stream_BRACE_R->free(stream_BRACE_R);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_signature != NULL) stream_signature->free(stream_signature);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end function */

/** 
 * $ANTLR start signature
 * f:/dev/projects/kensho/docs/Kensho.g:254:1: signature : functionType ID t= PAREN_L ( params )? PAREN_R -> ^( FUNSIG[$t] functionType ID ( params )? ) ;
 */
static KenshoParser_signature_return
signature(pKenshoParser ctx)
{   
    KenshoParser_signature_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    ID16;
    pANTLR3_COMMON_TOKEN    PAREN_R18;
    KenshoParser_functionType_return functionType15;
    #undef	RETURN_TYPE_functionType15
    #define	RETURN_TYPE_functionType15 KenshoParser_functionType_return

    KenshoParser_params_return params17;
    #undef	RETURN_TYPE_params17
    #define	RETURN_TYPE_params17 KenshoParser_params_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE ID16_tree;
    pANTLR3_BASE_TREE PAREN_R18_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_params;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    ID16       = NULL;
    PAREN_R18       = NULL;
    functionType15.tree = NULL;

    params17.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    ID16_tree   = NULL;
    PAREN_R18_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_functionType   = NULL;
    #define CREATE_stream_functionType  if (stream_functionType == NULL) {stream_functionType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionType"); }
    stream_params   = NULL;
    #define CREATE_stream_params  if (stream_params == NULL) {stream_params = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule params"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:255:2: ( functionType ID t= PAREN_L ( params )? PAREN_R -> ^( FUNSIG[$t] functionType ID ( params )? ) )
        // f:/dev/projects/kensho/docs/Kensho.g:255:4: functionType ID t= PAREN_L ( params )? PAREN_R
        {
            FOLLOWPUSH(FOLLOW_functionType_in_signature784);
            functionType15=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionType; stream_functionType->add(stream_functionType, functionType15.tree, NULL); }
            ID16 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_signature786); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID16, NULL); }

            t = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_signature790); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, t, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:255:30: ( params )?
            {
                int alt5=2;
                switch ( LA(1) ) 
                {
                    case T_BOOL:
                    case T_BYTE:
                    case T_SHORT:
                    case T_INT:
                    case T_CHAR:
                    case T_LONG:
                    case T_FLOAT:
                    case T_DOUBLE:
                    case ID:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:255:30: params
            	    {
            	        FOLLOWPUSH(FOLLOW_params_in_signature792);
            	        params17=params(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignatureEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_params; stream_params->add(stream_params, params17.tree, NULL); }

            	    }
            	    break;

                }
            }
            PAREN_R18 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_signature795); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R18, NULL); }


             
            /* AST REWRITE
             * elements          : functionType, ID, params
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 256:3: -> ^( FUNSIG[$t] functionType ID ( params )? )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:256:6: ^( FUNSIG[$t] functionType ID ( params )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FUNSIG, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNSIG, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionType == NULL ? NULL : stream_functionType->nextTree(stream_functionType));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:256:35: ( params )?
            	        {
            	        	if ( (stream_params != NULL && stream_params->hasNext(stream_params))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_params == NULL ? NULL : stream_params->nextTree(stream_params));

            	        	}
            	        	if ( stream_params != NULL) stream_params->reset(stream_params);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureEx; /* Prevent compiler warnings */
    rulesignatureEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_functionType != NULL) stream_functionType->free(stream_functionType);
        if (stream_params != NULL) stream_params->free(stream_params);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end signature */

/** 
 * $ANTLR start functionType
 * f:/dev/projects/kensho/docs/Kensho.g:259:1: functionType : ( T_VOID | type );
 */
static KenshoParser_functionType_return
functionType(pKenshoParser ctx)
{   
    KenshoParser_functionType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    T_VOID19;
    KenshoParser_type_return type20;
    #undef	RETURN_TYPE_type20
    #define	RETURN_TYPE_type20 KenshoParser_type_return

    pANTLR3_BASE_TREE T_VOID19_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    T_VOID19       = NULL;
    type20.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    T_VOID19_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:260:2: ( T_VOID | type )
            
            ANTLR3_UINT32 alt6;

            alt6=2;

            switch ( LA(1) ) 
            {
            case T_VOID:
            	{
            		alt6=1;
            	}
                break;
            case T_BOOL:
            case T_BYTE:
            case T_SHORT:
            case T_INT:
            case T_CHAR:
            case T_LONG:
            case T_FLOAT:
            case T_DOUBLE:
            case ID:
            	{
            		alt6=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto rulefunctionTypeEx;
            }

            switch (alt6) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:260:4: T_VOID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        T_VOID19 = (pANTLR3_COMMON_TOKEN) MATCHT(T_VOID, &FOLLOW_T_VOID_in_functionType824); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        T_VOID19_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, T_VOID19));
        	        ADAPTOR->addChild(ADAPTOR, root_0, T_VOID19_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:260:13: type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_type_in_functionType828);
        	        type20=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type20.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionTypeEx; /* Prevent compiler warnings */
    rulefunctionTypeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end functionType */

/** 
 * $ANTLR start params
 * f:/dev/projects/kensho/docs/Kensho.g:263:1: params : type t= ID ( COMMA type ID )* -> ( ^( ARGDEF[$t] type ID ) )+ ;
 */
static KenshoParser_params_return
params(pKenshoParser ctx)
{   
    KenshoParser_params_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    COMMA22;
    pANTLR3_COMMON_TOKEN    ID24;
    KenshoParser_type_return type21;
    #undef	RETURN_TYPE_type21
    #define	RETURN_TYPE_type21 KenshoParser_type_return

    KenshoParser_type_return type23;
    #undef	RETURN_TYPE_type23
    #define	RETURN_TYPE_type23 KenshoParser_type_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE COMMA22_tree;
    pANTLR3_BASE_TREE ID24_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    COMMA22       = NULL;
    ID24       = NULL;
    type21.tree = NULL;

    type23.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    COMMA22_tree   = NULL;
    ID24_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:264:2: ( type t= ID ( COMMA type ID )* -> ( ^( ARGDEF[$t] type ID ) )+ )
        // f:/dev/projects/kensho/docs/Kensho.g:264:4: type t= ID ( COMMA type ID )*
        {
            FOLLOWPUSH(FOLLOW_type_in_params842);
            type21=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type; stream_type->add(stream_type, type21.tree, NULL); }
            t = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_params846); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, t, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:264:14: ( COMMA type ID )*

            for (;;)
            {
                int alt7=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:264:16: COMMA type ID
            	    {
            	        COMMA22 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_params850); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparamsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA22, NULL); }

            	        FOLLOWPUSH(FOLLOW_type_in_params852);
            	        type23=type(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparamsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type; stream_type->add(stream_type, type23.tree, NULL); }
            	        ID24 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_params854); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparamsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID24, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : ID, type
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 265:3: -> ( ^( ARGDEF[$t] type ID ) )+
            	{
            	    if ((stream_ID == NULL || !stream_ID->hasNext(stream_ID)) || (stream_type == NULL || !stream_type->hasNext(stream_type))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_ID->hasNext(stream_ID)) || (stream_type->hasNext(stream_type))  ) {
            	    		// f:/dev/projects/kensho/docs/Kensho.g:265:6: ^( ARGDEF[$t] type ID )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	    		    #if 1 == 2
            	    		    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ARGDEF, TOKTEXT(t))
            	    		    #else
            	    		    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGDEF, (pANTLR3_UINT8)t)
            	    		    #endif
            	    		    , root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	stream_ID->reset(stream_ID);
            	    	stream_type->reset(stream_type);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparamsEx; /* Prevent compiler warnings */
    ruleparamsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_type != NULL) stream_type->free(stream_type);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end params */

/** 
 * $ANTLR start structDecl
 * f:/dev/projects/kensho/docs/Kensho.g:268:1: structDecl : K_STRUCT ID BRACE_L ( structBodyDecl )* BRACE_R -> ^( K_STRUCT ID ( structBodyDecl )* ) ;
 */
static KenshoParser_structDecl_return
structDecl(pKenshoParser ctx)
{   
    KenshoParser_structDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_STRUCT25;
    pANTLR3_COMMON_TOKEN    ID26;
    pANTLR3_COMMON_TOKEN    BRACE_L27;
    pANTLR3_COMMON_TOKEN    BRACE_R29;
    KenshoParser_structBodyDecl_return structBodyDecl28;
    #undef	RETURN_TYPE_structBodyDecl28
    #define	RETURN_TYPE_structBodyDecl28 KenshoParser_structBodyDecl_return

    pANTLR3_BASE_TREE K_STRUCT25_tree;
    pANTLR3_BASE_TREE ID26_tree;
    pANTLR3_BASE_TREE BRACE_L27_tree;
    pANTLR3_BASE_TREE BRACE_R29_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_STRUCT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_R;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_structBodyDecl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    K_STRUCT25       = NULL;
    ID26       = NULL;
    BRACE_L27       = NULL;
    BRACE_R29       = NULL;
    structBodyDecl28.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_STRUCT25_tree   = NULL;
    ID26_tree   = NULL;
    BRACE_L27_tree   = NULL;
    BRACE_R29_tree   = NULL;

    stream_K_STRUCT   = NULL;
    #define CREATE_stream_K_STRUCT  if (stream_K_STRUCT == NULL) {stream_K_STRUCT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_STRUCT"); } 
    stream_BRACE_L   = NULL;
    #define CREATE_stream_BRACE_L  if (stream_BRACE_L == NULL) {stream_BRACE_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_L"); } 
    stream_BRACE_R   = NULL;
    #define CREATE_stream_BRACE_R  if (stream_BRACE_R == NULL) {stream_BRACE_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_R"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_structBodyDecl   = NULL;
    #define CREATE_stream_structBodyDecl  if (stream_structBodyDecl == NULL) {stream_structBodyDecl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule structBodyDecl"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:269:2: ( K_STRUCT ID BRACE_L ( structBodyDecl )* BRACE_R -> ^( K_STRUCT ID ( structBodyDecl )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:269:4: K_STRUCT ID BRACE_L ( structBodyDecl )* BRACE_R
        {
            K_STRUCT25 = (pANTLR3_COMMON_TOKEN) MATCHT(K_STRUCT, &FOLLOW_K_STRUCT_in_structDecl883); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_K_STRUCT; stream_K_STRUCT->add(stream_K_STRUCT, K_STRUCT25, NULL); }

            ID26 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_structDecl885); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID26, NULL); }

            BRACE_L27 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_L, &FOLLOW_BRACE_L_in_structDecl887); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_BRACE_L; stream_BRACE_L->add(stream_BRACE_L, BRACE_L27, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:269:24: ( structBodyDecl )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case T_VOID:
                case K_NEW:
                case K_DELETE:
                case K_STATIC:
                case ID:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:269:24: structBodyDecl
            	    {
            	        FOLLOWPUSH(FOLLOW_structBodyDecl_in_structDecl889);
            	        structBodyDecl28=structBodyDecl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructDeclEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_structBodyDecl; stream_structBodyDecl->add(stream_structBodyDecl, structBodyDecl28.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */

            BRACE_R29 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_R, &FOLLOW_BRACE_R_in_structDecl892); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_BRACE_R; stream_BRACE_R->add(stream_BRACE_R, BRACE_R29, NULL); }


             
            /* AST REWRITE
             * elements          : ID, structBodyDecl, K_STRUCT
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 270:3: -> ^( K_STRUCT ID ( structBodyDecl )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:270:6: ^( K_STRUCT ID ( structBodyDecl )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_K_STRUCT == NULL ? NULL : stream_K_STRUCT->nextNode(stream_K_STRUCT), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:270:20: ( structBodyDecl )*
            	        {
            	        	while ( (stream_structBodyDecl != NULL && stream_structBodyDecl->hasNext(stream_structBodyDecl))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_structBodyDecl == NULL ? NULL : stream_structBodyDecl->nextTree(stream_structBodyDecl));

            	        	}
            	        	if (stream_structBodyDecl != NULL) stream_structBodyDecl->reset(stream_structBodyDecl);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructDeclEx; /* Prevent compiler warnings */
    rulestructDeclEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_K_STRUCT != NULL) stream_K_STRUCT->free(stream_K_STRUCT);
        if (stream_BRACE_L != NULL) stream_BRACE_L->free(stream_BRACE_L);
        if (stream_BRACE_R != NULL) stream_BRACE_R->free(stream_BRACE_R);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_structBodyDecl != NULL) stream_structBodyDecl->free(stream_structBodyDecl);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structDecl */

/** 
 * $ANTLR start structBodyDecl
 * f:/dev/projects/kensho/docs/Kensho.g:273:1: structBodyDecl : ( variable SEMICOLON | structFunction | structCtor | structDtor );
 */
static KenshoParser_structBodyDecl_return
structBodyDecl(pKenshoParser ctx)
{   
    KenshoParser_structBodyDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SEMICOLON31;
    KenshoParser_variable_return variable30;
    #undef	RETURN_TYPE_variable30
    #define	RETURN_TYPE_variable30 KenshoParser_variable_return

    KenshoParser_structFunction_return structFunction32;
    #undef	RETURN_TYPE_structFunction32
    #define	RETURN_TYPE_structFunction32 KenshoParser_structFunction_return

    KenshoParser_structCtor_return structCtor33;
    #undef	RETURN_TYPE_structCtor33
    #define	RETURN_TYPE_structCtor33 KenshoParser_structCtor_return

    KenshoParser_structDtor_return structDtor34;
    #undef	RETURN_TYPE_structDtor34
    #define	RETURN_TYPE_structDtor34 KenshoParser_structDtor_return

    pANTLR3_BASE_TREE SEMICOLON31_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    SEMICOLON31       = NULL;
    variable30.tree = NULL;

    structFunction32.tree = NULL;

    structCtor33.tree = NULL;

    structDtor34.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SEMICOLON31_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:274:2: ( variable SEMICOLON | structFunction | structCtor | structDtor )
            
            ANTLR3_UINT32 alt9;

            alt9=4;

            switch ( LA(1) ) 
            {
            case T_BOOL:
            case T_BYTE:
            case T_SHORT:
            case T_INT:
            case T_CHAR:
            case T_LONG:
            case T_FLOAT:
            case T_DOUBLE:
            case ID:
            	{
            		switch ( LA(2) ) 
            		{
            		case ID:
            			{
            				switch ( LA(3) ) 
            				{
            				case PAREN_L:
            					{
            						alt9=2;
            					}
            				    break;
            				case OP_ASSIGN:
            				case SEMICOLON:
            					{
            						alt9=1;
            					}
            				    break;

            				default:
            				    if (BACKTRACKING>0)
            				    {
            				        FAILEDFLAG = ANTLR3_TRUE;
            				        return retval;
            				    }
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 9;
            				    EXCEPTION->state        = 5;


            				    goto rulestructBodyDeclEx;
            				}

            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 9;
            		    EXCEPTION->state        = 1;


            		    goto rulestructBodyDeclEx;
            		}

            	}
                break;
            case T_VOID:
            case K_STATIC:
            	{
            		alt9=2;
            	}
                break;
            case K_NEW:
            	{
            		alt9=3;
            	}
                break;
            case K_DELETE:
            	{
            		alt9=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulestructBodyDeclEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:274:4: variable SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variable_in_structBodyDecl917);
        	        variable30=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable30.tree);
        	        SEMICOLON31 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_structBodyDecl919); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:275:4: structFunction
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_structFunction_in_structBodyDecl925);
        	        structFunction32=structFunction(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, structFunction32.tree);

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/Kensho.g:276:4: structCtor
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_structCtor_in_structBodyDecl930);
        	        structCtor33=structCtor(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, structCtor33.tree);

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/Kensho.g:277:4: structDtor
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_structDtor_in_structBodyDecl935);
        	        structDtor34=structDtor(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, structDtor34.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestructBodyDeclEx; /* Prevent compiler warnings */
    rulestructBodyDeclEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structBodyDecl */

/** 
 * $ANTLR start structCtor
 * f:/dev/projects/kensho/docs/Kensho.g:280:1: structCtor : K_NEW PAREN_L ( params )? PAREN_R block -> ^( CTOR ( params )? block ) ;
 */
static KenshoParser_structCtor_return
structCtor(pKenshoParser ctx)
{   
    KenshoParser_structCtor_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_NEW35;
    pANTLR3_COMMON_TOKEN    PAREN_L36;
    pANTLR3_COMMON_TOKEN    PAREN_R38;
    KenshoParser_params_return params37;
    #undef	RETURN_TYPE_params37
    #define	RETURN_TYPE_params37 KenshoParser_params_return

    KenshoParser_block_return block39;
    #undef	RETURN_TYPE_block39
    #define	RETURN_TYPE_block39 KenshoParser_block_return

    pANTLR3_BASE_TREE K_NEW35_tree;
    pANTLR3_BASE_TREE PAREN_L36_tree;
    pANTLR3_BASE_TREE PAREN_R38_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_NEW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_params;
    /* Initialize rule variables
     */


    root_0 = NULL;

    K_NEW35       = NULL;
    PAREN_L36       = NULL;
    PAREN_R38       = NULL;
    params37.tree = NULL;

    block39.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_NEW35_tree   = NULL;
    PAREN_L36_tree   = NULL;
    PAREN_R38_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_K_NEW   = NULL;
    #define CREATE_stream_K_NEW  if (stream_K_NEW == NULL) {stream_K_NEW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_NEW"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }
    stream_params   = NULL;
    #define CREATE_stream_params  if (stream_params == NULL) {stream_params = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule params"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:281:2: ( K_NEW PAREN_L ( params )? PAREN_R block -> ^( CTOR ( params )? block ) )
        // f:/dev/projects/kensho/docs/Kensho.g:281:4: K_NEW PAREN_L ( params )? PAREN_R block
        {
            K_NEW35 = (pANTLR3_COMMON_TOKEN) MATCHT(K_NEW, &FOLLOW_K_NEW_in_structCtor947); 
            if  (HASEXCEPTION())
            {
                goto rulestructCtorEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_K_NEW; stream_K_NEW->add(stream_K_NEW, K_NEW35, NULL); }

            PAREN_L36 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_structCtor949); 
            if  (HASEXCEPTION())
            {
                goto rulestructCtorEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L36, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:281:18: ( params )?
            {
                int alt10=2;
                switch ( LA(1) ) 
                {
                    case T_BOOL:
                    case T_BYTE:
                    case T_SHORT:
                    case T_INT:
                    case T_CHAR:
                    case T_LONG:
                    case T_FLOAT:
                    case T_DOUBLE:
                    case ID:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:281:18: params
            	    {
            	        FOLLOWPUSH(FOLLOW_params_in_structCtor951);
            	        params37=params(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructCtorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_params; stream_params->add(stream_params, params37.tree, NULL); }

            	    }
            	    break;

                }
            }
            PAREN_R38 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_structCtor954); 
            if  (HASEXCEPTION())
            {
                goto rulestructCtorEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R38, NULL); }

            FOLLOWPUSH(FOLLOW_block_in_structCtor956);
            block39=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestructCtorEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, block39.tree, NULL); }

             
            /* AST REWRITE
             * elements          : block, params
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 282:3: -> ^( CTOR ( params )? block )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:282:6: ^( CTOR ( params )? block )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CTOR, (pANTLR3_UINT8)"CTOR"), root_1));

            	        // f:/dev/projects/kensho/docs/Kensho.g:282:13: ( params )?
            	        {
            	        	if ( (stream_params != NULL && stream_params->hasNext(stream_params))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_params == NULL ? NULL : stream_params->nextTree(stream_params));

            	        	}
            	        	if ( stream_params != NULL) stream_params->reset(stream_params);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_block == NULL ? NULL : stream_block->nextTree(stream_block));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructCtorEx; /* Prevent compiler warnings */
    rulestructCtorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_K_NEW != NULL) stream_K_NEW->free(stream_K_NEW);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_block != NULL) stream_block->free(stream_block);
        if (stream_params != NULL) stream_params->free(stream_params);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structCtor */

/** 
 * $ANTLR start structDtor
 * f:/dev/projects/kensho/docs/Kensho.g:285:1: structDtor : K_DELETE block -> ^( DTOR block ) ;
 */
static KenshoParser_structDtor_return
structDtor(pKenshoParser ctx)
{   
    KenshoParser_structDtor_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_DELETE40;
    KenshoParser_block_return block41;
    #undef	RETURN_TYPE_block41
    #define	RETURN_TYPE_block41 KenshoParser_block_return

    pANTLR3_BASE_TREE K_DELETE40_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_DELETE;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    /* Initialize rule variables
     */


    root_0 = NULL;

    K_DELETE40       = NULL;
    block41.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_DELETE40_tree   = NULL;

    stream_K_DELETE   = NULL;
    #define CREATE_stream_K_DELETE  if (stream_K_DELETE == NULL) {stream_K_DELETE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_DELETE"); } 
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:286:2: ( K_DELETE block -> ^( DTOR block ) )
        // f:/dev/projects/kensho/docs/Kensho.g:286:4: K_DELETE block
        {
            K_DELETE40 = (pANTLR3_COMMON_TOKEN) MATCHT(K_DELETE, &FOLLOW_K_DELETE_in_structDtor981); 
            if  (HASEXCEPTION())
            {
                goto rulestructDtorEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_K_DELETE; stream_K_DELETE->add(stream_K_DELETE, K_DELETE40, NULL); }

            FOLLOWPUSH(FOLLOW_block_in_structDtor983);
            block41=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestructDtorEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, block41.tree, NULL); }

             
            /* AST REWRITE
             * elements          : block
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 286:19: -> ^( DTOR block )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:286:22: ^( DTOR block )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DTOR, (pANTLR3_UINT8)"DTOR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_block == NULL ? NULL : stream_block->nextTree(stream_block));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructDtorEx; /* Prevent compiler warnings */
    rulestructDtorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_K_DELETE != NULL) stream_K_DELETE->free(stream_K_DELETE);
        if (stream_block != NULL) stream_block->free(stream_block);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structDtor */

/** 
 * $ANTLR start structFunction
 * f:/dev/projects/kensho/docs/Kensho.g:289:1: structFunction : ( structFunMods )? signature t= BRACE_L ( statement )* BRACE_R -> ^( STRUCTFUN[$t] ( ^( MODS structFunMods ) )? signature ( statement )* ) ;
 */
static KenshoParser_structFunction_return
structFunction(pKenshoParser ctx)
{   
    KenshoParser_structFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    BRACE_R45;
    KenshoParser_structFunMods_return structFunMods42;
    #undef	RETURN_TYPE_structFunMods42
    #define	RETURN_TYPE_structFunMods42 KenshoParser_structFunMods_return

    KenshoParser_signature_return signature43;
    #undef	RETURN_TYPE_signature43
    #define	RETURN_TYPE_signature43 KenshoParser_signature_return

    KenshoParser_statement_return statement44;
    #undef	RETURN_TYPE_statement44
    #define	RETURN_TYPE_statement44 KenshoParser_statement_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE BRACE_R45_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_structFunMods;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_signature;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    BRACE_R45       = NULL;
    structFunMods42.tree = NULL;

    signature43.tree = NULL;

    statement44.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    BRACE_R45_tree   = NULL;

    stream_BRACE_L   = NULL;
    #define CREATE_stream_BRACE_L  if (stream_BRACE_L == NULL) {stream_BRACE_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_L"); } 
    stream_BRACE_R   = NULL;
    #define CREATE_stream_BRACE_R  if (stream_BRACE_R == NULL) {stream_BRACE_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_R"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_structFunMods   = NULL;
    #define CREATE_stream_structFunMods  if (stream_structFunMods == NULL) {stream_structFunMods = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule structFunMods"); }
    stream_signature   = NULL;
    #define CREATE_stream_signature  if (stream_signature == NULL) {stream_signature = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule signature"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:290:2: ( ( structFunMods )? signature t= BRACE_L ( statement )* BRACE_R -> ^( STRUCTFUN[$t] ( ^( MODS structFunMods ) )? signature ( statement )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:290:4: ( structFunMods )? signature t= BRACE_L ( statement )* BRACE_R
        {

            // f:/dev/projects/kensho/docs/Kensho.g:290:4: ( structFunMods )?
            {
                int alt11=2;
                switch ( LA(1) ) 
                {
                    case K_STATIC:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:290:4: structFunMods
            	    {
            	        FOLLOWPUSH(FOLLOW_structFunMods_in_structFunction1003);
            	        structFunMods42=structFunMods(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructFunctionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_structFunMods; stream_structFunMods->add(stream_structFunMods, structFunMods42.tree, NULL); }

            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_signature_in_structFunction1006);
            signature43=signature(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_signature; stream_signature->add(stream_signature, signature43.tree, NULL); }
            t = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_L, &FOLLOW_BRACE_L_in_structFunction1010); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_BRACE_L; stream_BRACE_L->add(stream_BRACE_L, t, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:290:39: ( statement )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case OP_ADD:
                case OP_SUB:
                case OP_NOT:
                case OP_BIT_NOT:
                case K_IF:
                case K_WHILE:
                case LITERAL_TRUE:
                case LITERAL_FALSE:
                case K_RETURN:
                case K_NEW:
                case K_DELETE:
                case PAREN_L:
                case ID:
                case LITERAL_INT:
                case LITERAL_OCT:
                case LITERAL_HEX:
                case LITERAL_FLOAT:
                case LITERAL_CHAR:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:290:39: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_structFunction1012);
            	        statement44=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructFunctionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement44.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */

            BRACE_R45 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_R, &FOLLOW_BRACE_R_in_structFunction1015); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_BRACE_R; stream_BRACE_R->add(stream_BRACE_R, BRACE_R45, NULL); }


             
            /* AST REWRITE
             * elements          : signature, structFunMods, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 291:2: -> ^( STRUCTFUN[$t] ( ^( MODS structFunMods ) )? signature ( statement )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:291:5: ^( STRUCTFUN[$t] ( ^( MODS structFunMods ) )? signature ( statement )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, STRUCTFUN, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, STRUCTFUN, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        // f:/dev/projects/kensho/docs/Kensho.g:291:21: ( ^( MODS structFunMods ) )?
            	        {
            	        	if ( (stream_structFunMods != NULL && stream_structFunMods->hasNext(stream_structFunMods))  )
            	        	{
            	        		// f:/dev/projects/kensho/docs/Kensho.g:291:21: ^( MODS structFunMods )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MODS, (pANTLR3_UINT8)"MODS"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_structFunMods == NULL ? NULL : stream_structFunMods->nextTree(stream_structFunMods));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_structFunMods != NULL) stream_structFunMods->reset(stream_structFunMods);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_signature == NULL ? NULL : stream_signature->nextTree(stream_signature));
            	        // f:/dev/projects/kensho/docs/Kensho.g:291:54: ( statement )*
            	        {
            	        	while ( (stream_statement != NULL && stream_statement->hasNext(stream_statement))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	if (stream_statement != NULL) stream_statement->reset(stream_statement);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructFunctionEx; /* Prevent compiler warnings */
    rulestructFunctionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BRACE_L != NULL) stream_BRACE_L->free(stream_BRACE_L);
        if (stream_BRACE_R != NULL) stream_BRACE_R->free(stream_BRACE_R);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_structFunMods != NULL) stream_structFunMods->free(stream_structFunMods);
        if (stream_signature != NULL) stream_signature->free(stream_signature);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structFunction */

/** 
 * $ANTLR start structFunMods
 * f:/dev/projects/kensho/docs/Kensho.g:294:1: structFunMods : K_STATIC ;
 */
static KenshoParser_structFunMods_return
structFunMods(pKenshoParser ctx)
{   
    KenshoParser_structFunMods_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_STATIC46;

    pANTLR3_BASE_TREE K_STATIC46_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    K_STATIC46       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    K_STATIC46_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:295:2: ( K_STATIC )
        // f:/dev/projects/kensho/docs/Kensho.g:295:4: K_STATIC
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            K_STATIC46 = (pANTLR3_COMMON_TOKEN) MATCHT(K_STATIC, &FOLLOW_K_STATIC_in_structFunMods1048); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunModsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            K_STATIC46_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, K_STATIC46));
            ADAPTOR->addChild(ADAPTOR, root_0, K_STATIC46_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructFunModsEx; /* Prevent compiler warnings */
    rulestructFunModsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structFunMods */

/** 
 * $ANTLR start statement
 * f:/dev/projects/kensho/docs/Kensho.g:298:1: statement : ( variable SEMICOLON | expression SEMICOLON | ifStat | whileStat | returnStatement SEMICOLON | deleteStatement SEMICOLON );
 */
static KenshoParser_statement_return
statement(pKenshoParser ctx)
{   
    KenshoParser_statement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SEMICOLON48;
    pANTLR3_COMMON_TOKEN    SEMICOLON50;
    pANTLR3_COMMON_TOKEN    SEMICOLON54;
    pANTLR3_COMMON_TOKEN    SEMICOLON56;
    KenshoParser_variable_return variable47;
    #undef	RETURN_TYPE_variable47
    #define	RETURN_TYPE_variable47 KenshoParser_variable_return

    KenshoParser_expression_return expression49;
    #undef	RETURN_TYPE_expression49
    #define	RETURN_TYPE_expression49 KenshoParser_expression_return

    KenshoParser_ifStat_return ifStat51;
    #undef	RETURN_TYPE_ifStat51
    #define	RETURN_TYPE_ifStat51 KenshoParser_ifStat_return

    KenshoParser_whileStat_return whileStat52;
    #undef	RETURN_TYPE_whileStat52
    #define	RETURN_TYPE_whileStat52 KenshoParser_whileStat_return

    KenshoParser_returnStatement_return returnStatement53;
    #undef	RETURN_TYPE_returnStatement53
    #define	RETURN_TYPE_returnStatement53 KenshoParser_returnStatement_return

    KenshoParser_deleteStatement_return deleteStatement55;
    #undef	RETURN_TYPE_deleteStatement55
    #define	RETURN_TYPE_deleteStatement55 KenshoParser_deleteStatement_return

    pANTLR3_BASE_TREE SEMICOLON48_tree;
    pANTLR3_BASE_TREE SEMICOLON50_tree;
    pANTLR3_BASE_TREE SEMICOLON54_tree;
    pANTLR3_BASE_TREE SEMICOLON56_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    SEMICOLON48       = NULL;
    SEMICOLON50       = NULL;
    SEMICOLON54       = NULL;
    SEMICOLON56       = NULL;
    variable47.tree = NULL;

    expression49.tree = NULL;

    ifStat51.tree = NULL;

    whileStat52.tree = NULL;

    returnStatement53.tree = NULL;

    deleteStatement55.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SEMICOLON48_tree   = NULL;
    SEMICOLON50_tree   = NULL;
    SEMICOLON54_tree   = NULL;
    SEMICOLON56_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:299:2: ( variable SEMICOLON | expression SEMICOLON | ifStat | whileStat | returnStatement SEMICOLON | deleteStatement SEMICOLON )
            
            ANTLR3_UINT32 alt13;

            alt13=6;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		switch ( LA(2) ) 
            		{
            		case OP_ADD:
            		case OP_SUB:
            		case OP_MUL:
            		case OP_DIV:
            		case OP_AND:
            		case OP_OR:
            		case OP_REM:
            		case OP_BIT_AND:
            		case OP_BIT_OR:
            		case OP_XOR:
            		case OP_SHIFT_L:
            		case OP_SHIFT_R:
            		case OP_USHIFT_R:
            		case CMP_EQ:
            		case CMP_NEQ:
            		case CMP_LT:
            		case CMP_GT:
            		case CMP_LTE:
            		case CMP_GTE:
            		case OP_ASSIGN:
            		case PAREN_L:
            		case SEMICOLON:
            		case OP_USHIFT_L:
            			{
            				alt13=2;
            			}
            		    break;
            		case ID:
            			{
            				alt13=1;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 13;
            		    EXCEPTION->state        = 1;


            		    goto rulestatementEx;
            		}

            	}
                break;
            case OP_ADD:
            case OP_SUB:
            case OP_NOT:
            case OP_BIT_NOT:
            case LITERAL_TRUE:
            case LITERAL_FALSE:
            case K_NEW:
            case PAREN_L:
            case LITERAL_INT:
            case LITERAL_OCT:
            case LITERAL_HEX:
            case LITERAL_FLOAT:
            case LITERAL_CHAR:
            	{
            		alt13=2;
            	}
                break;
            case T_BOOL:
            case T_BYTE:
            case T_SHORT:
            case T_INT:
            case T_CHAR:
            case T_LONG:
            case T_FLOAT:
            case T_DOUBLE:
            	{
            		alt13=1;
            	}
                break;
            case K_IF:
            	{
            		alt13=3;
            	}
                break;
            case K_WHILE:
            	{
            		alt13=4;
            	}
                break;
            case K_RETURN:
            	{
            		alt13=5;
            	}
                break;
            case K_DELETE:
            	{
            		alt13=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt13) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:299:4: variable SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variable_in_statement1059);
        	        variable47=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable47.tree);
        	        SEMICOLON48 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement1061); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:300:4: expression SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expression_in_statement1067);
        	        expression49=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression49.tree);
        	        SEMICOLON50 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement1069); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/Kensho.g:301:4: ifStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStat_in_statement1075);
        	        ifStat51=ifStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStat51.tree);

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/Kensho.g:302:4: whileStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStat_in_statement1080);
        	        whileStat52=whileStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStat52.tree);

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/Kensho.g:303:4: returnStatement SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1085);
        	        returnStatement53=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement53.tree);
        	        SEMICOLON54 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement1087); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 6:
        	    // f:/dev/projects/kensho/docs/Kensho.g:304:4: deleteStatement SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_deleteStatement_in_statement1093);
        	        deleteStatement55=deleteStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, deleteStatement55.tree);
        	        SEMICOLON56 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement1095); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start returnStatement
 * f:/dev/projects/kensho/docs/Kensho.g:307:1: returnStatement : K_RETURN ( expression )? -> ^( K_RETURN ( expression )? ) ;
 */
static KenshoParser_returnStatement_return
returnStatement(pKenshoParser ctx)
{   
    KenshoParser_returnStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_RETURN57;
    KenshoParser_expression_return expression58;
    #undef	RETURN_TYPE_expression58
    #define	RETURN_TYPE_expression58 KenshoParser_expression_return

    pANTLR3_BASE_TREE K_RETURN57_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_RETURN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    K_RETURN57       = NULL;
    expression58.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_RETURN57_tree   = NULL;

    stream_K_RETURN   = NULL;
    #define CREATE_stream_K_RETURN  if (stream_K_RETURN == NULL) {stream_K_RETURN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_RETURN"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:308:2: ( K_RETURN ( expression )? -> ^( K_RETURN ( expression )? ) )
        // f:/dev/projects/kensho/docs/Kensho.g:308:4: K_RETURN ( expression )?
        {
            K_RETURN57 = (pANTLR3_COMMON_TOKEN) MATCHT(K_RETURN, &FOLLOW_K_RETURN_in_returnStatement1108); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_K_RETURN; stream_K_RETURN->add(stream_K_RETURN, K_RETURN57, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:308:13: ( expression )?
            {
                int alt14=2;
                switch ( LA(1) ) 
                {
                    case OP_ADD:
                    case OP_SUB:
                    case OP_NOT:
                    case OP_BIT_NOT:
                    case LITERAL_TRUE:
                    case LITERAL_FALSE:
                    case K_NEW:
                    case PAREN_L:
                    case ID:
                    case LITERAL_INT:
                    case LITERAL_OCT:
                    case LITERAL_HEX:
                    case LITERAL_FLOAT:
                    case LITERAL_CHAR:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:308:13: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement1110);
            	        expression58=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression58.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : K_RETURN, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 309:3: -> ^( K_RETURN ( expression )? )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:309:6: ^( K_RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_K_RETURN == NULL ? NULL : stream_K_RETURN->nextNode(stream_K_RETURN), root_1));

            	        // f:/dev/projects/kensho/docs/Kensho.g:309:17: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_K_RETURN != NULL) stream_K_RETURN->free(stream_K_RETURN);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start deleteStatement
 * f:/dev/projects/kensho/docs/Kensho.g:312:1: deleteStatement : K_DELETE ID ;
 */
static KenshoParser_deleteStatement_return
deleteStatement(pKenshoParser ctx)
{   
    KenshoParser_deleteStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_DELETE59;
    pANTLR3_COMMON_TOKEN    ID60;

    pANTLR3_BASE_TREE K_DELETE59_tree;
    pANTLR3_BASE_TREE ID60_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    K_DELETE59       = NULL;
    ID60       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    K_DELETE59_tree   = NULL;
    ID60_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:313:2: ( K_DELETE ID )
        // f:/dev/projects/kensho/docs/Kensho.g:313:4: K_DELETE ID
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            K_DELETE59 = (pANTLR3_COMMON_TOKEN) MATCHT(K_DELETE, &FOLLOW_K_DELETE_in_deleteStatement1134); 
            if  (HASEXCEPTION())
            {
                goto ruledeleteStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            K_DELETE59_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, K_DELETE59));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, K_DELETE59_tree, root_0));
            }
            ID60 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_deleteStatement1137); 
            if  (HASEXCEPTION())
            {
                goto ruledeleteStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            ID60_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID60));
            ADAPTOR->addChild(ADAPTOR, root_0, ID60_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledeleteStatementEx; /* Prevent compiler warnings */
    ruledeleteStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end deleteStatement */

/** 
 * $ANTLR start block
 * f:/dev/projects/kensho/docs/Kensho.g:316:1: block : BRACE_L ( statement )* BRACE_R ;
 */
static KenshoParser_block_return
block(pKenshoParser ctx)
{   
    KenshoParser_block_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BRACE_L61;
    pANTLR3_COMMON_TOKEN    BRACE_R63;
    KenshoParser_statement_return statement62;
    #undef	RETURN_TYPE_statement62
    #define	RETURN_TYPE_statement62 KenshoParser_statement_return

    pANTLR3_BASE_TREE BRACE_L61_tree;
    pANTLR3_BASE_TREE BRACE_R63_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    BRACE_L61       = NULL;
    BRACE_R63       = NULL;
    statement62.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    BRACE_L61_tree   = NULL;
    BRACE_R63_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:317:2: ( BRACE_L ( statement )* BRACE_R )
        // f:/dev/projects/kensho/docs/Kensho.g:317:4: BRACE_L ( statement )* BRACE_R
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            BRACE_L61 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_L, &FOLLOW_BRACE_L_in_block1149); 
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            // f:/dev/projects/kensho/docs/Kensho.g:317:13: ( statement )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case OP_ADD:
                case OP_SUB:
                case OP_NOT:
                case OP_BIT_NOT:
                case K_IF:
                case K_WHILE:
                case LITERAL_TRUE:
                case LITERAL_FALSE:
                case K_RETURN:
                case K_NEW:
                case K_DELETE:
                case PAREN_L:
                case ID:
                case LITERAL_INT:
                case LITERAL_OCT:
                case LITERAL_HEX:
                case LITERAL_FLOAT:
                case LITERAL_CHAR:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:317:13: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_block1152);
            	        statement62=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleblockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statement62.tree);

            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */

            BRACE_R63 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_R, &FOLLOW_BRACE_R_in_block1155); 
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end block */

/** 
 * $ANTLR start ifStat
 * f:/dev/projects/kensho/docs/Kensho.g:320:1: ifStat : K_IF PAREN_L expression PAREN_R block ( elseIfStat )* ( elseStat )? -> ^( K_IF expression block ( ^( ELSEIF elseIfStat ) )* ( ^( K_ELSE elseStat ) )? ) ;
 */
static KenshoParser_ifStat_return
ifStat(pKenshoParser ctx)
{   
    KenshoParser_ifStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_IF64;
    pANTLR3_COMMON_TOKEN    PAREN_L65;
    pANTLR3_COMMON_TOKEN    PAREN_R67;
    KenshoParser_expression_return expression66;
    #undef	RETURN_TYPE_expression66
    #define	RETURN_TYPE_expression66 KenshoParser_expression_return

    KenshoParser_block_return block68;
    #undef	RETURN_TYPE_block68
    #define	RETURN_TYPE_block68 KenshoParser_block_return

    KenshoParser_elseIfStat_return elseIfStat69;
    #undef	RETURN_TYPE_elseIfStat69
    #define	RETURN_TYPE_elseIfStat69 KenshoParser_elseIfStat_return

    KenshoParser_elseStat_return elseStat70;
    #undef	RETURN_TYPE_elseStat70
    #define	RETURN_TYPE_elseStat70 KenshoParser_elseStat_return

    pANTLR3_BASE_TREE K_IF64_tree;
    pANTLR3_BASE_TREE PAREN_L65_tree;
    pANTLR3_BASE_TREE PAREN_R67_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_IF;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_elseIfStat;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_elseStat;
    /* Initialize rule variables
     */


    root_0 = NULL;

    K_IF64       = NULL;
    PAREN_L65       = NULL;
    PAREN_R67       = NULL;
    expression66.tree = NULL;

    block68.tree = NULL;

    elseIfStat69.tree = NULL;

    elseStat70.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_IF64_tree   = NULL;
    PAREN_L65_tree   = NULL;
    PAREN_R67_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_K_IF   = NULL;
    #define CREATE_stream_K_IF  if (stream_K_IF == NULL) {stream_K_IF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_IF"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_elseIfStat   = NULL;
    #define CREATE_stream_elseIfStat  if (stream_elseIfStat == NULL) {stream_elseIfStat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule elseIfStat"); }
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }
    stream_elseStat   = NULL;
    #define CREATE_stream_elseStat  if (stream_elseStat == NULL) {stream_elseStat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule elseStat"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:321:2: ( K_IF PAREN_L expression PAREN_R block ( elseIfStat )* ( elseStat )? -> ^( K_IF expression block ( ^( ELSEIF elseIfStat ) )* ( ^( K_ELSE elseStat ) )? ) )
        // f:/dev/projects/kensho/docs/Kensho.g:321:4: K_IF PAREN_L expression PAREN_R block ( elseIfStat )* ( elseStat )?
        {
            K_IF64 = (pANTLR3_COMMON_TOKEN) MATCHT(K_IF, &FOLLOW_K_IF_in_ifStat1169); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_K_IF; stream_K_IF->add(stream_K_IF, K_IF64, NULL); }

            PAREN_L65 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_ifStat1171); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L65, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_ifStat1173);
            expression66=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression66.tree, NULL); }
            PAREN_R67 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_ifStat1175); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R67, NULL); }

            FOLLOWPUSH(FOLLOW_block_in_ifStat1177);
            block68=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, block68.tree, NULL); }

            // f:/dev/projects/kensho/docs/Kensho.g:322:3: ( elseIfStat )*

            for (;;)
            {
                int alt16=2;
                switch ( LA(1) ) 
                {
                case K_ELSE:
                	{
                		switch ( LA(2) ) 
                		{
                		case K_IF:
                			{
                				alt16=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt16) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:322:3: elseIfStat
            	    {
            	        FOLLOWPUSH(FOLLOW_elseIfStat_in_ifStat1182);
            	        elseIfStat69=elseIfStat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_elseIfStat; stream_elseIfStat->add(stream_elseIfStat, elseIfStat69.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


            // f:/dev/projects/kensho/docs/Kensho.g:323:3: ( elseStat )?
            {
                int alt17=2;
                switch ( LA(1) ) 
                {
                    case K_ELSE:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:323:3: elseStat
            	    {
            	        FOLLOWPUSH(FOLLOW_elseStat_in_ifStat1187);
            	        elseStat70=elseStat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_elseStat; stream_elseStat->add(stream_elseStat, elseStat70.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : K_IF, elseIfStat, expression, elseStat, block
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 325:2: -> ^( K_IF expression block ( ^( ELSEIF elseIfStat ) )* ( ^( K_ELSE elseStat ) )? )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:325:5: ^( K_IF expression block ( ^( ELSEIF elseIfStat ) )* ( ^( K_ELSE elseStat ) )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_K_IF == NULL ? NULL : stream_K_IF->nextNode(stream_K_IF), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_block == NULL ? NULL : stream_block->nextTree(stream_block));
            	        // f:/dev/projects/kensho/docs/Kensho.g:326:4: ( ^( ELSEIF elseIfStat ) )*
            	        {
            	        	while ( (stream_elseIfStat != NULL && stream_elseIfStat->hasNext(stream_elseIfStat))  )
            	        	{
            	        		// f:/dev/projects/kensho/docs/Kensho.g:326:4: ^( ELSEIF elseIfStat )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ELSEIF, (pANTLR3_UINT8)"ELSEIF"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_elseIfStat == NULL ? NULL : stream_elseIfStat->nextTree(stream_elseIfStat));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if (stream_elseIfStat != NULL) stream_elseIfStat->reset(stream_elseIfStat);

            	        }
            	        // f:/dev/projects/kensho/docs/Kensho.g:327:4: ( ^( K_ELSE elseStat ) )?
            	        {
            	        	if ( (stream_elseStat != NULL && stream_elseStat->hasNext(stream_elseStat))  )
            	        	{
            	        		// f:/dev/projects/kensho/docs/Kensho.g:327:4: ^( K_ELSE elseStat )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, K_ELSE, (pANTLR3_UINT8)"K_ELSE"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_elseStat == NULL ? NULL : stream_elseStat->nextTree(stream_elseStat));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_elseStat != NULL) stream_elseStat->reset(stream_elseStat);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatEx; /* Prevent compiler warnings */
    ruleifStatEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_K_IF != NULL) stream_K_IF->free(stream_K_IF);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_elseIfStat != NULL) stream_elseIfStat->free(stream_elseIfStat);
        if (stream_block != NULL) stream_block->free(stream_block);
        if (stream_elseStat != NULL) stream_elseStat->free(stream_elseStat);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end ifStat */

/** 
 * $ANTLR start elseIfStat
 * f:/dev/projects/kensho/docs/Kensho.g:330:1: elseIfStat : K_ELSE K_IF PAREN_L expression PAREN_R block ;
 */
static KenshoParser_elseIfStat_return
elseIfStat(pKenshoParser ctx)
{   
    KenshoParser_elseIfStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_ELSE71;
    pANTLR3_COMMON_TOKEN    K_IF72;
    pANTLR3_COMMON_TOKEN    PAREN_L73;
    pANTLR3_COMMON_TOKEN    PAREN_R75;
    KenshoParser_expression_return expression74;
    #undef	RETURN_TYPE_expression74
    #define	RETURN_TYPE_expression74 KenshoParser_expression_return

    KenshoParser_block_return block76;
    #undef	RETURN_TYPE_block76
    #define	RETURN_TYPE_block76 KenshoParser_block_return

    pANTLR3_BASE_TREE K_ELSE71_tree;
    pANTLR3_BASE_TREE K_IF72_tree;
    pANTLR3_BASE_TREE PAREN_L73_tree;
    pANTLR3_BASE_TREE PAREN_R75_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    K_ELSE71       = NULL;
    K_IF72       = NULL;
    PAREN_L73       = NULL;
    PAREN_R75       = NULL;
    expression74.tree = NULL;

    block76.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_ELSE71_tree   = NULL;
    K_IF72_tree   = NULL;
    PAREN_L73_tree   = NULL;
    PAREN_R75_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:331:2: ( K_ELSE K_IF PAREN_L expression PAREN_R block )
        // f:/dev/projects/kensho/docs/Kensho.g:331:4: K_ELSE K_IF PAREN_L expression PAREN_R block
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            K_ELSE71 = (pANTLR3_COMMON_TOKEN) MATCHT(K_ELSE, &FOLLOW_K_ELSE_in_elseIfStat1237); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            K_IF72 = (pANTLR3_COMMON_TOKEN) MATCHT(K_IF, &FOLLOW_K_IF_in_elseIfStat1240); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            PAREN_L73 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_elseIfStat1243); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_expression_in_elseIfStat1246);
            expression74=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression74.tree);
            PAREN_R75 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_elseIfStat1248); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_block_in_elseIfStat1251);
            block76=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block76.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseIfStatEx; /* Prevent compiler warnings */
    ruleelseIfStatEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end elseIfStat */

/** 
 * $ANTLR start elseStat
 * f:/dev/projects/kensho/docs/Kensho.g:334:1: elseStat : K_ELSE block ;
 */
static KenshoParser_elseStat_return
elseStat(pKenshoParser ctx)
{   
    KenshoParser_elseStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_ELSE77;
    KenshoParser_block_return block78;
    #undef	RETURN_TYPE_block78
    #define	RETURN_TYPE_block78 KenshoParser_block_return

    pANTLR3_BASE_TREE K_ELSE77_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    K_ELSE77       = NULL;
    block78.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_ELSE77_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:335:2: ( K_ELSE block )
        // f:/dev/projects/kensho/docs/Kensho.g:335:4: K_ELSE block
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            K_ELSE77 = (pANTLR3_COMMON_TOKEN) MATCHT(K_ELSE, &FOLLOW_K_ELSE_in_elseStat1262); 
            if  (HASEXCEPTION())
            {
                goto ruleelseStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_block_in_elseStat1265);
            block78=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleelseStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block78.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseStatEx; /* Prevent compiler warnings */
    ruleelseStatEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end elseStat */

/** 
 * $ANTLR start whileStat
 * f:/dev/projects/kensho/docs/Kensho.g:338:1: whileStat : K_WHILE PAREN_L expression PAREN_R block ;
 */
static KenshoParser_whileStat_return
whileStat(pKenshoParser ctx)
{   
    KenshoParser_whileStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_WHILE79;
    pANTLR3_COMMON_TOKEN    PAREN_L80;
    pANTLR3_COMMON_TOKEN    PAREN_R82;
    KenshoParser_expression_return expression81;
    #undef	RETURN_TYPE_expression81
    #define	RETURN_TYPE_expression81 KenshoParser_expression_return

    KenshoParser_block_return block83;
    #undef	RETURN_TYPE_block83
    #define	RETURN_TYPE_block83 KenshoParser_block_return

    pANTLR3_BASE_TREE K_WHILE79_tree;
    pANTLR3_BASE_TREE PAREN_L80_tree;
    pANTLR3_BASE_TREE PAREN_R82_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    K_WHILE79       = NULL;
    PAREN_L80       = NULL;
    PAREN_R82       = NULL;
    expression81.tree = NULL;

    block83.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_WHILE79_tree   = NULL;
    PAREN_L80_tree   = NULL;
    PAREN_R82_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:339:2: ( K_WHILE PAREN_L expression PAREN_R block )
        // f:/dev/projects/kensho/docs/Kensho.g:339:4: K_WHILE PAREN_L expression PAREN_R block
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            K_WHILE79 = (pANTLR3_COMMON_TOKEN) MATCHT(K_WHILE, &FOLLOW_K_WHILE_in_whileStat1276); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            K_WHILE79_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, K_WHILE79));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, K_WHILE79_tree, root_0));
            }
            PAREN_L80 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_whileStat1279); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_expression_in_whileStat1282);
            expression81=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression81.tree);
            PAREN_R82 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_whileStat1284); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_block_in_whileStat1287);
            block83=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block83.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatEx; /* Prevent compiler warnings */
    rulewhileStatEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end whileStat */

/** 
 * $ANTLR start variable
 * f:/dev/projects/kensho/docs/Kensho.g:342:1: variable : type t= ID ( OP_ASSIGN expression )? -> ^( VARDEF[$t] type ID ) ( ^( BINOP OP_ASSIGN ID expression ) )? ;
 */
static KenshoParser_variable_return
variable(pKenshoParser ctx)
{   
    KenshoParser_variable_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    OP_ASSIGN85;
    KenshoParser_type_return type84;
    #undef	RETURN_TYPE_type84
    #define	RETURN_TYPE_type84 KenshoParser_type_return

    KenshoParser_expression_return expression86;
    #undef	RETURN_TYPE_expression86
    #define	RETURN_TYPE_expression86 KenshoParser_expression_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE OP_ASSIGN85_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_OP_ASSIGN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    OP_ASSIGN85       = NULL;
    type84.tree = NULL;

    expression86.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    OP_ASSIGN85_tree   = NULL;

    stream_OP_ASSIGN   = NULL;
    #define CREATE_stream_OP_ASSIGN  if (stream_OP_ASSIGN == NULL) {stream_OP_ASSIGN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token OP_ASSIGN"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:343:2: ( type t= ID ( OP_ASSIGN expression )? -> ^( VARDEF[$t] type ID ) ( ^( BINOP OP_ASSIGN ID expression ) )? )
        // f:/dev/projects/kensho/docs/Kensho.g:343:4: type t= ID ( OP_ASSIGN expression )?
        {
            FOLLOWPUSH(FOLLOW_type_in_variable1300);
            type84=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type; stream_type->add(stream_type, type84.tree, NULL); }
            t = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_variable1304); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, t, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:343:14: ( OP_ASSIGN expression )?
            {
                int alt18=2;
                switch ( LA(1) ) 
                {
                    case OP_ASSIGN:
                    	{
                    		alt18=1;
                    	}
                        break;
                }

                switch (alt18) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:343:16: OP_ASSIGN expression
            	    {
            	        OP_ASSIGN85 = (pANTLR3_COMMON_TOKEN) MATCHT(OP_ASSIGN, &FOLLOW_OP_ASSIGN_in_variable1308); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_OP_ASSIGN; stream_OP_ASSIGN->add(stream_OP_ASSIGN, OP_ASSIGN85, NULL); }

            	        FOLLOWPUSH(FOLLOW_expression_in_variable1310);
            	        expression86=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression86.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : OP_ASSIGN, expression, ID, type, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 344:3: -> ^( VARDEF[$t] type ID ) ( ^( BINOP OP_ASSIGN ID expression ) )?
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:344:7: ^( VARDEF[$t] type ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, VARDEF, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARDEF, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // f:/dev/projects/kensho/docs/Kensho.g:345:4: ( ^( BINOP OP_ASSIGN ID expression ) )?
            	    {
            	    	if ( (stream_OP_ASSIGN != NULL && stream_OP_ASSIGN->hasNext(stream_OP_ASSIGN)) || (stream_expression != NULL && stream_expression->hasNext(stream_expression)) || (stream_ID != NULL && stream_ID->hasNext(stream_ID))  )
            	    	{
            	    		// f:/dev/projects/kensho/docs/Kensho.g:345:4: ^( BINOP OP_ASSIGN ID expression )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BINOP, (pANTLR3_UINT8)"BINOP"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_OP_ASSIGN == NULL ? NULL : stream_OP_ASSIGN->nextNode(stream_OP_ASSIGN));
            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if ( stream_OP_ASSIGN != NULL) stream_OP_ASSIGN->reset(stream_OP_ASSIGN);
            	    	if ( stream_expression != NULL) stream_expression->reset(stream_expression);
            	    	if ( stream_ID != NULL) stream_ID->reset(stream_ID);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_OP_ASSIGN != NULL) stream_OP_ASSIGN->free(stream_OP_ASSIGN);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_type != NULL) stream_type->free(stream_type);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end variable */

/** 
 * $ANTLR start args
 * f:/dev/projects/kensho/docs/Kensho.g:348:1: args : expression ( COMMA expression )* ;
 */
static KenshoParser_args_return
args(pKenshoParser ctx)
{   
    KenshoParser_args_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA88;
    KenshoParser_expression_return expression87;
    #undef	RETURN_TYPE_expression87
    #define	RETURN_TYPE_expression87 KenshoParser_expression_return

    KenshoParser_expression_return expression89;
    #undef	RETURN_TYPE_expression89
    #define	RETURN_TYPE_expression89 KenshoParser_expression_return

    pANTLR3_BASE_TREE COMMA88_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA88       = NULL;
    expression87.tree = NULL;

    expression89.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    COMMA88_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:349:2: ( expression ( COMMA expression )* )
        // f:/dev/projects/kensho/docs/Kensho.g:349:4: expression ( COMMA expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_expression_in_args1354);
            expression87=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleargsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression87.tree);

            // f:/dev/projects/kensho/docs/Kensho.g:349:15: ( COMMA expression )*

            for (;;)
            {
                int alt19=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt19=1;
                	}
                    break;

                }

                switch (alt19) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:349:17: COMMA expression
            	    {
            	        COMMA88 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_args1358); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_expression_in_args1361);
            	        expression89=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression89.tree);

            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargsEx; /* Prevent compiler warnings */
    ruleargsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end args */

/** 
 * $ANTLR start type
 * f:/dev/projects/kensho/docs/Kensho.g:352:1: type : ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE | ID );
 */
static KenshoParser_type_return
type(pKenshoParser ctx)
{   
    KenshoParser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set90;

    pANTLR3_BASE_TREE set90_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set90       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set90_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:353:2: ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE | ID )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set90=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= T_BOOL) && (LA(1) <= T_DOUBLE)) || LA(1) == ID )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set90)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_type0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type0);    goto ruletypeEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start expression
 * f:/dev/projects/kensho/docs/Kensho.g:364:1: expression : left= primary ( binop right= primary )* ->;
 */
static KenshoParser_expression_return
expression(pKenshoParser ctx)
{   
    KenshoParser_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    KenshoParser_primary_return left;
    #undef	RETURN_TYPE_left
    #define	RETURN_TYPE_left KenshoParser_primary_return

    KenshoParser_primary_return right;
    #undef	RETURN_TYPE_right
    #define	RETURN_TYPE_right KenshoParser_primary_return

    KenshoParser_binop_return binop91;
    #undef	RETURN_TYPE_binop91
    #define	RETURN_TYPE_binop91 KenshoParser_binop_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primary;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_binop;
    /* Initialize rule variables
     */


    root_0 = NULL;


    	std::vector<pANTLR3_BASE_TREE> expressions;
    	std::vector<pANTLR3_COMMON_TOKEN> operators;

    left.tree = NULL;

    right.tree = NULL;

    binop91.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_primary   = NULL;
    #define CREATE_stream_primary  if (stream_primary == NULL) {stream_primary = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primary"); }
    stream_binop   = NULL;
    #define CREATE_stream_binop  if (stream_binop == NULL) {stream_binop = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule binop"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:370:2: (left= primary ( binop right= primary )* ->)
        // f:/dev/projects/kensho/docs/Kensho.g:370:4: left= primary ( binop right= primary )*
        {
            FOLLOWPUSH(FOLLOW_primary_in_expression1433);
            left=primary(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_primary; stream_primary->add(stream_primary, left.tree, NULL); }
            if ( BACKTRACKING==0 ) 
            {
                 expressions.push_back((left.tree)); 
            }

            // f:/dev/projects/kensho/docs/Kensho.g:371:3: ( binop right= primary )*

            for (;;)
            {
                int alt20=2;
                switch ( LA(1) ) 
                {
                case OP_ADD:
                case OP_SUB:
                case OP_MUL:
                case OP_DIV:
                case OP_AND:
                case OP_OR:
                case OP_REM:
                case OP_BIT_AND:
                case OP_BIT_OR:
                case OP_XOR:
                case OP_SHIFT_L:
                case OP_SHIFT_R:
                case OP_USHIFT_R:
                case CMP_EQ:
                case CMP_NEQ:
                case CMP_LT:
                case CMP_GT:
                case CMP_LTE:
                case CMP_GTE:
                case OP_ASSIGN:
                case OP_USHIFT_L:
                	{
                		alt20=1;
                	}
                    break;

                }

                switch (alt20) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:372:4: binop right= primary
            	    {
            	        FOLLOWPUSH(FOLLOW_binop_in_expression1446);
            	        binop91=binop(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_binop; stream_binop->add(stream_binop, binop91.tree, NULL); }
            	        FOLLOWPUSH(FOLLOW_primary_in_expression1450);
            	        right=primary(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_primary; stream_primary->add(stream_primary, right.tree, NULL); }
            	        if ( BACKTRACKING==0 ) 
            	        {
            	             
            	            				operators.push_back((binop91.start)); 
            	            				expressions.push_back((right.tree)); 
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 379:3: ->
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0,  createPrecedenceTree(ctx, expressions, operators) );

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_primary != NULL) stream_primary->free(stream_primary);
        if (stream_binop != NULL) stream_binop->free(stream_binop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start primary
 * f:/dev/projects/kensho/docs/Kensho.g:382:1: primary : ( atom | parenOrCastExpr | K_NEW ID PAREN_L ( args )? PAREN_R -> ^( K_NEW ID ( args )? ) );
 */
static KenshoParser_primary_return
primary(pKenshoParser ctx)
{   
    KenshoParser_primary_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_NEW94;
    pANTLR3_COMMON_TOKEN    ID95;
    pANTLR3_COMMON_TOKEN    PAREN_L96;
    pANTLR3_COMMON_TOKEN    PAREN_R98;
    KenshoParser_atom_return atom92;
    #undef	RETURN_TYPE_atom92
    #define	RETURN_TYPE_atom92 KenshoParser_atom_return

    KenshoParser_parenOrCastExpr_return parenOrCastExpr93;
    #undef	RETURN_TYPE_parenOrCastExpr93
    #define	RETURN_TYPE_parenOrCastExpr93 KenshoParser_parenOrCastExpr_return

    KenshoParser_args_return args97;
    #undef	RETURN_TYPE_args97
    #define	RETURN_TYPE_args97 KenshoParser_args_return

    pANTLR3_BASE_TREE K_NEW94_tree;
    pANTLR3_BASE_TREE ID95_tree;
    pANTLR3_BASE_TREE PAREN_L96_tree;
    pANTLR3_BASE_TREE PAREN_R98_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_NEW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_args;
    /* Initialize rule variables
     */


    root_0 = NULL;

    K_NEW94       = NULL;
    ID95       = NULL;
    PAREN_L96       = NULL;
    PAREN_R98       = NULL;
    atom92.tree = NULL;

    parenOrCastExpr93.tree = NULL;

    args97.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_NEW94_tree   = NULL;
    ID95_tree   = NULL;
    PAREN_L96_tree   = NULL;
    PAREN_R98_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_K_NEW   = NULL;
    #define CREATE_stream_K_NEW  if (stream_K_NEW == NULL) {stream_K_NEW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_NEW"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_args   = NULL;
    #define CREATE_stream_args  if (stream_args == NULL) {stream_args = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule args"); }

    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:383:2: ( atom | parenOrCastExpr | K_NEW ID PAREN_L ( args )? PAREN_R -> ^( K_NEW ID ( args )? ) )
            
            ANTLR3_UINT32 alt22;

            alt22=3;

            switch ( LA(1) ) 
            {
            case OP_ADD:
            case OP_SUB:
            case OP_NOT:
            case OP_BIT_NOT:
            case LITERAL_TRUE:
            case LITERAL_FALSE:
            case ID:
            case LITERAL_INT:
            case LITERAL_OCT:
            case LITERAL_HEX:
            case LITERAL_FLOAT:
            case LITERAL_CHAR:
            	{
            		alt22=1;
            	}
                break;
            case PAREN_L:
            	{
            		alt22=2;
            	}
                break;
            case K_NEW:
            	{
            		alt22=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 22;
                EXCEPTION->state        = 0;


                goto ruleprimaryEx;
            }

            switch (alt22) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:383:4: atom
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_atom_in_primary1483);
        	        atom92=atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, atom92.tree);

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:384:4: parenOrCastExpr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_parenOrCastExpr_in_primary1488);
        	        parenOrCastExpr93=parenOrCastExpr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, parenOrCastExpr93.tree);

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/Kensho.g:385:4: K_NEW ID PAREN_L ( args )? PAREN_R
        	    {
        	        K_NEW94 = (pANTLR3_COMMON_TOKEN) MATCHT(K_NEW, &FOLLOW_K_NEW_in_primary1493); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_K_NEW; stream_K_NEW->add(stream_K_NEW, K_NEW94, NULL); }

        	        ID95 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_primary1495); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID95, NULL); }

        	        PAREN_L96 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_primary1497); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L96, NULL); }


        	        // f:/dev/projects/kensho/docs/Kensho.g:385:21: ( args )?
        	        {
        	            int alt21=2;
        	            switch ( LA(1) ) 
        	            {
        	                case OP_ADD:
        	                case OP_SUB:
        	                case OP_NOT:
        	                case OP_BIT_NOT:
        	                case LITERAL_TRUE:
        	                case LITERAL_FALSE:
        	                case K_NEW:
        	                case PAREN_L:
        	                case ID:
        	                case LITERAL_INT:
        	                case LITERAL_OCT:
        	                case LITERAL_HEX:
        	                case LITERAL_FLOAT:
        	                case LITERAL_CHAR:
        	                	{
        	                		alt21=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:385:21: args
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_args_in_primary1499);
        	        	        args97=args(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_args; stream_args->add(stream_args, args97.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        PAREN_R98 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_primary1502); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R98, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : ID, K_NEW, args
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 385:35: -> ^( K_NEW ID ( args )? )
        	        	{
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:385:38: ^( K_NEW ID ( args )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_K_NEW == NULL ? NULL : stream_K_NEW->nextNode(stream_K_NEW), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
        	        	        // f:/dev/projects/kensho/docs/Kensho.g:385:49: ( args )?
        	        	        {
        	        	        	if ( (stream_args != NULL && stream_args->hasNext(stream_args))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_args == NULL ? NULL : stream_args->nextTree(stream_args));

        	        	        	}
        	        	        	if ( stream_args != NULL) stream_args->reset(stream_args);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryEx; /* Prevent compiler warnings */
    ruleprimaryEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_K_NEW != NULL) stream_K_NEW->free(stream_K_NEW);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_args != NULL) stream_args->free(stream_args);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end primary */

/** 
 * $ANTLR start castExpr
 * f:/dev/projects/kensho/docs/Kensho.g:388:1: castExpr : PAREN_L type PAREN_R atom -> ^( CAST type atom ) ;
 */
static KenshoParser_castExpr_return
castExpr(pKenshoParser ctx)
{   
    KenshoParser_castExpr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    PAREN_L99;
    pANTLR3_COMMON_TOKEN    PAREN_R101;
    KenshoParser_type_return type100;
    #undef	RETURN_TYPE_type100
    #define	RETURN_TYPE_type100 KenshoParser_type_return

    KenshoParser_atom_return atom102;
    #undef	RETURN_TYPE_atom102
    #define	RETURN_TYPE_atom102 KenshoParser_atom_return

    pANTLR3_BASE_TREE PAREN_L99_tree;
    pANTLR3_BASE_TREE PAREN_R101_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_atom;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    PAREN_L99       = NULL;
    PAREN_R101       = NULL;
    type100.tree = NULL;

    atom102.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    PAREN_L99_tree   = NULL;
    PAREN_R101_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_atom   = NULL;
    #define CREATE_stream_atom  if (stream_atom == NULL) {stream_atom = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule atom"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:389:2: ( PAREN_L type PAREN_R atom -> ^( CAST type atom ) )
        // f:/dev/projects/kensho/docs/Kensho.g:389:4: PAREN_L type PAREN_R atom
        {
            PAREN_L99 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_castExpr1525); 
            if  (HASEXCEPTION())
            {
                goto rulecastExprEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L99, NULL); }

            FOLLOWPUSH(FOLLOW_type_in_castExpr1527);
            type100=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecastExprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type; stream_type->add(stream_type, type100.tree, NULL); }
            PAREN_R101 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_castExpr1529); 
            if  (HASEXCEPTION())
            {
                goto rulecastExprEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R101, NULL); }

            FOLLOWPUSH(FOLLOW_atom_in_castExpr1531);
            atom102=atom(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecastExprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_atom; stream_atom->add(stream_atom, atom102.tree, NULL); }

             
            /* AST REWRITE
             * elements          : atom, type
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 389:30: -> ^( CAST type atom )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:389:33: ^( CAST type atom )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CAST, (pANTLR3_UINT8)"CAST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_atom == NULL ? NULL : stream_atom->nextTree(stream_atom));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecastExprEx; /* Prevent compiler warnings */
    rulecastExprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_atom != NULL) stream_atom->free(stream_atom);
        if (stream_type != NULL) stream_type->free(stream_type);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end castExpr */

/** 
 * $ANTLR start atom
 * f:/dev/projects/kensho/docs/Kensho.g:392:1: atom : ( literal -> ^( LIT literal ) | call | ID | unop atomOrParenExpr -> ^( UNOP unop atomOrParenExpr ) );
 */
static KenshoParser_atom_return
atom(pKenshoParser ctx)
{   
    KenshoParser_atom_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID105;
    KenshoParser_literal_return literal103;
    #undef	RETURN_TYPE_literal103
    #define	RETURN_TYPE_literal103 KenshoParser_literal_return

    KenshoParser_call_return call104;
    #undef	RETURN_TYPE_call104
    #define	RETURN_TYPE_call104 KenshoParser_call_return

    KenshoParser_unop_return unop106;
    #undef	RETURN_TYPE_unop106
    #define	RETURN_TYPE_unop106 KenshoParser_unop_return

    KenshoParser_atomOrParenExpr_return atomOrParenExpr107;
    #undef	RETURN_TYPE_atomOrParenExpr107
    #define	RETURN_TYPE_atomOrParenExpr107 KenshoParser_atomOrParenExpr_return

    pANTLR3_BASE_TREE ID105_tree;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unop;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_atomOrParenExpr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_literal;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID105       = NULL;
    literal103.tree = NULL;

    call104.tree = NULL;

    unop106.tree = NULL;

    atomOrParenExpr107.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID105_tree   = NULL;

    stream_unop   = NULL;
    #define CREATE_stream_unop  if (stream_unop == NULL) {stream_unop = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unop"); }
    stream_atomOrParenExpr   = NULL;
    #define CREATE_stream_atomOrParenExpr  if (stream_atomOrParenExpr == NULL) {stream_atomOrParenExpr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule atomOrParenExpr"); }
    stream_literal   = NULL;
    #define CREATE_stream_literal  if (stream_literal == NULL) {stream_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule literal"); }

    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:393:2: ( literal -> ^( LIT literal ) | call | ID | unop atomOrParenExpr -> ^( UNOP unop atomOrParenExpr ) )
            
            ANTLR3_UINT32 alt23;

            alt23=4;

            switch ( LA(1) ) 
            {
            case LITERAL_TRUE:
            case LITERAL_FALSE:
            case LITERAL_INT:
            case LITERAL_OCT:
            case LITERAL_HEX:
            case LITERAL_FLOAT:
            case LITERAL_CHAR:
            	{
            		alt23=1;
            	}
                break;
            case ID:
            	{
            		switch ( LA(2) ) 
            		{
            		case PAREN_L:
            			{
            				alt23=2;
            			}
            		    break;
            		case EOF:
            		case OP_ADD:
            		case OP_SUB:
            		case OP_MUL:
            		case OP_DIV:
            		case OP_AND:
            		case OP_OR:
            		case OP_REM:
            		case OP_BIT_AND:
            		case OP_BIT_OR:
            		case OP_XOR:
            		case OP_SHIFT_L:
            		case OP_SHIFT_R:
            		case OP_USHIFT_R:
            		case CMP_EQ:
            		case CMP_NEQ:
            		case CMP_LT:
            		case CMP_GT:
            		case CMP_LTE:
            		case CMP_GTE:
            		case OP_ASSIGN:
            		case PAREN_R:
            		case COMMA:
            		case SEMICOLON:
            		case OP_USHIFT_L:
            			{
            				alt23=3;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 23;
            		    EXCEPTION->state        = 2;


            		    goto ruleatomEx;
            		}

            	}
                break;
            case OP_ADD:
            case OP_SUB:
            case OP_NOT:
            case OP_BIT_NOT:
            	{
            		alt23=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 23;
                EXCEPTION->state        = 0;


                goto ruleatomEx;
            }

            switch (alt23) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:393:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_atom1554);
        	        literal103=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_literal; stream_literal->add(stream_literal, literal103.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : literal
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 393:12: -> ^( LIT literal )
        	        	{
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:393:15: ^( LIT literal )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LIT, (pANTLR3_UINT8)"LIT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_literal == NULL ? NULL : stream_literal->nextTree(stream_literal));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:394:4: call
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_call_in_atom1567);
        	        call104=call(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, call104.tree);

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/Kensho.g:395:4: ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        ID105 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_atom1572); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        ID105_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID105));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ID105_tree);
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/Kensho.g:396:4: unop atomOrParenExpr
        	    {
        	        FOLLOWPUSH(FOLLOW_unop_in_atom1577);
        	        unop106=unop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unop; stream_unop->add(stream_unop, unop106.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_atomOrParenExpr_in_atom1579);
        	        atomOrParenExpr107=atomOrParenExpr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_atomOrParenExpr; stream_atomOrParenExpr->add(stream_atomOrParenExpr, atomOrParenExpr107.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : unop, atomOrParenExpr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 396:25: -> ^( UNOP unop atomOrParenExpr )
        	        	{
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:396:28: ^( UNOP unop atomOrParenExpr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNOP, (pANTLR3_UINT8)"UNOP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unop == NULL ? NULL : stream_unop->nextTree(stream_unop));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_atomOrParenExpr == NULL ? NULL : stream_atomOrParenExpr->nextTree(stream_atomOrParenExpr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unop != NULL) stream_unop->free(stream_unop);
        if (stream_atomOrParenExpr != NULL) stream_atomOrParenExpr->free(stream_atomOrParenExpr);
        if (stream_literal != NULL) stream_literal->free(stream_literal);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end atom */

/** 
 * $ANTLR start atomOrParenExpr
 * f:/dev/projects/kensho/docs/Kensho.g:399:1: atomOrParenExpr : ( atom | parenExpr );
 */
static KenshoParser_atomOrParenExpr_return
atomOrParenExpr(pKenshoParser ctx)
{   
    KenshoParser_atomOrParenExpr_return retval;

    pANTLR3_BASE_TREE root_0;

    KenshoParser_atom_return atom108;
    #undef	RETURN_TYPE_atom108
    #define	RETURN_TYPE_atom108 KenshoParser_atom_return

    KenshoParser_parenExpr_return parenExpr109;
    #undef	RETURN_TYPE_parenExpr109
    #define	RETURN_TYPE_parenExpr109 KenshoParser_parenExpr_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    atom108.tree = NULL;

    parenExpr109.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:400:2: ( atom | parenExpr )
            
            ANTLR3_UINT32 alt24;

            alt24=2;

            switch ( LA(1) ) 
            {
            case OP_ADD:
            case OP_SUB:
            case OP_NOT:
            case OP_BIT_NOT:
            case LITERAL_TRUE:
            case LITERAL_FALSE:
            case ID:
            case LITERAL_INT:
            case LITERAL_OCT:
            case LITERAL_HEX:
            case LITERAL_FLOAT:
            case LITERAL_CHAR:
            	{
            		alt24=1;
            	}
                break;
            case PAREN_L:
            	{
            		alt24=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 24;
                EXCEPTION->state        = 0;


                goto ruleatomOrParenExprEx;
            }

            switch (alt24) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:400:4: atom
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_atom_in_atomOrParenExpr1601);
        	        atom108=atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomOrParenExprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, atom108.tree);

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:400:11: parenExpr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_parenExpr_in_atomOrParenExpr1605);
        	        parenExpr109=parenExpr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomOrParenExprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, parenExpr109.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleatomOrParenExprEx; /* Prevent compiler warnings */
    ruleatomOrParenExprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end atomOrParenExpr */

/** 
 * $ANTLR start parenOrCastExpr
 * f:/dev/projects/kensho/docs/Kensho.g:403:1: parenOrCastExpr : ( ( PAREN_L type PAREN_R atom )=> castExpr | parenExpr );
 */
static KenshoParser_parenOrCastExpr_return
parenOrCastExpr(pKenshoParser ctx)
{   
    KenshoParser_parenOrCastExpr_return retval;

    pANTLR3_BASE_TREE root_0;

    KenshoParser_castExpr_return castExpr110;
    #undef	RETURN_TYPE_castExpr110
    #define	RETURN_TYPE_castExpr110 KenshoParser_castExpr_return

    KenshoParser_parenExpr_return parenExpr111;
    #undef	RETURN_TYPE_parenExpr111
    #define	RETURN_TYPE_parenExpr111 KenshoParser_parenExpr_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    castExpr110.tree = NULL;

    parenExpr111.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:404:2: ( ( PAREN_L type PAREN_R atom )=> castExpr | parenExpr )
            
            ANTLR3_UINT32 alt25;

            alt25=2;

            switch ( LA(1) ) 
            {
            case PAREN_L:
            	{

            		{
            		    int LA25_1 = LA(2);
            		    if ( (synpred1_Kensho(ctx)) ) 
            		    {
            		        alt25=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt25=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 25;
            		        EXCEPTION->state        = 1;


            		        goto ruleparenOrCastExprEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 25;
                EXCEPTION->state        = 0;


                goto ruleparenOrCastExprEx;
            }

            switch (alt25) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:404:4: ( PAREN_L type PAREN_R atom )=> castExpr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_castExpr_in_parenOrCastExpr1632);
        	        castExpr110=castExpr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleparenOrCastExprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, castExpr110.tree);

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:405:4: parenExpr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_parenExpr_in_parenOrCastExpr1637);
        	        parenExpr111=parenExpr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleparenOrCastExprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, parenExpr111.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleparenOrCastExprEx; /* Prevent compiler warnings */
    ruleparenOrCastExprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end parenOrCastExpr */

/** 
 * $ANTLR start parenExpr
 * f:/dev/projects/kensho/docs/Kensho.g:408:1: parenExpr : PAREN_L expression PAREN_R ;
 */
static KenshoParser_parenExpr_return
parenExpr(pKenshoParser ctx)
{   
    KenshoParser_parenExpr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    PAREN_L112;
    pANTLR3_COMMON_TOKEN    PAREN_R114;
    KenshoParser_expression_return expression113;
    #undef	RETURN_TYPE_expression113
    #define	RETURN_TYPE_expression113 KenshoParser_expression_return

    pANTLR3_BASE_TREE PAREN_L112_tree;
    pANTLR3_BASE_TREE PAREN_R114_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    PAREN_L112       = NULL;
    PAREN_R114       = NULL;
    expression113.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    PAREN_L112_tree   = NULL;
    PAREN_R114_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:409:2: ( PAREN_L expression PAREN_R )
        // f:/dev/projects/kensho/docs/Kensho.g:409:4: PAREN_L expression PAREN_R
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            PAREN_L112 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_parenExpr1649); 
            if  (HASEXCEPTION())
            {
                goto ruleparenExprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_expression_in_parenExpr1652);
            expression113=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparenExprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expression113.tree);
            PAREN_R114 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_parenExpr1654); 
            if  (HASEXCEPTION())
            {
                goto ruleparenExprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparenExprEx; /* Prevent compiler warnings */
    ruleparenExprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end parenExpr */

/** 
 * $ANTLR start call
 * f:/dev/projects/kensho/docs/Kensho.g:412:1: call : ID PAREN_L ( args )? PAREN_R -> ^( CALL ID ( args )? ) ;
 */
static KenshoParser_call_return
call(pKenshoParser ctx)
{   
    KenshoParser_call_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID115;
    pANTLR3_COMMON_TOKEN    PAREN_L116;
    pANTLR3_COMMON_TOKEN    PAREN_R118;
    KenshoParser_args_return args117;
    #undef	RETURN_TYPE_args117
    #define	RETURN_TYPE_args117 KenshoParser_args_return

    pANTLR3_BASE_TREE ID115_tree;
    pANTLR3_BASE_TREE PAREN_L116_tree;
    pANTLR3_BASE_TREE PAREN_R118_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_args;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID115       = NULL;
    PAREN_L116       = NULL;
    PAREN_R118       = NULL;
    args117.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID115_tree   = NULL;
    PAREN_L116_tree   = NULL;
    PAREN_R118_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_args   = NULL;
    #define CREATE_stream_args  if (stream_args == NULL) {stream_args = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule args"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:413:2: ( ID PAREN_L ( args )? PAREN_R -> ^( CALL ID ( args )? ) )
        // f:/dev/projects/kensho/docs/Kensho.g:413:4: ID PAREN_L ( args )? PAREN_R
        {
            ID115 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_call1667); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID115, NULL); }

            PAREN_L116 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_call1669); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L116, NULL); }


            // f:/dev/projects/kensho/docs/Kensho.g:413:15: ( args )?
            {
                int alt26=2;
                switch ( LA(1) ) 
                {
                    case OP_ADD:
                    case OP_SUB:
                    case OP_NOT:
                    case OP_BIT_NOT:
                    case LITERAL_TRUE:
                    case LITERAL_FALSE:
                    case K_NEW:
                    case PAREN_L:
                    case ID:
                    case LITERAL_INT:
                    case LITERAL_OCT:
                    case LITERAL_HEX:
                    case LITERAL_FLOAT:
                    case LITERAL_CHAR:
                    	{
                    		alt26=1;
                    	}
                        break;
                }

                switch (alt26) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:413:15: args
            	    {
            	        FOLLOWPUSH(FOLLOW_args_in_call1671);
            	        args117=args(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_args; stream_args->add(stream_args, args117.tree, NULL); }

            	    }
            	    break;

                }
            }
            PAREN_R118 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_call1674); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R118, NULL); }


             
            /* AST REWRITE
             * elements          : args, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 414:3: -> ^( CALL ID ( args )? )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:414:6: ^( CALL ID ( args )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:414:16: ( args )?
            	        {
            	        	if ( (stream_args != NULL && stream_args->hasNext(stream_args))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_args == NULL ? NULL : stream_args->nextTree(stream_args));

            	        	}
            	        	if ( stream_args != NULL) stream_args->reset(stream_args);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallEx; /* Prevent compiler warnings */
    rulecallEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_args != NULL) stream_args->free(stream_args);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end call */

/** 
 * $ANTLR start literal
 * f:/dev/projects/kensho/docs/Kensho.g:417:1: literal : ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR );
 */
static KenshoParser_literal_return
literal(pKenshoParser ctx)
{   
    KenshoParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set119;

    pANTLR3_BASE_TREE set119_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set119       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set119_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:418:2: ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set119=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= LITERAL_TRUE) && (LA(1) <= LITERAL_FALSE)) || ((LA(1) >= LITERAL_INT) && (LA(1) <= LITERAL_CHAR)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set119)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start unop
 * f:/dev/projects/kensho/docs/Kensho.g:428:1: unop : ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT );
 */
static KenshoParser_unop_return
unop(pKenshoParser ctx)
{   
    KenshoParser_unop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set120;

    pANTLR3_BASE_TREE set120_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set120       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set120_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:429:2: ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set120=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_SUB)) || ((LA(1) >= OP_NOT) && (LA(1) <= OP_BIT_NOT)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set120)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_unop0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unop0);    goto ruleunopEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunopEx; /* Prevent compiler warnings */
    ruleunopEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end unop */

/** 
 * $ANTLR start binop
 * f:/dev/projects/kensho/docs/Kensho.g:435:1: binop : ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_REM | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE );
 */
static KenshoParser_binop_return
binop(pKenshoParser ctx)
{   
    KenshoParser_binop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set121;

    pANTLR3_BASE_TREE set121_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set121       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set121_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:436:2: ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_REM | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set121=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_DIV)) || ((LA(1) >= OP_AND) && (LA(1) <= OP_ASSIGN)) || LA(1) == OP_USHIFT_L )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set121)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_binop0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_binop0);    goto rulebinopEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebinopEx; /* Prevent compiler warnings */
    rulebinopEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end binop */

// $ANTLR start synpred1_Kensho
static void synpred1_Kensho_fragment(pKenshoParser ctx ) 
{
    // f:/dev/projects/kensho/docs/Kensho.g:404:4: ( PAREN_L type PAREN_R atom )
    // f:/dev/projects/kensho/docs/Kensho.g:404:6: PAREN_L type PAREN_R atom
    {
         MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_synpred1_Kensho1620); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_KenshoEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_type_in_synpred1_Kensho1622);
        type(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_KenshoEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_synpred1_Kensho1624); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_KenshoEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_atom_in_synpred1_Kensho1626);
        atom(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_KenshoEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_KenshoEx; /* Prevent compiler warnings */
rulesynpred1_KenshoEx: ;

}
// $ANTLR end synpred1_Kensho
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred1_Kensho(pKenshoParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_Kensho_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
