/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 18, 2009 10:09:25
 *
 *     -  From the grammar source file : f:/dev/projects/kensho/docs/Kensho.g
 *     -                            On : 2009-09-30 18:05:38
 *     -                for the parser : KenshoParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "KenshoParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pKenshoParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pKenshoParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pKenshoParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   KenshoParserTokenNames[57+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "T_BOOL",
        (pANTLR3_UINT8) "T_BYTE",
        (pANTLR3_UINT8) "T_SHORT",
        (pANTLR3_UINT8) "T_INT",
        (pANTLR3_UINT8) "T_CHAR",
        (pANTLR3_UINT8) "T_LONG",
        (pANTLR3_UINT8) "T_FLOAT",
        (pANTLR3_UINT8) "T_DOUBLE",
        (pANTLR3_UINT8) "T_VOID",
        (pANTLR3_UINT8) "OP_ADD",
        (pANTLR3_UINT8) "OP_SUB",
        (pANTLR3_UINT8) "OP_MUL",
        (pANTLR3_UINT8) "OP_DIV",
        (pANTLR3_UINT8) "OP_NOT",
        (pANTLR3_UINT8) "OP_BIT_NOT",
        (pANTLR3_UINT8) "OP_AND",
        (pANTLR3_UINT8) "OP_OR",
        (pANTLR3_UINT8) "OP_BIT_AND",
        (pANTLR3_UINT8) "OP_BIT_OR",
        (pANTLR3_UINT8) "OP_XOR",
        (pANTLR3_UINT8) "OP_SHIFT_L",
        (pANTLR3_UINT8) "OP_SHIFT_R",
        (pANTLR3_UINT8) "OP_USHIFT_L",
        (pANTLR3_UINT8) "OP_USHIFT_R",
        (pANTLR3_UINT8) "CMP_EQ",
        (pANTLR3_UINT8) "CMP_NEQ",
        (pANTLR3_UINT8) "CMP_LT",
        (pANTLR3_UINT8) "CMP_GT",
        (pANTLR3_UINT8) "CMP_LTE",
        (pANTLR3_UINT8) "CMP_GTE",
        (pANTLR3_UINT8) "OP_ASSIGN",
        (pANTLR3_UINT8) "BRACE_L",
        (pANTLR3_UINT8) "BRACE_R",
        (pANTLR3_UINT8) "PAREN_L",
        (pANTLR3_UINT8) "PAREN_R",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "FUNDEF",
        (pANTLR3_UINT8) "FUNSIG",
        (pANTLR3_UINT8) "ARGDEF",
        (pANTLR3_UINT8) "BINOP",
        (pANTLR3_UINT8) "LIT",
        (pANTLR3_UINT8) "UNOP",
        (pANTLR3_UINT8) "VARDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "HEXDIGIT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "BLOCK_COMMENT",
        (pANTLR3_UINT8) "LITERAL_OCT",
        (pANTLR3_UINT8) "LITERAL_HEX",
        (pANTLR3_UINT8) "LITERAL_INT",
        (pANTLR3_UINT8) "LITERAL_FLOAT",
        (pANTLR3_UINT8) "ID"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static KenshoParser_program_return	program    (pKenshoParser ctx);
static KenshoParser_function_return	function    (pKenshoParser ctx);
static KenshoParser_signature_return	signature    (pKenshoParser ctx);
static KenshoParser_functionType_return	functionType    (pKenshoParser ctx);
static KenshoParser_params_return	params    (pKenshoParser ctx);
static KenshoParser_statement_return	statement    (pKenshoParser ctx);
static KenshoParser_variable_return	variable    (pKenshoParser ctx);
static KenshoParser_args_return	args    (pKenshoParser ctx);
static KenshoParser_type_return	type    (pKenshoParser ctx);
static KenshoParser_expression_return	expression    (pKenshoParser ctx);
static KenshoParser_primary_return	primary    (pKenshoParser ctx);
static KenshoParser_atom_return	atom    (pKenshoParser ctx);
static KenshoParser_call_return	call    (pKenshoParser ctx);
static KenshoParser_literal_return	literal    (pKenshoParser ctx);
static KenshoParser_unop_return	unop    (pKenshoParser ctx);
static KenshoParser_binop_return	binop    (pKenshoParser ctx);
static void	KenshoParserFree(pKenshoParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "f:/dev/projects/kensho/docs/Kensho.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new KenshoParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoParser
KenshoParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return KenshoParserNewSSD(instream, NULL);
}

/** \brief Create a new KenshoParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoParser
KenshoParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pKenshoParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pKenshoParser) ANTLR3_CALLOC(1, sizeof(KenshoParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in KenshoParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our KenshoParser interface
     */
    ctx->program	= program;
    ctx->function	= function;
    ctx->signature	= signature;
    ctx->functionType	= functionType;
    ctx->params	= params;
    ctx->statement	= statement;
    ctx->variable	= variable;
    ctx->args	= args;
    ctx->type	= type;
    ctx->expression	= expression;
    ctx->primary	= primary;
    ctx->atom	= atom;
    ctx->call	= call;
    ctx->literal	= literal;
    ctx->unop	= unop;
    ctx->binop	= binop;
    ctx->free			= KenshoParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = KenshoParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 KenshoParserFree(pKenshoParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return KenshoParserTokenNames; 
}


    	char* antlrTokenName(int type) {
    		return (char*)KenshoParserTokenNames[type];
    	}
    	
    	bool isRightAssociative(ANTLR3_UINT32 type) {
    		switch (type) {
    			case OP_ASSIGN:
    				return true;
    		}
    		return false;
    	}
    	
    	ANTLR3_UINT32 getOperatorPrecedence(ANTLR3_UINT32 type) {
    		switch (type) {
    			// note: lowest number binds most tightly i.e. has highest precedence
    			case OP_MUL:
    			case OP_DIV:		return 1;
    			
    			case OP_ADD:
    			case OP_SUB:		return 2;
    			
    			case OP_SHIFT_L:
    			case OP_SHIFT_R:
    			case OP_USHIFT_L:
    			case OP_USHIFT_R:	return 3;
    			
    			case CMP_LT:
    			case CMP_LTE:
    			case CMP_GT:	
    			case CMP_GTE:		return 4;
    				
    			case CMP_EQ:
    			case CMP_NEQ:		return 5;
    			
    			case OP_BIT_AND:	return 6;
    			case OP_XOR:		return 7;
    			case OP_BIT_OR:		return 8;
    				
    			case OP_AND:		return 9;
    			case OP_OR:			return 10;
    			
    			case OP_ASSIGN:		return 11;
    		
    			default:
    				// missing switch case
    				assert(false);
    				return 0;
    		}
    	}
    	
    	int findPivot(std::vector<pANTLR3_COMMON_TOKEN> ops, int start, int stop) {
    		int pivot = start;
    		ANTLR3_UINT32 pivotRank = getOperatorPrecedence(ops.at(pivot)->getType(ops.at(pivot)));
    		for (int i = start; i <= stop; i++) {
    			ANTLR3_UINT32 type = ops.at(i)->getType(ops.at(i));
    			ANTLR3_UINT32 currentRank = getOperatorPrecedence(type);
    			bool rightAssoc = isRightAssociative(type);
    			if (currentRank > pivotRank || (currentRank == pivotRank && rightAssoc)) {
    				pivot = i;
    				pivotRank = currentRank;
    			}
    		}
    		return pivot;
    	}
    	
    	pANTLR3_BASE_TREE createPrecedenceTree(
    		pKenshoParser ctx,
    		std::vector<pANTLR3_BASE_TREE> expressions,
    		std::vector<pANTLR3_COMMON_TOKEN> operators,
    		int start, 
    		int stop) {
    		if (stop == start) {
    			return expressions.at(start);
    		}
    		assert(expressions.size() > 0);
    		assert(operators.size() > 0);
    		assert(expressions.size() == operators.size() + 1);
    		
    		int pivot = findPivot( operators, start, stop - 1 );
    		pANTLR3_COMMON_TOKEN rootTok = ADAPTOR->createToken(ADAPTOR, BINOP, (uint8_t*)"BINOP");
    		pANTLR3_BASE_TREE root = (pANTLR3_BASE_TREE)ADAPTOR->nilNode(ADAPTOR);
    		root = (pANTLR3_BASE_TREE)ADAPTOR->becomeRootToken(
    			ADAPTOR, rootTok, root);	
    		//pANTLR3_BASE_TREE objRoot = (pANTLR3_BASE_TREE)ADAPTOR->nilNode(ADAPTOR);
    		//objRoot = (pANTLR3_BASE_TREE)ADAPTOR->becomeRootToken(
    		//	ADAPTOR, operators.at(pivot), objRoot);
    		//assert(objRoot != NULL);
    		ADAPTOR->addChildToken(ADAPTOR, root, operators.at(pivot));
    		ADAPTOR->addChild(ADAPTOR, root, createPrecedenceTree(
    			ctx, expressions, operators, start, pivot));
    		ADAPTOR->addChild(ADAPTOR, root, createPrecedenceTree(
    			ctx, expressions, operators, pivot + 1, stop));
    		return root;
    	} 
    	
    	pANTLR3_BASE_TREE createPrecedenceTree(
    		pKenshoParser ctx,
    		std::vector<pANTLR3_BASE_TREE> expressions,
    		std::vector<pANTLR3_COMMON_TOKEN> operators) {
    		return createPrecedenceTree(ctx, expressions, operators, 0, expressions.size() - 1);
    	}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_program863  */
static	ANTLR3_BITWORD FOLLOW_function_in_program863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001EF2) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_program863	= { FOLLOW_function_in_program863_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_function876  */
static	ANTLR3_BITWORD FOLLOW_signature_in_function876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_function876	= { FOLLOW_signature_in_function876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_L_in_function880  */
static	ANTLR3_BITWORD FOLLOW_BRACE_L_in_function880_bits[]	= { ANTLR3_UINT64_LIT(0x1F00003000067EF0) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_L_in_function880	= { FOLLOW_BRACE_L_in_function880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_function882  */
static	ANTLR3_BITWORD FOLLOW_statement_in_function882_bits[]	= { ANTLR3_UINT64_LIT(0x1F00003000067EF0) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_function882	= { FOLLOW_statement_in_function882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_R_in_function885  */
static	ANTLR3_BITWORD FOLLOW_BRACE_R_in_function885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_R_in_function885	= { FOLLOW_BRACE_R_in_function885_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_signature912  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_signature912_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_signature912	= { FOLLOW_functionType_in_signature912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_signature914  */
static	ANTLR3_BITWORD FOLLOW_ID_in_signature914_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_signature914	= { FOLLOW_ID_in_signature914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_signature918  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_signature918_bits[]	= { ANTLR3_UINT64_LIT(0x1000004000001EF0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_signature918	= { FOLLOW_PAREN_L_in_signature918_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_params_in_signature920  */
static	ANTLR3_BITWORD FOLLOW_params_in_signature920_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_params_in_signature920	= { FOLLOW_params_in_signature920_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_signature923  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_signature923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_signature923	= { FOLLOW_PAREN_R_in_signature923_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_VOID_in_functionType952  */
static	ANTLR3_BITWORD FOLLOW_T_VOID_in_functionType952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_VOID_in_functionType952	= { FOLLOW_T_VOID_in_functionType952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_functionType956  */
static	ANTLR3_BITWORD FOLLOW_type_in_functionType956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_functionType956	= { FOLLOW_type_in_functionType956_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params970  */
static	ANTLR3_BITWORD FOLLOW_type_in_params970_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params970	= { FOLLOW_type_in_params970_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params974  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params974_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params974	= { FOLLOW_ID_in_params974_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_params978  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_params978_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000001EF0) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_params978	= { FOLLOW_COMMA_in_params978_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params980  */
static	ANTLR3_BITWORD FOLLOW_type_in_params980_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params980	= { FOLLOW_type_in_params980_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params982  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params982_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params982	= { FOLLOW_ID_in_params982_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_statement1010  */
static	ANTLR3_BITWORD FOLLOW_variable_in_statement1010_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_statement1010	= { FOLLOW_variable_in_statement1010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement1012  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement1012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement1012	= { FOLLOW_SEMICOLON_in_statement1012_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_statement1018  */
static	ANTLR3_BITWORD FOLLOW_expression_in_statement1018_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_statement1018	= { FOLLOW_expression_in_statement1018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement1020  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement1020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement1020	= { FOLLOW_SEMICOLON_in_statement1020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variable1033  */
static	ANTLR3_BITWORD FOLLOW_type_in_variable1033_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variable1033	= { FOLLOW_type_in_variable1033_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable1037  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable1037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable1037	= { FOLLOW_ID_in_variable1037_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_ASSIGN_in_variable1041  */
static	ANTLR3_BITWORD FOLLOW_OP_ASSIGN_in_variable1041_bits[]	= { ANTLR3_UINT64_LIT(0x1F00002000067EF0) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_ASSIGN_in_variable1041	= { FOLLOW_OP_ASSIGN_in_variable1041_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_variable1043  */
static	ANTLR3_BITWORD FOLLOW_expression_in_variable1043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_variable1043	= { FOLLOW_expression_in_variable1043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_args1087  */
static	ANTLR3_BITWORD FOLLOW_expression_in_args1087_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_args1087	= { FOLLOW_expression_in_args1087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_args1091  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_args1091_bits[]	= { ANTLR3_UINT64_LIT(0x1F00002000067EF0) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_args1091	= { FOLLOW_COMMA_in_args1091_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_args1094  */
static	ANTLR3_BITWORD FOLLOW_expression_in_args1094_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_args1094	= { FOLLOW_expression_in_args1094_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type0	= { FOLLOW_set_in_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_expression1156  */
static	ANTLR3_BITWORD FOLLOW_primary_in_expression1156_bits[]	= { ANTLR3_UINT64_LIT(0x00000007FFF9E002) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_expression1156	= { FOLLOW_primary_in_expression1156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binop_in_expression1169  */
static	ANTLR3_BITWORD FOLLOW_binop_in_expression1169_bits[]	= { ANTLR3_UINT64_LIT(0x1F00002000067EF0) };
static  ANTLR3_BITSET_LIST FOLLOW_binop_in_expression1169	= { FOLLOW_binop_in_expression1169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_expression1173  */
static	ANTLR3_BITWORD FOLLOW_primary_in_expression1173_bits[]	= { ANTLR3_UINT64_LIT(0x00000007FFF9E002) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_expression1173	= { FOLLOW_primary_in_expression1173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_primary1206  */
static	ANTLR3_BITWORD FOLLOW_atom_in_primary1206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_primary1206	= { FOLLOW_atom_in_primary1206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unop_in_primary1211  */
static	ANTLR3_BITWORD FOLLOW_unop_in_primary1211_bits[]	= { ANTLR3_UINT64_LIT(0x1F00002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_unop_in_primary1211	= { FOLLOW_unop_in_primary1211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_primary1213  */
static	ANTLR3_BITWORD FOLLOW_atom_in_primary1213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_primary1213	= { FOLLOW_atom_in_primary1213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_atom1235  */
static	ANTLR3_BITWORD FOLLOW_literal_in_atom1235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_atom1235	= { FOLLOW_literal_in_atom1235_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_call_in_atom1248  */
static	ANTLR3_BITWORD FOLLOW_call_in_atom1248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_call_in_atom1248	= { FOLLOW_call_in_atom1248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_atom1253  */
static	ANTLR3_BITWORD FOLLOW_ID_in_atom1253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_atom1253	= { FOLLOW_ID_in_atom1253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_atom1258  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_atom1258_bits[]	= { ANTLR3_UINT64_LIT(0x1F00002000067EF0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_atom1258	= { FOLLOW_PAREN_L_in_atom1258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_atom1261  */
static	ANTLR3_BITWORD FOLLOW_expression_in_atom1261_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_atom1261	= { FOLLOW_expression_in_atom1261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_atom1263  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_atom1263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_atom1263	= { FOLLOW_PAREN_R_in_atom1263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_call1276  */
static	ANTLR3_BITWORD FOLLOW_ID_in_call1276_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_call1276	= { FOLLOW_ID_in_call1276_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_call1278  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_call1278_bits[]	= { ANTLR3_UINT64_LIT(0x1F00006000067EF0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_call1278	= { FOLLOW_PAREN_L_in_call1278_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_args_in_call1280  */
static	ANTLR3_BITWORD FOLLOW_args_in_call1280_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_args_in_call1280	= { FOLLOW_args_in_call1280_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_call1283  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_call1283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_call1283	= { FOLLOW_PAREN_R_in_call1283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unop0	= { FOLLOW_set_in_unop0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_binop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_binop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_binop0	= { FOLLOW_set_in_binop0_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * f:/dev/projects/kensho/docs/Kensho.g:255:1: program : ( function )* ;
 */
static KenshoParser_program_return
program(pKenshoParser ctx)
{   
    KenshoParser_program_return retval;

    pANTLR3_BASE_TREE root_0;

    KenshoParser_function_return function1;
    #undef	RETURN_TYPE_function1
    #define	RETURN_TYPE_function1 KenshoParser_function_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    function1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:256:2: ( ( function )* )
        // f:/dev/projects/kensho/docs/Kensho.g:256:4: ( function )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // f:/dev/projects/kensho/docs/Kensho.g:256:4: ( function )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (((LA1_0 >= T_BOOL) && (LA1_0 <= T_INT)) || ((LA1_0 >= T_LONG) && (LA1_0 <= T_VOID))) ) 
                    {
                        alt1=1;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:256:4: function
            	    {
            	        FOLLOWPUSH(FOLLOW_function_in_program863);
            	        function1=function(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, function1.tree);

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start function
 * f:/dev/projects/kensho/docs/Kensho.g:259:1: function : signature t= BRACE_L ( statement )* BRACE_R -> ^( FUNDEF[$t] signature ( statement )* ) ;
 */
static KenshoParser_function_return
function(pKenshoParser ctx)
{   
    KenshoParser_function_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    BRACE_R4;
    KenshoParser_signature_return signature2;
    #undef	RETURN_TYPE_signature2
    #define	RETURN_TYPE_signature2 KenshoParser_signature_return

    KenshoParser_statement_return statement3;
    #undef	RETURN_TYPE_statement3
    #define	RETURN_TYPE_statement3 KenshoParser_statement_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE BRACE_R4_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_signature;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    BRACE_R4       = NULL;
    signature2.tree = NULL;

    statement3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    BRACE_R4_tree   = NULL;

    stream_BRACE_L   = NULL;
    #define CREATE_stream_BRACE_L  if (stream_BRACE_L == NULL) {stream_BRACE_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_L"); } 
    stream_BRACE_R   = NULL;
    #define CREATE_stream_BRACE_R  if (stream_BRACE_R == NULL) {stream_BRACE_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_R"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_signature   = NULL;
    #define CREATE_stream_signature  if (stream_signature == NULL) {stream_signature = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule signature"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:260:2: ( signature t= BRACE_L ( statement )* BRACE_R -> ^( FUNDEF[$t] signature ( statement )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:260:4: signature t= BRACE_L ( statement )* BRACE_R
        {
            FOLLOWPUSH(FOLLOW_signature_in_function876);
            signature2=signature(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            CREATE_stream_signature; stream_signature->add(stream_signature, signature2.tree, NULL);
            t = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_L, &FOLLOW_BRACE_L_in_function880); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
             
            CREATE_stream_BRACE_L; stream_BRACE_L->add(stream_BRACE_L, t, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:260:24: ( statement )*

            for (;;)
            {
                int alt2=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (((LA2_0 >= T_BOOL) && (LA2_0 <= T_INT)) || ((LA2_0 >= T_LONG) && (LA2_0 <= T_DOUBLE)) || ((LA2_0 >= OP_ADD) && (LA2_0 <= OP_SUB)) || ((LA2_0 >= OP_NOT) && (LA2_0 <= OP_BIT_NOT)) || LA2_0 == PAREN_L || ((LA2_0 >= LITERAL_OCT) && (LA2_0 <= ID))) ) 
                    {
                        alt2=1;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:260:24: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_function882);
            	        statement3=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }

            	        CREATE_stream_statement; stream_statement->add(stream_statement, statement3.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */

            BRACE_R4 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_R, &FOLLOW_BRACE_R_in_function885); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
             
            CREATE_stream_BRACE_R; stream_BRACE_R->add(stream_BRACE_R, BRACE_R4, NULL);


             
            /* AST REWRITE
             * elements          : signature, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 261:3: -> ^( FUNDEF[$t] signature ( statement )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:261:6: ^( FUNDEF[$t] signature ( statement )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FUNDEF, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNDEF, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_signature == NULL ? NULL : stream_signature->nextTree(stream_signature));
            	        // f:/dev/projects/kensho/docs/Kensho.g:261:29: ( statement )*
            	        {
            	        	while ( (stream_statement != NULL && stream_statement->hasNext(stream_statement))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	if (stream_statement != NULL) stream_statement->reset(stream_statement);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BRACE_L != NULL) stream_BRACE_L->free(stream_BRACE_L);
        if (stream_BRACE_R != NULL) stream_BRACE_R->free(stream_BRACE_R);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_signature != NULL) stream_signature->free(stream_signature);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end function */

/** 
 * $ANTLR start signature
 * f:/dev/projects/kensho/docs/Kensho.g:264:1: signature : functionType ID t= PAREN_L ( params )? PAREN_R -> ^( FUNSIG[$t] functionType ID ( params )? ) ;
 */
static KenshoParser_signature_return
signature(pKenshoParser ctx)
{   
    KenshoParser_signature_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    ID6;
    pANTLR3_COMMON_TOKEN    PAREN_R8;
    KenshoParser_functionType_return functionType5;
    #undef	RETURN_TYPE_functionType5
    #define	RETURN_TYPE_functionType5 KenshoParser_functionType_return

    KenshoParser_params_return params7;
    #undef	RETURN_TYPE_params7
    #define	RETURN_TYPE_params7 KenshoParser_params_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE ID6_tree;
    pANTLR3_BASE_TREE PAREN_R8_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_params;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    ID6       = NULL;
    PAREN_R8       = NULL;
    functionType5.tree = NULL;

    params7.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    ID6_tree   = NULL;
    PAREN_R8_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_functionType   = NULL;
    #define CREATE_stream_functionType  if (stream_functionType == NULL) {stream_functionType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionType"); }
    stream_params   = NULL;
    #define CREATE_stream_params  if (stream_params == NULL) {stream_params = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule params"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:265:2: ( functionType ID t= PAREN_L ( params )? PAREN_R -> ^( FUNSIG[$t] functionType ID ( params )? ) )
        // f:/dev/projects/kensho/docs/Kensho.g:265:4: functionType ID t= PAREN_L ( params )? PAREN_R
        {
            FOLLOWPUSH(FOLLOW_functionType_in_signature912);
            functionType5=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            CREATE_stream_functionType; stream_functionType->add(stream_functionType, functionType5.tree, NULL);
            ID6 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_signature914); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID6, NULL);

            t = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_signature918); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
             
            CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, t, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:265:30: ( params )?
            {
                int alt3=2;
                {
                    int LA3_0 = LA(1);
                    if ( (((LA3_0 >= T_BOOL) && (LA3_0 <= T_INT)) || ((LA3_0 >= T_LONG) && (LA3_0 <= T_DOUBLE))) ) 
                    {
                        alt3=1;
                    }
                }
                switch (alt3) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:265:30: params
            	    {
            	        FOLLOWPUSH(FOLLOW_params_in_signature920);
            	        params7=params(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignatureEx;
            	        }

            	        CREATE_stream_params; stream_params->add(stream_params, params7.tree, NULL);

            	    }
            	    break;

                }
            }
            PAREN_R8 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_signature923); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
             
            CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R8, NULL);


             
            /* AST REWRITE
             * elements          : params, functionType, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 266:3: -> ^( FUNSIG[$t] functionType ID ( params )? )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:266:6: ^( FUNSIG[$t] functionType ID ( params )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FUNSIG, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNSIG, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionType == NULL ? NULL : stream_functionType->nextTree(stream_functionType));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:266:35: ( params )?
            	        {
            	        	if ( (stream_params != NULL && stream_params->hasNext(stream_params))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_params == NULL ? NULL : stream_params->nextTree(stream_params));

            	        	}
            	        	if ( stream_params != NULL) stream_params->reset(stream_params);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureEx; /* Prevent compiler warnings */
    rulesignatureEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_functionType != NULL) stream_functionType->free(stream_functionType);
        if (stream_params != NULL) stream_params->free(stream_params);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end signature */

/** 
 * $ANTLR start functionType
 * f:/dev/projects/kensho/docs/Kensho.g:269:1: functionType : ( T_VOID | type );
 */
static KenshoParser_functionType_return
functionType(pKenshoParser ctx)
{   
    KenshoParser_functionType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    T_VOID9;
    KenshoParser_type_return type10;
    #undef	RETURN_TYPE_type10
    #define	RETURN_TYPE_type10 KenshoParser_type_return

    pANTLR3_BASE_TREE T_VOID9_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    T_VOID9       = NULL;
    type10.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    T_VOID9_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:270:2: ( T_VOID | type )
            
            ANTLR3_UINT32 alt4;

            alt4=2;


            {
                int LA4_0 = LA(1);
                if ( (LA4_0 == T_VOID) ) 
                {
                    alt4=1;
                }
                else if ( (((LA4_0 >= T_BOOL) && (LA4_0 <= T_INT)) || ((LA4_0 >= T_LONG) && (LA4_0 <= T_DOUBLE))) ) 
                {
                    alt4=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 4;
                    EXCEPTION->state        = 0;


                    goto rulefunctionTypeEx;
                }
            }
            switch (alt4) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:270:4: T_VOID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        T_VOID9 = (pANTLR3_COMMON_TOKEN) MATCHT(T_VOID, &FOLLOW_T_VOID_in_functionType952); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        T_VOID9_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, T_VOID9));
        	        ADAPTOR->addChild(ADAPTOR, root_0, T_VOID9_tree);


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:270:13: type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_type_in_functionType956);
        	        type10=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, type10.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionTypeEx; /* Prevent compiler warnings */
    rulefunctionTypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end functionType */

/** 
 * $ANTLR start params
 * f:/dev/projects/kensho/docs/Kensho.g:273:1: params : type t= ID ( COMMA type ID )* -> ( ^( ARGDEF[$t] type ID ) )+ ;
 */
static KenshoParser_params_return
params(pKenshoParser ctx)
{   
    KenshoParser_params_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    COMMA12;
    pANTLR3_COMMON_TOKEN    ID14;
    KenshoParser_type_return type11;
    #undef	RETURN_TYPE_type11
    #define	RETURN_TYPE_type11 KenshoParser_type_return

    KenshoParser_type_return type13;
    #undef	RETURN_TYPE_type13
    #define	RETURN_TYPE_type13 KenshoParser_type_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE COMMA12_tree;
    pANTLR3_BASE_TREE ID14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    COMMA12       = NULL;
    ID14       = NULL;
    type11.tree = NULL;

    type13.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    COMMA12_tree   = NULL;
    ID14_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:274:2: ( type t= ID ( COMMA type ID )* -> ( ^( ARGDEF[$t] type ID ) )+ )
        // f:/dev/projects/kensho/docs/Kensho.g:274:4: type t= ID ( COMMA type ID )*
        {
            FOLLOWPUSH(FOLLOW_type_in_params970);
            type11=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            CREATE_stream_type; stream_type->add(stream_type, type11.tree, NULL);
            t = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_params974); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, t, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:274:14: ( COMMA type ID )*

            for (;;)
            {
                int alt5=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA5_0 = LA(1);
                    if ( (LA5_0 == COMMA) ) 
                    {
                        alt5=1;
                    }

                }
                switch (alt5) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:274:16: COMMA type ID
            	    {
            	        COMMA12 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_params978); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparamsEx;
            	        }
            	         
            	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA12, NULL);

            	        FOLLOWPUSH(FOLLOW_type_in_params980);
            	        type13=type(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparamsEx;
            	        }

            	        CREATE_stream_type; stream_type->add(stream_type, type13.tree, NULL);
            	        ID14 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_params982); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparamsEx;
            	        }
            	         
            	        CREATE_stream_ID; stream_ID->add(stream_ID, ID14, NULL);


            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : ID, type
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 275:3: -> ( ^( ARGDEF[$t] type ID ) )+
            	{
            	    if ((stream_ID == NULL || !stream_ID->hasNext(stream_ID)) || (stream_type == NULL || !stream_type->hasNext(stream_type))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_ID->hasNext(stream_ID)) || (stream_type->hasNext(stream_type))  ) {
            	    		// f:/dev/projects/kensho/docs/Kensho.g:275:6: ^( ARGDEF[$t] type ID )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	    		    #if 1 == 2
            	    		    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ARGDEF, TOKTEXT(t))
            	    		    #else
            	    		    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGDEF, (pANTLR3_UINT8)t)
            	    		    #endif
            	    		    , root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	stream_ID->reset(stream_ID);
            	    	stream_type->reset(stream_type);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparamsEx; /* Prevent compiler warnings */
    ruleparamsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_type != NULL) stream_type->free(stream_type);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end params */

/** 
 * $ANTLR start statement
 * f:/dev/projects/kensho/docs/Kensho.g:278:1: statement : ( variable SEMICOLON | expression SEMICOLON );
 */
static KenshoParser_statement_return
statement(pKenshoParser ctx)
{   
    KenshoParser_statement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SEMICOLON16;
    pANTLR3_COMMON_TOKEN    SEMICOLON18;
    KenshoParser_variable_return variable15;
    #undef	RETURN_TYPE_variable15
    #define	RETURN_TYPE_variable15 KenshoParser_variable_return

    KenshoParser_expression_return expression17;
    #undef	RETURN_TYPE_expression17
    #define	RETURN_TYPE_expression17 KenshoParser_expression_return

    pANTLR3_BASE_TREE SEMICOLON16_tree;
    pANTLR3_BASE_TREE SEMICOLON18_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    SEMICOLON16       = NULL;
    SEMICOLON18       = NULL;
    variable15.tree = NULL;

    expression17.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SEMICOLON16_tree   = NULL;
    SEMICOLON18_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:279:2: ( variable SEMICOLON | expression SEMICOLON )
            
            ANTLR3_UINT32 alt6;

            alt6=2;


            {
                int LA6_0 = LA(1);
                if ( (((LA6_0 >= T_BOOL) && (LA6_0 <= T_INT)) || ((LA6_0 >= T_LONG) && (LA6_0 <= T_DOUBLE))) ) 
                {
                    alt6=1;
                }
                else if ( (((LA6_0 >= OP_ADD) && (LA6_0 <= OP_SUB)) || ((LA6_0 >= OP_NOT) && (LA6_0 <= OP_BIT_NOT)) || LA6_0 == PAREN_L || ((LA6_0 >= LITERAL_OCT) && (LA6_0 <= ID))) ) 
                {
                    alt6=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 6;
                    EXCEPTION->state        = 0;


                    goto rulestatementEx;
                }
            }
            switch (alt6) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:279:4: variable SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variable_in_statement1010);
        	        variable15=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, variable15.tree);
        	        SEMICOLON16 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement1012); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:280:4: expression SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expression_in_statement1018);
        	        expression17=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expression17.tree);
        	        SEMICOLON18 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement1020); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start variable
 * f:/dev/projects/kensho/docs/Kensho.g:283:1: variable : type t= ID ( OP_ASSIGN expression )? -> ^( VARDEF[$t] type ID ) ( ^( BINOP OP_ASSIGN ID expression ) )? ;
 */
static KenshoParser_variable_return
variable(pKenshoParser ctx)
{   
    KenshoParser_variable_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    OP_ASSIGN20;
    KenshoParser_type_return type19;
    #undef	RETURN_TYPE_type19
    #define	RETURN_TYPE_type19 KenshoParser_type_return

    KenshoParser_expression_return expression21;
    #undef	RETURN_TYPE_expression21
    #define	RETURN_TYPE_expression21 KenshoParser_expression_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE OP_ASSIGN20_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_OP_ASSIGN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    OP_ASSIGN20       = NULL;
    type19.tree = NULL;

    expression21.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    OP_ASSIGN20_tree   = NULL;

    stream_OP_ASSIGN   = NULL;
    #define CREATE_stream_OP_ASSIGN  if (stream_OP_ASSIGN == NULL) {stream_OP_ASSIGN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token OP_ASSIGN"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:284:2: ( type t= ID ( OP_ASSIGN expression )? -> ^( VARDEF[$t] type ID ) ( ^( BINOP OP_ASSIGN ID expression ) )? )
        // f:/dev/projects/kensho/docs/Kensho.g:284:4: type t= ID ( OP_ASSIGN expression )?
        {
            FOLLOWPUSH(FOLLOW_type_in_variable1033);
            type19=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            CREATE_stream_type; stream_type->add(stream_type, type19.tree, NULL);
            t = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_variable1037); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, t, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:284:14: ( OP_ASSIGN expression )?
            {
                int alt7=2;
                {
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == OP_ASSIGN) ) 
                    {
                        alt7=1;
                    }
                }
                switch (alt7) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:284:16: OP_ASSIGN expression
            	    {
            	        OP_ASSIGN20 = (pANTLR3_COMMON_TOKEN) MATCHT(OP_ASSIGN, &FOLLOW_OP_ASSIGN_in_variable1041); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }
            	         
            	        CREATE_stream_OP_ASSIGN; stream_OP_ASSIGN->add(stream_OP_ASSIGN, OP_ASSIGN20, NULL);

            	        FOLLOWPUSH(FOLLOW_expression_in_variable1043);
            	        expression21=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }

            	        CREATE_stream_expression; stream_expression->add(stream_expression, expression21.tree, NULL);

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : ID, OP_ASSIGN, expression, type, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 285:3: -> ^( VARDEF[$t] type ID ) ( ^( BINOP OP_ASSIGN ID expression ) )?
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:285:7: ^( VARDEF[$t] type ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, VARDEF, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARDEF, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // f:/dev/projects/kensho/docs/Kensho.g:286:4: ( ^( BINOP OP_ASSIGN ID expression ) )?
            	    {
            	    	if ( (stream_OP_ASSIGN != NULL && stream_OP_ASSIGN->hasNext(stream_OP_ASSIGN)) || (stream_expression != NULL && stream_expression->hasNext(stream_expression)) || (stream_ID != NULL && stream_ID->hasNext(stream_ID))  )
            	    	{
            	    		// f:/dev/projects/kensho/docs/Kensho.g:286:4: ^( BINOP OP_ASSIGN ID expression )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BINOP, (pANTLR3_UINT8)"BINOP"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_OP_ASSIGN == NULL ? NULL : stream_OP_ASSIGN->nextNode(stream_OP_ASSIGN));
            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if ( stream_OP_ASSIGN != NULL) stream_OP_ASSIGN->reset(stream_OP_ASSIGN);
            	    	if ( stream_expression != NULL) stream_expression->reset(stream_expression);
            	    	if ( stream_ID != NULL) stream_ID->reset(stream_ID);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_OP_ASSIGN != NULL) stream_OP_ASSIGN->free(stream_OP_ASSIGN);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_type != NULL) stream_type->free(stream_type);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end variable */

/** 
 * $ANTLR start args
 * f:/dev/projects/kensho/docs/Kensho.g:289:1: args : expression ( COMMA expression )* ;
 */
static KenshoParser_args_return
args(pKenshoParser ctx)
{   
    KenshoParser_args_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA23;
    KenshoParser_expression_return expression22;
    #undef	RETURN_TYPE_expression22
    #define	RETURN_TYPE_expression22 KenshoParser_expression_return

    KenshoParser_expression_return expression24;
    #undef	RETURN_TYPE_expression24
    #define	RETURN_TYPE_expression24 KenshoParser_expression_return

    pANTLR3_BASE_TREE COMMA23_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA23       = NULL;
    expression22.tree = NULL;

    expression24.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    COMMA23_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:290:2: ( expression ( COMMA expression )* )
        // f:/dev/projects/kensho/docs/Kensho.g:290:4: expression ( COMMA expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_expression_in_args1087);
            expression22=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleargsEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, expression22.tree);

            // f:/dev/projects/kensho/docs/Kensho.g:290:15: ( COMMA expression )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == COMMA) ) 
                    {
                        alt8=1;
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:290:17: COMMA expression
            	    {
            	        COMMA23 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_args1091); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargsEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_expression_in_args1094);
            	        expression24=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargsEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, expression24.tree);

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargsEx; /* Prevent compiler warnings */
    ruleargsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end args */

/** 
 * $ANTLR start type
 * f:/dev/projects/kensho/docs/Kensho.g:293:1: type : ( T_BOOL | T_BYTE | T_SHORT | T_INT | T_LONG | T_FLOAT | T_DOUBLE );
 */
static KenshoParser_type_return
type(pKenshoParser ctx)
{   
    KenshoParser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set25;

    pANTLR3_BASE_TREE set25_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set25       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set25_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:294:2: ( T_BOOL | T_BYTE | T_SHORT | T_INT | T_LONG | T_FLOAT | T_DOUBLE )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set25=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= T_BOOL) && (LA(1) <= T_INT)) || ((LA(1) >= T_LONG) && (LA(1) <= T_DOUBLE)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set25)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_type0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type0);    goto ruletypeEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start expression
 * f:/dev/projects/kensho/docs/Kensho.g:303:1: expression : left= primary ( binop right= primary )* ->;
 */
static KenshoParser_expression_return
expression(pKenshoParser ctx)
{   
    KenshoParser_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    KenshoParser_primary_return left;
    #undef	RETURN_TYPE_left
    #define	RETURN_TYPE_left KenshoParser_primary_return

    KenshoParser_primary_return right;
    #undef	RETURN_TYPE_right
    #define	RETURN_TYPE_right KenshoParser_primary_return

    KenshoParser_binop_return binop26;
    #undef	RETURN_TYPE_binop26
    #define	RETURN_TYPE_binop26 KenshoParser_binop_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primary;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_binop;
    /* Initialize rule variables
     */


    root_0 = NULL;


    	std::vector<pANTLR3_BASE_TREE> expressions;
    	std::vector<pANTLR3_COMMON_TOKEN> operators;

    left.tree = NULL;

    right.tree = NULL;

    binop26.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_primary   = NULL;
    #define CREATE_stream_primary  if (stream_primary == NULL) {stream_primary = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primary"); }
    stream_binop   = NULL;
    #define CREATE_stream_binop  if (stream_binop == NULL) {stream_binop = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule binop"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:309:2: (left= primary ( binop right= primary )* ->)
        // f:/dev/projects/kensho/docs/Kensho.g:309:4: left= primary ( binop right= primary )*
        {
            FOLLOWPUSH(FOLLOW_primary_in_expression1156);
            left=primary(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }

            CREATE_stream_primary; stream_primary->add(stream_primary, left.tree, NULL);
            {
                 expressions.push_back((left.tree)); 
            }

            // f:/dev/projects/kensho/docs/Kensho.g:310:3: ( binop right= primary )*

            for (;;)
            {
                int alt9=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA9_0 = LA(1);
                    if ( (((LA9_0 >= OP_ADD) && (LA9_0 <= OP_DIV)) || ((LA9_0 >= OP_AND) && (LA9_0 <= OP_ASSIGN))) ) 
                    {
                        alt9=1;
                    }

                }
                switch (alt9) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:311:4: binop right= primary
            	    {
            	        FOLLOWPUSH(FOLLOW_binop_in_expression1169);
            	        binop26=binop(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }

            	        CREATE_stream_binop; stream_binop->add(stream_binop, binop26.tree, NULL);
            	        FOLLOWPUSH(FOLLOW_primary_in_expression1173);
            	        right=primary(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }

            	        CREATE_stream_primary; stream_primary->add(stream_primary, right.tree, NULL);
            	        {
            	             
            	            				operators.push_back((binop26.start)); 
            	            				expressions.push_back((right.tree)); 
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 318:3: ->
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0,  createPrecedenceTree(ctx, expressions, operators) );

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_primary != NULL) stream_primary->free(stream_primary);
        if (stream_binop != NULL) stream_binop->free(stream_binop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start primary
 * f:/dev/projects/kensho/docs/Kensho.g:321:1: primary : ( atom | unop atom -> ^( UNOP unop atom ) );
 */
static KenshoParser_primary_return
primary(pKenshoParser ctx)
{   
    KenshoParser_primary_return retval;

    pANTLR3_BASE_TREE root_0;

    KenshoParser_atom_return atom27;
    #undef	RETURN_TYPE_atom27
    #define	RETURN_TYPE_atom27 KenshoParser_atom_return

    KenshoParser_unop_return unop28;
    #undef	RETURN_TYPE_unop28
    #define	RETURN_TYPE_unop28 KenshoParser_unop_return

    KenshoParser_atom_return atom29;
    #undef	RETURN_TYPE_atom29
    #define	RETURN_TYPE_atom29 KenshoParser_atom_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_atom;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unop;
    /* Initialize rule variables
     */


    root_0 = NULL;

    atom27.tree = NULL;

    unop28.tree = NULL;

    atom29.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_atom   = NULL;
    #define CREATE_stream_atom  if (stream_atom == NULL) {stream_atom = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule atom"); }
    stream_unop   = NULL;
    #define CREATE_stream_unop  if (stream_unop == NULL) {stream_unop = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unop"); }

    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:322:2: ( atom | unop atom -> ^( UNOP unop atom ) )
            
            ANTLR3_UINT32 alt10;

            alt10=2;


            {
                int LA10_0 = LA(1);
                if ( (LA10_0 == PAREN_L || ((LA10_0 >= LITERAL_OCT) && (LA10_0 <= ID))) ) 
                {
                    alt10=1;
                }
                else if ( (((LA10_0 >= OP_ADD) && (LA10_0 <= OP_SUB)) || ((LA10_0 >= OP_NOT) && (LA10_0 <= OP_BIT_NOT))) ) 
                {
                    alt10=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 10;
                    EXCEPTION->state        = 0;


                    goto ruleprimaryEx;
                }
            }
            switch (alt10) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:322:4: atom
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_atom_in_primary1206);
        	        atom27=atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, atom27.tree);

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:323:4: unop atom
        	    {
        	        FOLLOWPUSH(FOLLOW_unop_in_primary1211);
        	        unop28=unop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        CREATE_stream_unop; stream_unop->add(stream_unop, unop28.tree, NULL);
        	        FOLLOWPUSH(FOLLOW_atom_in_primary1213);
        	        atom29=atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        CREATE_stream_atom; stream_atom->add(stream_atom, atom29.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : unop, atom
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 323:14: -> ^( UNOP unop atom )
        	        	{
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:323:17: ^( UNOP unop atom )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNOP, (pANTLR3_UINT8)"UNOP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unop == NULL ? NULL : stream_unop->nextTree(stream_unop));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_atom == NULL ? NULL : stream_atom->nextTree(stream_atom));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryEx; /* Prevent compiler warnings */
    ruleprimaryEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_atom != NULL) stream_atom->free(stream_atom);
        if (stream_unop != NULL) stream_unop->free(stream_unop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end primary */

/** 
 * $ANTLR start atom
 * f:/dev/projects/kensho/docs/Kensho.g:326:1: atom : ( literal -> ^( LIT literal ) | call | ID | PAREN_L expression PAREN_R );
 */
static KenshoParser_atom_return
atom(pKenshoParser ctx)
{   
    KenshoParser_atom_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID32;
    pANTLR3_COMMON_TOKEN    PAREN_L33;
    pANTLR3_COMMON_TOKEN    PAREN_R35;
    KenshoParser_literal_return literal30;
    #undef	RETURN_TYPE_literal30
    #define	RETURN_TYPE_literal30 KenshoParser_literal_return

    KenshoParser_call_return call31;
    #undef	RETURN_TYPE_call31
    #define	RETURN_TYPE_call31 KenshoParser_call_return

    KenshoParser_expression_return expression34;
    #undef	RETURN_TYPE_expression34
    #define	RETURN_TYPE_expression34 KenshoParser_expression_return

    pANTLR3_BASE_TREE ID32_tree;
    pANTLR3_BASE_TREE PAREN_L33_tree;
    pANTLR3_BASE_TREE PAREN_R35_tree;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_literal;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID32       = NULL;
    PAREN_L33       = NULL;
    PAREN_R35       = NULL;
    literal30.tree = NULL;

    call31.tree = NULL;

    expression34.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID32_tree   = NULL;
    PAREN_L33_tree   = NULL;
    PAREN_R35_tree   = NULL;

    stream_literal   = NULL;
    #define CREATE_stream_literal  if (stream_literal == NULL) {stream_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule literal"); }

    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:327:2: ( literal -> ^( LIT literal ) | call | ID | PAREN_L expression PAREN_R )
            
            ANTLR3_UINT32 alt11;

            alt11=4;

            switch ( LA(1) ) 
            {
            case LITERAL_OCT:
            case LITERAL_HEX:
            case LITERAL_INT:
            case LITERAL_FLOAT:
            	{
            		alt11=1;
            	}
                break;
            case ID:
            	{

            		{
            		    int LA11_2 = LA(2);
            		    if ( (LA11_2 == PAREN_L) ) 
            		    {
            		        alt11=2;
            		    }
            		    else if ( (((LA11_2 >= OP_ADD) && (LA11_2 <= OP_DIV)) || ((LA11_2 >= OP_AND) && (LA11_2 <= OP_ASSIGN)) || ((LA11_2 >= PAREN_R) && (LA11_2 <= SEMICOLON))) ) 
            		    {
            		        alt11=3;
            		    }
            		    else 
            		    {
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 11;
            		        EXCEPTION->state        = 2;


            		        goto ruleatomEx;
            		    }
            		}
            	}
                break;
            case PAREN_L:
            	{
            		alt11=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 11;
                EXCEPTION->state        = 0;


                goto ruleatomEx;
            }

            switch (alt11) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:327:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_atom1235);
        	        literal30=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        CREATE_stream_literal; stream_literal->add(stream_literal, literal30.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : literal
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 327:12: -> ^( LIT literal )
        	        	{
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:327:15: ^( LIT literal )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LIT, (pANTLR3_UINT8)"LIT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_literal == NULL ? NULL : stream_literal->nextTree(stream_literal));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:328:4: call
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_call_in_atom1248);
        	        call31=call(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, call31.tree);

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/Kensho.g:329:4: ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        ID32 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_atom1253); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        ID32_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID32));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ID32_tree);


        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/Kensho.g:330:4: PAREN_L expression PAREN_R
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        PAREN_L33 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_atom1258); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expression_in_atom1261);
        	        expression34=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expression34.tree);
        	        PAREN_R35 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_atom1263); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_literal != NULL) stream_literal->free(stream_literal);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end atom */

/** 
 * $ANTLR start call
 * f:/dev/projects/kensho/docs/Kensho.g:333:1: call : ID PAREN_L ( args )? PAREN_R -> ^( CALL ID ( args )* ) ;
 */
static KenshoParser_call_return
call(pKenshoParser ctx)
{   
    KenshoParser_call_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID36;
    pANTLR3_COMMON_TOKEN    PAREN_L37;
    pANTLR3_COMMON_TOKEN    PAREN_R39;
    KenshoParser_args_return args38;
    #undef	RETURN_TYPE_args38
    #define	RETURN_TYPE_args38 KenshoParser_args_return

    pANTLR3_BASE_TREE ID36_tree;
    pANTLR3_BASE_TREE PAREN_L37_tree;
    pANTLR3_BASE_TREE PAREN_R39_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_args;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID36       = NULL;
    PAREN_L37       = NULL;
    PAREN_R39       = NULL;
    args38.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID36_tree   = NULL;
    PAREN_L37_tree   = NULL;
    PAREN_R39_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_args   = NULL;
    #define CREATE_stream_args  if (stream_args == NULL) {stream_args = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule args"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:334:2: ( ID PAREN_L ( args )? PAREN_R -> ^( CALL ID ( args )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:334:4: ID PAREN_L ( args )? PAREN_R
        {
            ID36 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_call1276); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID36, NULL);

            PAREN_L37 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_call1278); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }
             
            CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L37, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:334:15: ( args )?
            {
                int alt12=2;
                {
                    int LA12_0 = LA(1);
                    if ( (((LA12_0 >= OP_ADD) && (LA12_0 <= OP_SUB)) || ((LA12_0 >= OP_NOT) && (LA12_0 <= OP_BIT_NOT)) || LA12_0 == PAREN_L || ((LA12_0 >= LITERAL_OCT) && (LA12_0 <= ID))) ) 
                    {
                        alt12=1;
                    }
                }
                switch (alt12) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:334:15: args
            	    {
            	        FOLLOWPUSH(FOLLOW_args_in_call1280);
            	        args38=args(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallEx;
            	        }

            	        CREATE_stream_args; stream_args->add(stream_args, args38.tree, NULL);

            	    }
            	    break;

                }
            }
            PAREN_R39 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_call1283); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }
             
            CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R39, NULL);


             
            /* AST REWRITE
             * elements          : ID, args
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 335:3: -> ^( CALL ID ( args )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:335:6: ^( CALL ID ( args )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:335:16: ( args )*
            	        {
            	        	while ( (stream_args != NULL && stream_args->hasNext(stream_args))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_args == NULL ? NULL : stream_args->nextTree(stream_args));

            	        	}
            	        	if (stream_args != NULL) stream_args->reset(stream_args);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallEx; /* Prevent compiler warnings */
    rulecallEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_args != NULL) stream_args->free(stream_args);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end call */

/** 
 * $ANTLR start literal
 * f:/dev/projects/kensho/docs/Kensho.g:338:1: literal : ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT );
 */
static KenshoParser_literal_return
literal(pKenshoParser ctx)
{   
    KenshoParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set40;

    pANTLR3_BASE_TREE set40_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set40       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set40_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:339:2: ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set40=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= LITERAL_OCT) && (LA(1) <= LITERAL_FLOAT)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set40)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start unop
 * f:/dev/projects/kensho/docs/Kensho.g:346:1: unop : ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT );
 */
static KenshoParser_unop_return
unop(pKenshoParser ctx)
{   
    KenshoParser_unop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set41;

    pANTLR3_BASE_TREE set41_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set41       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set41_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:347:2: ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set41=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_SUB)) || ((LA(1) >= OP_NOT) && (LA(1) <= OP_BIT_NOT)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set41)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_unop0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unop0);    goto ruleunopEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunopEx; /* Prevent compiler warnings */
    ruleunopEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end unop */

/** 
 * $ANTLR start binop
 * f:/dev/projects/kensho/docs/Kensho.g:353:1: binop : ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE );
 */
static KenshoParser_binop_return
binop(pKenshoParser ctx)
{   
    KenshoParser_binop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set42;

    pANTLR3_BASE_TREE set42_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set42       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set42_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:354:2: ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set42=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_DIV)) || ((LA(1) >= OP_AND) && (LA(1) <= OP_ASSIGN)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set42)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_binop0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_binop0);    goto rulebinopEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebinopEx; /* Prevent compiler warnings */
    rulebinopEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end binop */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
