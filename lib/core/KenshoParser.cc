/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : f:/dev/projects/kensho/docs/Kensho.g
 *     -                            On : 2009-10-05 01:26:48
 *     -                for the parser : KenshoParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "KenshoParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pKenshoParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pKenshoParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pKenshoParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pKenshoParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   KenshoParserTokenNames[77+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "T_BOOL",
        (pANTLR3_UINT8) "T_BYTE",
        (pANTLR3_UINT8) "T_SHORT",
        (pANTLR3_UINT8) "T_INT",
        (pANTLR3_UINT8) "T_CHAR",
        (pANTLR3_UINT8) "T_LONG",
        (pANTLR3_UINT8) "T_FLOAT",
        (pANTLR3_UINT8) "T_DOUBLE",
        (pANTLR3_UINT8) "T_VOID",
        (pANTLR3_UINT8) "OP_ADD",
        (pANTLR3_UINT8) "OP_SUB",
        (pANTLR3_UINT8) "OP_MUL",
        (pANTLR3_UINT8) "OP_DIV",
        (pANTLR3_UINT8) "OP_NOT",
        (pANTLR3_UINT8) "OP_BIT_NOT",
        (pANTLR3_UINT8) "OP_AND",
        (pANTLR3_UINT8) "OP_OR",
        (pANTLR3_UINT8) "OP_REM",
        (pANTLR3_UINT8) "OP_BIT_AND",
        (pANTLR3_UINT8) "OP_BIT_OR",
        (pANTLR3_UINT8) "OP_XOR",
        (pANTLR3_UINT8) "OP_SHIFT_L",
        (pANTLR3_UINT8) "OP_SHIFT_R",
        (pANTLR3_UINT8) "OP_USHIFT_R",
        (pANTLR3_UINT8) "CMP_EQ",
        (pANTLR3_UINT8) "CMP_NEQ",
        (pANTLR3_UINT8) "CMP_LT",
        (pANTLR3_UINT8) "CMP_GT",
        (pANTLR3_UINT8) "CMP_LTE",
        (pANTLR3_UINT8) "CMP_GTE",
        (pANTLR3_UINT8) "OP_ASSIGN",
        (pANTLR3_UINT8) "K_IF",
        (pANTLR3_UINT8) "K_ELSE",
        (pANTLR3_UINT8) "K_WHILE",
        (pANTLR3_UINT8) "LITERAL_TRUE",
        (pANTLR3_UINT8) "LITERAL_FALSE",
        (pANTLR3_UINT8) "K_NATIVE",
        (pANTLR3_UINT8) "K_RETURN",
        (pANTLR3_UINT8) "K_NEW",
        (pANTLR3_UINT8) "K_DELETE",
        (pANTLR3_UINT8) "K_STRUCT",
        (pANTLR3_UINT8) "K_STATIC",
        (pANTLR3_UINT8) "BRACE_L",
        (pANTLR3_UINT8) "BRACE_R",
        (pANTLR3_UINT8) "PAREN_L",
        (pANTLR3_UINT8) "PAREN_R",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "FUNDEF",
        (pANTLR3_UINT8) "FUNSIG",
        (pANTLR3_UINT8) "ARGDEF",
        (pANTLR3_UINT8) "BINOP",
        (pANTLR3_UINT8) "LIT",
        (pANTLR3_UINT8) "UNOP",
        (pANTLR3_UINT8) "VARDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "CAST",
        (pANTLR3_UINT8) "KENNIDEF",
        (pANTLR3_UINT8) "ELSEIF",
        (pANTLR3_UINT8) "STRUCTFUN",
        (pANTLR3_UINT8) "MODS",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LITERAL_INT",
        (pANTLR3_UINT8) "LITERAL_OCT",
        (pANTLR3_UINT8) "LITERAL_HEX",
        (pANTLR3_UINT8) "LITERAL_FLOAT",
        (pANTLR3_UINT8) "LITERAL_CHAR",
        (pANTLR3_UINT8) "OP_USHIFT_L",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "POSDIGIT",
        (pANTLR3_UINT8) "HEXDIGIT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "ESCSEQ",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "BLOCK_COMMENT"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static KenshoParser_program_return	program    (pKenshoParser ctx);
static KenshoParser_kenniFunction_return	kenniFunction    (pKenshoParser ctx);
static KenshoParser_function_return	function    (pKenshoParser ctx);
static KenshoParser_signature_return	signature    (pKenshoParser ctx);
static KenshoParser_functionType_return	functionType    (pKenshoParser ctx);
static KenshoParser_params_return	params    (pKenshoParser ctx);
static KenshoParser_structDecl_return	structDecl    (pKenshoParser ctx);
static KenshoParser_structBodyDecl_return	structBodyDecl    (pKenshoParser ctx);
static KenshoParser_structFunction_return	structFunction    (pKenshoParser ctx);
static KenshoParser_structFunMods_return	structFunMods    (pKenshoParser ctx);
static KenshoParser_statement_return	statement    (pKenshoParser ctx);
static KenshoParser_returnStatement_return	returnStatement    (pKenshoParser ctx);
static KenshoParser_block_return	block    (pKenshoParser ctx);
static KenshoParser_ifStat_return	ifStat    (pKenshoParser ctx);
static KenshoParser_elseIfStat_return	elseIfStat    (pKenshoParser ctx);
static KenshoParser_elseStat_return	elseStat    (pKenshoParser ctx);
static KenshoParser_whileStat_return	whileStat    (pKenshoParser ctx);
static KenshoParser_variable_return	variable    (pKenshoParser ctx);
static KenshoParser_args_return	args    (pKenshoParser ctx);
static KenshoParser_type_return	type    (pKenshoParser ctx);
static KenshoParser_expression_return	expression    (pKenshoParser ctx);
static KenshoParser_primary_return	primary    (pKenshoParser ctx);
static KenshoParser_atom_return	atom    (pKenshoParser ctx);
static KenshoParser_call_return	call    (pKenshoParser ctx);
static KenshoParser_literal_return	literal    (pKenshoParser ctx);
static KenshoParser_unop_return	unop    (pKenshoParser ctx);
static KenshoParser_binop_return	binop    (pKenshoParser ctx);
static void	KenshoParserFree(pKenshoParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "f:/dev/projects/kensho/docs/Kensho.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new KenshoParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoParser
KenshoParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return KenshoParserNewSSD(instream, NULL);
}

/** \brief Create a new KenshoParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoParser
KenshoParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pKenshoParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pKenshoParser) ANTLR3_CALLOC(1, sizeof(KenshoParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in KenshoParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our KenshoParser interface
     */
    ctx->program	= program;
    ctx->kenniFunction	= kenniFunction;
    ctx->function	= function;
    ctx->signature	= signature;
    ctx->functionType	= functionType;
    ctx->params	= params;
    ctx->structDecl	= structDecl;
    ctx->structBodyDecl	= structBodyDecl;
    ctx->structFunction	= structFunction;
    ctx->structFunMods	= structFunMods;
    ctx->statement	= statement;
    ctx->returnStatement	= returnStatement;
    ctx->block	= block;
    ctx->ifStat	= ifStat;
    ctx->elseIfStat	= elseIfStat;
    ctx->elseStat	= elseStat;
    ctx->whileStat	= whileStat;
    ctx->variable	= variable;
    ctx->args	= args;
    ctx->type	= type;
    ctx->expression	= expression;
    ctx->primary	= primary;
    ctx->atom	= atom;
    ctx->call	= call;
    ctx->literal	= literal;
    ctx->unop	= unop;
    ctx->binop	= binop;
    ctx->free			= KenshoParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    	RECOGNIZER->displayRecognitionError = kenshoAntlrErrorReporter;

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = KenshoParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 KenshoParserFree(pKenshoParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return KenshoParserTokenNames; 
}


    	extern "C" void kenshoAntlrErrorReporter(pANTLR3_BASE_RECOGNIZER rec, pANTLR3_UINT8* tokens) {
    		assert(rec->state->exception->message != NULL);
    	
    		std::string err((char*)rec->state->exception->message);
    		std::string exp(antlrTokenName(rec->state->exception->expecting));
    		
    		throw(kensho::ParseError(
    			err + ", expected " + exp, 
    			rec->state->exception->line,
    			rec->state->exception->charPositionInLine
    		));
    	}

    	char* antlrTokenName(int type) {
    		return (char*)KenshoParserTokenNames[type];
    	}
    	
    	bool isRightAssociative(ANTLR3_UINT32 type) {
    		switch (type) {
    			case OP_ASSIGN:
    				return true;
    		}
    		return false;
    	}
    	
    	ANTLR3_UINT32 getOperatorPrecedence(ANTLR3_UINT32 type) {
    		switch (type) {
    			// note: lowest number binds most tightly i.e. has highest precedence
    			case OP_MUL:
    			case OP_DIV:		
    			case OP_REM:		return 1;
    			
    			case OP_SUB:		return 2;
    			case OP_ADD:		return 3;
    			
    			case OP_SHIFT_L:
    			case OP_SHIFT_R:
    			case OP_USHIFT_R:	return 4;
    			
    			case CMP_LT:
    			case CMP_LTE:
    			case CMP_GT:	
    			case CMP_GTE:		return 5;
    				
    			case CMP_EQ:
    			case CMP_NEQ:		return 6;
    			
    			case OP_BIT_AND:	return 7;
    			case OP_XOR:		return 8;
    			case OP_BIT_OR:		return 9;
    				
    			case OP_AND:		return 10;
    			case OP_OR:			return 11;
    			
    			case OP_ASSIGN:		return 12;
    		
    			default:
    				// missing switch case
    				assert(false);
    				return 0;
    		}
    	}
    	
    	int findPivot(std::vector<pANTLR3_COMMON_TOKEN> ops, int start, int stop) {
    		int pivot = start;
    		ANTLR3_UINT32 pivotRank = getOperatorPrecedence(ops.at(pivot)->getType(ops.at(pivot)));
    		for (int i = start; i <= stop; i++) {
    			ANTLR3_UINT32 type = ops.at(i)->getType(ops.at(i));
    			ANTLR3_UINT32 currentRank = getOperatorPrecedence(type);
    			bool rightAssoc = isRightAssociative(type);
    			if (currentRank > pivotRank || (currentRank == pivotRank && rightAssoc)) {
    				pivot = i;
    				pivotRank = currentRank;
    			}
    		}
    		return pivot;
    	}
    	
    	pANTLR3_BASE_TREE createPrecedenceTree(
    		pKenshoParser ctx,
    		std::vector<pANTLR3_BASE_TREE> expressions,
    		std::vector<pANTLR3_COMMON_TOKEN> operators,
    		int start, 
    		int stop) {
    		if (stop == start) {
    			return expressions.at(start);
    		}
    		assert(expressions.size() > 0);
    		assert(operators.size() > 0);
    		assert(expressions.size() == operators.size() + 1);
    		
    		int pivot = findPivot( operators, start, stop - 1 );
    		pANTLR3_COMMON_TOKEN rootTok = ADAPTOR->createToken(ADAPTOR, BINOP, (uint8_t*)"BINOP");
    		pANTLR3_BASE_TREE root = (pANTLR3_BASE_TREE)ADAPTOR->nilNode(ADAPTOR);
    		root = (pANTLR3_BASE_TREE)ADAPTOR->becomeRootToken(
    			ADAPTOR, rootTok, root);	
    		ADAPTOR->addChildToken(ADAPTOR, root, operators.at(pivot));
    		ADAPTOR->addChild(ADAPTOR, root, createPrecedenceTree(
    			ctx, expressions, operators, start, pivot));
    		ADAPTOR->addChild(ADAPTOR, root, createPrecedenceTree(
    			ctx, expressions, operators, pivot + 1, stop));
    		return root;
    	} 
    	
    	pANTLR3_BASE_TREE createPrecedenceTree(
    		pKenshoParser ctx,
    		std::vector<pANTLR3_BASE_TREE> expressions,
    		std::vector<pANTLR3_COMMON_TOKEN> operators) {
    		return createPrecedenceTree(ctx, expressions, operators, 0, expressions.size() - 1);
    	}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_program651  */
static	ANTLR3_BITWORD FOLLOW_function_in_program651_bits[]	= { ANTLR3_UINT64_LIT(0x0000110000001FF2) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_program651	= { FOLLOW_function_in_program651_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_kenniFunction_in_program655  */
static	ANTLR3_BITWORD FOLLOW_kenniFunction_in_program655_bits[]	= { ANTLR3_UINT64_LIT(0x0000110000001FF2) };
static  ANTLR3_BITSET_LIST FOLLOW_kenniFunction_in_program655	= { FOLLOW_kenniFunction_in_program655_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structDecl_in_program659  */
static	ANTLR3_BITWORD FOLLOW_structDecl_in_program659_bits[]	= { ANTLR3_UINT64_LIT(0x0000110000001FF2) };
static  ANTLR3_BITSET_LIST FOLLOW_structDecl_in_program659	= { FOLLOW_structDecl_in_program659_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_NATIVE_in_kenniFunction676  */
static	ANTLR3_BITWORD FOLLOW_K_NATIVE_in_kenniFunction676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0) };
static  ANTLR3_BITSET_LIST FOLLOW_K_NATIVE_in_kenniFunction676	= { FOLLOW_K_NATIVE_in_kenniFunction676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_kenniFunction678  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_kenniFunction678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_kenniFunction678	= { FOLLOW_functionType_in_kenniFunction678_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_kenniFunction680  */
static	ANTLR3_BITWORD FOLLOW_ID_in_kenniFunction680_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_kenniFunction680	= { FOLLOW_ID_in_kenniFunction680_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_kenniFunction682  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_kenniFunction682_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000001FF0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_kenniFunction682	= { FOLLOW_PAREN_L_in_kenniFunction682_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_kenniFunction686  */
static	ANTLR3_BITWORD FOLLOW_type_in_kenniFunction686_bits[]	= { ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_kenniFunction686	= { FOLLOW_type_in_kenniFunction686_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_kenniFunction690  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_kenniFunction690_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_kenniFunction690	= { FOLLOW_COMMA_in_kenniFunction690_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_kenniFunction692  */
static	ANTLR3_BITWORD FOLLOW_type_in_kenniFunction692_bits[]	= { ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_kenniFunction692	= { FOLLOW_type_in_kenniFunction692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_kenniFunction700  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_kenniFunction700_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_kenniFunction700	= { FOLLOW_PAREN_R_in_kenniFunction700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_kenniFunction702  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_kenniFunction702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_kenniFunction702	= { FOLLOW_SEMICOLON_in_kenniFunction702_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_function730  */
static	ANTLR3_BITWORD FOLLOW_signature_in_function730_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_function730	= { FOLLOW_signature_in_function730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_L_in_function734  */
static	ANTLR3_BITWORD FOLLOW_BRACE_L_in_function734_bits[]	= { ANTLR3_UINT64_LIT(0x000182E800067FF0), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_L_in_function734	= { FOLLOW_BRACE_L_in_function734_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_function736  */
static	ANTLR3_BITWORD FOLLOW_statement_in_function736_bits[]	= { ANTLR3_UINT64_LIT(0x000182E800067FF0), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_function736	= { FOLLOW_statement_in_function736_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_R_in_function739  */
static	ANTLR3_BITWORD FOLLOW_BRACE_R_in_function739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_R_in_function739	= { FOLLOW_BRACE_R_in_function739_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_signature766  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_signature766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_signature766	= { FOLLOW_functionType_in_signature766_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_signature768  */
static	ANTLR3_BITWORD FOLLOW_ID_in_signature768_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_signature768	= { FOLLOW_ID_in_signature768_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_signature772  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_signature772_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000001FF0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_signature772	= { FOLLOW_PAREN_L_in_signature772_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_params_in_signature774  */
static	ANTLR3_BITWORD FOLLOW_params_in_signature774_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_params_in_signature774	= { FOLLOW_params_in_signature774_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_signature777  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_signature777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_signature777	= { FOLLOW_PAREN_R_in_signature777_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_VOID_in_functionType806  */
static	ANTLR3_BITWORD FOLLOW_T_VOID_in_functionType806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_VOID_in_functionType806	= { FOLLOW_T_VOID_in_functionType806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_functionType810  */
static	ANTLR3_BITWORD FOLLOW_type_in_functionType810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_functionType810	= { FOLLOW_type_in_functionType810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params824  */
static	ANTLR3_BITWORD FOLLOW_type_in_params824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params824	= { FOLLOW_type_in_params824_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params828  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params828_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params828	= { FOLLOW_ID_in_params828_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_params832  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_params832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_params832	= { FOLLOW_COMMA_in_params832_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params834  */
static	ANTLR3_BITWORD FOLLOW_type_in_params834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params834	= { FOLLOW_type_in_params834_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params836  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params836_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params836	= { FOLLOW_ID_in_params836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_STRUCT_in_structDecl865  */
static	ANTLR3_BITWORD FOLLOW_K_STRUCT_in_structDecl865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_K_STRUCT_in_structDecl865	= { FOLLOW_K_STRUCT_in_structDecl865_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_structDecl867  */
static	ANTLR3_BITWORD FOLLOW_ID_in_structDecl867_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_structDecl867	= { FOLLOW_ID_in_structDecl867_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_L_in_structDecl869  */
static	ANTLR3_BITWORD FOLLOW_BRACE_L_in_structDecl869_bits[]	= { ANTLR3_UINT64_LIT(0x0000A00000001FF0) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_L_in_structDecl869	= { FOLLOW_BRACE_L_in_structDecl869_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structBodyDecl_in_structDecl871  */
static	ANTLR3_BITWORD FOLLOW_structBodyDecl_in_structDecl871_bits[]	= { ANTLR3_UINT64_LIT(0x0000A00000001FF0) };
static  ANTLR3_BITSET_LIST FOLLOW_structBodyDecl_in_structDecl871	= { FOLLOW_structBodyDecl_in_structDecl871_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_R_in_structDecl874  */
static	ANTLR3_BITWORD FOLLOW_BRACE_R_in_structDecl874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_R_in_structDecl874	= { FOLLOW_BRACE_R_in_structDecl874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_structBodyDecl899  */
static	ANTLR3_BITWORD FOLLOW_variable_in_structBodyDecl899_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_structBodyDecl899	= { FOLLOW_variable_in_structBodyDecl899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_structBodyDecl901  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_structBodyDecl901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_structBodyDecl901	= { FOLLOW_SEMICOLON_in_structBodyDecl901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structFunction_in_structBodyDecl907  */
static	ANTLR3_BITWORD FOLLOW_structFunction_in_structBodyDecl907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structFunction_in_structBodyDecl907	= { FOLLOW_structFunction_in_structBodyDecl907_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structFunMods_in_structFunction919  */
static	ANTLR3_BITWORD FOLLOW_structFunMods_in_structFunction919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0) };
static  ANTLR3_BITSET_LIST FOLLOW_structFunMods_in_structFunction919	= { FOLLOW_structFunMods_in_structFunction919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_structFunction922  */
static	ANTLR3_BITWORD FOLLOW_signature_in_structFunction922_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_structFunction922	= { FOLLOW_signature_in_structFunction922_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_L_in_structFunction926  */
static	ANTLR3_BITWORD FOLLOW_BRACE_L_in_structFunction926_bits[]	= { ANTLR3_UINT64_LIT(0x000182E800067FF0), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_L_in_structFunction926	= { FOLLOW_BRACE_L_in_structFunction926_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_structFunction928  */
static	ANTLR3_BITWORD FOLLOW_statement_in_structFunction928_bits[]	= { ANTLR3_UINT64_LIT(0x000182E800067FF0), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_structFunction928	= { FOLLOW_statement_in_structFunction928_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_R_in_structFunction931  */
static	ANTLR3_BITWORD FOLLOW_BRACE_R_in_structFunction931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_R_in_structFunction931	= { FOLLOW_BRACE_R_in_structFunction931_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_STATIC_in_structFunMods964  */
static	ANTLR3_BITWORD FOLLOW_K_STATIC_in_structFunMods964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_K_STATIC_in_structFunMods964	= { FOLLOW_K_STATIC_in_structFunMods964_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_statement975  */
static	ANTLR3_BITWORD FOLLOW_variable_in_statement975_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_statement975	= { FOLLOW_variable_in_statement975_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement977  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement977	= { FOLLOW_SEMICOLON_in_statement977_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_statement983  */
static	ANTLR3_BITWORD FOLLOW_expression_in_statement983_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_statement983	= { FOLLOW_expression_in_statement983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement985  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement985	= { FOLLOW_SEMICOLON_in_statement985_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStat_in_statement991  */
static	ANTLR3_BITWORD FOLLOW_ifStat_in_statement991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStat_in_statement991	= { FOLLOW_ifStat_in_statement991_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStat_in_statement996  */
static	ANTLR3_BITWORD FOLLOW_whileStat_in_statement996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStat_in_statement996	= { FOLLOW_whileStat_in_statement996_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1001  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1001_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1001	= { FOLLOW_returnStatement_in_statement1001_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement1003  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement1003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement1003	= { FOLLOW_SEMICOLON_in_statement1003_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_RETURN_in_returnStatement1016  */
static	ANTLR3_BITWORD FOLLOW_K_RETURN_in_returnStatement1016_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066002), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_K_RETURN_in_returnStatement1016	= { FOLLOW_K_RETURN_in_returnStatement1016_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement1018  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement1018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement1018	= { FOLLOW_expression_in_returnStatement1018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_L_in_block1042  */
static	ANTLR3_BITWORD FOLLOW_BRACE_L_in_block1042_bits[]	= { ANTLR3_UINT64_LIT(0x000182E800067FF0), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_L_in_block1042	= { FOLLOW_BRACE_L_in_block1042_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_block1045  */
static	ANTLR3_BITWORD FOLLOW_statement_in_block1045_bits[]	= { ANTLR3_UINT64_LIT(0x000182E800067FF0), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_block1045	= { FOLLOW_statement_in_block1045_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BRACE_R_in_block1048  */
static	ANTLR3_BITWORD FOLLOW_BRACE_R_in_block1048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BRACE_R_in_block1048	= { FOLLOW_BRACE_R_in_block1048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_IF_in_ifStat1062  */
static	ANTLR3_BITWORD FOLLOW_K_IF_in_ifStat1062_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_IF_in_ifStat1062	= { FOLLOW_K_IF_in_ifStat1062_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_ifStat1064  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_ifStat1064_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_ifStat1064	= { FOLLOW_PAREN_L_in_ifStat1064_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStat1066  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStat1066_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStat1066	= { FOLLOW_expression_in_ifStat1066_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_ifStat1068  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_ifStat1068_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_ifStat1068	= { FOLLOW_PAREN_R_in_ifStat1068_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_ifStat1070  */
static	ANTLR3_BITWORD FOLLOW_block_in_ifStat1070_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_ifStat1070	= { FOLLOW_block_in_ifStat1070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseIfStat_in_ifStat1075  */
static	ANTLR3_BITWORD FOLLOW_elseIfStat_in_ifStat1075_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_elseIfStat_in_ifStat1075	= { FOLLOW_elseIfStat_in_ifStat1075_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseStat_in_ifStat1080  */
static	ANTLR3_BITWORD FOLLOW_elseStat_in_ifStat1080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_elseStat_in_ifStat1080	= { FOLLOW_elseStat_in_ifStat1080_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_ELSE_in_elseIfStat1130  */
static	ANTLR3_BITWORD FOLLOW_K_ELSE_in_elseIfStat1130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_ELSE_in_elseIfStat1130	= { FOLLOW_K_ELSE_in_elseIfStat1130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_IF_in_elseIfStat1133  */
static	ANTLR3_BITWORD FOLLOW_K_IF_in_elseIfStat1133_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_IF_in_elseIfStat1133	= { FOLLOW_K_IF_in_elseIfStat1133_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_elseIfStat1136  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_elseIfStat1136_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_elseIfStat1136	= { FOLLOW_PAREN_L_in_elseIfStat1136_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_elseIfStat1139  */
static	ANTLR3_BITWORD FOLLOW_expression_in_elseIfStat1139_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_elseIfStat1139	= { FOLLOW_expression_in_elseIfStat1139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_elseIfStat1141  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_elseIfStat1141_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_elseIfStat1141	= { FOLLOW_PAREN_R_in_elseIfStat1141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_elseIfStat1144  */
static	ANTLR3_BITWORD FOLLOW_block_in_elseIfStat1144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_elseIfStat1144	= { FOLLOW_block_in_elseIfStat1144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_ELSE_in_elseStat1155  */
static	ANTLR3_BITWORD FOLLOW_K_ELSE_in_elseStat1155_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_ELSE_in_elseStat1155	= { FOLLOW_K_ELSE_in_elseStat1155_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_elseStat1158  */
static	ANTLR3_BITWORD FOLLOW_block_in_elseStat1158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_elseStat1158	= { FOLLOW_block_in_elseStat1158_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_WHILE_in_whileStat1169  */
static	ANTLR3_BITWORD FOLLOW_K_WHILE_in_whileStat1169_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_K_WHILE_in_whileStat1169	= { FOLLOW_K_WHILE_in_whileStat1169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_whileStat1172  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_whileStat1172_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_whileStat1172	= { FOLLOW_PAREN_L_in_whileStat1172_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStat1175  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStat1175_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStat1175	= { FOLLOW_expression_in_whileStat1175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_whileStat1177  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_whileStat1177_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_whileStat1177	= { FOLLOW_PAREN_R_in_whileStat1177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_whileStat1180  */
static	ANTLR3_BITWORD FOLLOW_block_in_whileStat1180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_whileStat1180	= { FOLLOW_block_in_whileStat1180_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variable1193  */
static	ANTLR3_BITWORD FOLLOW_type_in_variable1193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variable1193	= { FOLLOW_type_in_variable1193_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable1197  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable1197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable1197	= { FOLLOW_ID_in_variable1197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_ASSIGN_in_variable1201  */
static	ANTLR3_BITWORD FOLLOW_OP_ASSIGN_in_variable1201_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_ASSIGN_in_variable1201	= { FOLLOW_OP_ASSIGN_in_variable1201_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_variable1203  */
static	ANTLR3_BITWORD FOLLOW_expression_in_variable1203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_variable1203	= { FOLLOW_expression_in_variable1203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_args1247  */
static	ANTLR3_BITWORD FOLLOW_expression_in_args1247_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_args1247	= { FOLLOW_expression_in_args1247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_args1251  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_args1251_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_args1251	= { FOLLOW_COMMA_in_args1251_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_args1254  */
static	ANTLR3_BITWORD FOLLOW_expression_in_args1254_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_args1254	= { FOLLOW_expression_in_args1254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type0	= { FOLLOW_set_in_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_expression1321  */
static	ANTLR3_BITWORD FOLLOW_primary_in_expression1321_bits[]	= { ANTLR3_UINT64_LIT(0x00000007FFF9E002), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_expression1321	= { FOLLOW_primary_in_expression1321_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binop_in_expression1334  */
static	ANTLR3_BITWORD FOLLOW_binop_in_expression1334_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_binop_in_expression1334	= { FOLLOW_binop_in_expression1334_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_expression1338  */
static	ANTLR3_BITWORD FOLLOW_primary_in_expression1338_bits[]	= { ANTLR3_UINT64_LIT(0x00000007FFF9E002), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_expression1338	= { FOLLOW_primary_in_expression1338_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_primary1371  */
static	ANTLR3_BITWORD FOLLOW_atom_in_primary1371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_primary1371	= { FOLLOW_atom_in_primary1371_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_primary1376  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_primary1376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001FF0) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_primary1376	= { FOLLOW_PAREN_L_in_primary1376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_primary1378  */
static	ANTLR3_BITWORD FOLLOW_type_in_primary1378_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_primary1378	= { FOLLOW_type_in_primary1378_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_primary1380  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_primary1380_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_primary1380	= { FOLLOW_PAREN_R_in_primary1380_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_primary1382  */
static	ANTLR3_BITWORD FOLLOW_atom_in_primary1382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_primary1382	= { FOLLOW_atom_in_primary1382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_atom1404  */
static	ANTLR3_BITWORD FOLLOW_literal_in_atom1404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_atom1404	= { FOLLOW_literal_in_atom1404_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_call_in_atom1417  */
static	ANTLR3_BITWORD FOLLOW_call_in_atom1417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_call_in_atom1417	= { FOLLOW_call_in_atom1417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_atom1422  */
static	ANTLR3_BITWORD FOLLOW_ID_in_atom1422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_atom1422	= { FOLLOW_ID_in_atom1422_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_atom1427  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_atom1427_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_atom1427	= { FOLLOW_PAREN_L_in_atom1427_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_atom1430  */
static	ANTLR3_BITWORD FOLLOW_expression_in_atom1430_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_atom1430	= { FOLLOW_expression_in_atom1430_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_atom1432  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_atom1432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_atom1432	= { FOLLOW_PAREN_R_in_atom1432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unop_in_atom1438  */
static	ANTLR3_BITWORD FOLLOW_unop_in_atom1438_bits[]	= { ANTLR3_UINT64_LIT(0x000100C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_unop_in_atom1438	= { FOLLOW_unop_in_atom1438_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_atom1440  */
static	ANTLR3_BITWORD FOLLOW_atom_in_atom1440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_atom1440	= { FOLLOW_atom_in_atom1440_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_call1462  */
static	ANTLR3_BITWORD FOLLOW_ID_in_call1462_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_call1462	= { FOLLOW_ID_in_call1462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_L_in_call1464  */
static	ANTLR3_BITWORD FOLLOW_PAREN_L_in_call1464_bits[]	= { ANTLR3_UINT64_LIT(0x000300C000066000), ANTLR3_UINT64_LIT(0x000000000000007E) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_L_in_call1464	= { FOLLOW_PAREN_L_in_call1464_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_args_in_call1466  */
static	ANTLR3_BITWORD FOLLOW_args_in_call1466_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_args_in_call1466	= { FOLLOW_args_in_call1466_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAREN_R_in_call1469  */
static	ANTLR3_BITWORD FOLLOW_PAREN_R_in_call1469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PAREN_R_in_call1469	= { FOLLOW_PAREN_R_in_call1469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unop0	= { FOLLOW_set_in_unop0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_binop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_binop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_binop0	= { FOLLOW_set_in_binop0_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * f:/dev/projects/kensho/docs/Kensho.g:237:1: program : ( function | kenniFunction | structDecl )* ;
 */
static KenshoParser_program_return
program(pKenshoParser ctx)
{   
    KenshoParser_program_return retval;

    pANTLR3_BASE_TREE root_0;

    KenshoParser_function_return function1;
    #undef	RETURN_TYPE_function1
    #define	RETURN_TYPE_function1 KenshoParser_function_return

    KenshoParser_kenniFunction_return kenniFunction2;
    #undef	RETURN_TYPE_kenniFunction2
    #define	RETURN_TYPE_kenniFunction2 KenshoParser_kenniFunction_return

    KenshoParser_structDecl_return structDecl3;
    #undef	RETURN_TYPE_structDecl3
    #define	RETURN_TYPE_structDecl3 KenshoParser_structDecl_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    function1.tree = NULL;

    kenniFunction2.tree = NULL;

    structDecl3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:238:2: ( ( function | kenniFunction | structDecl )* )
        // f:/dev/projects/kensho/docs/Kensho.g:238:4: ( function | kenniFunction | structDecl )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // f:/dev/projects/kensho/docs/Kensho.g:238:4: ( function | kenniFunction | structDecl )*

            for (;;)
            {
                int alt1=4;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case T_VOID:
                	{
                		alt1=1;
                	}
                    break;
                case K_NATIVE:
                	{
                		alt1=2;
                	}
                    break;
                case K_STRUCT:
                	{
                		alt1=3;
                	}
                    break;

                }

                switch (alt1) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:238:6: function
            	    {
            	        FOLLOWPUSH(FOLLOW_function_in_program651);
            	        function1=function(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, function1.tree);

            	    }
            	    break;
            	case 2:
            	    // f:/dev/projects/kensho/docs/Kensho.g:238:17: kenniFunction
            	    {
            	        FOLLOWPUSH(FOLLOW_kenniFunction_in_program655);
            	        kenniFunction2=kenniFunction(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, kenniFunction2.tree);

            	    }
            	    break;
            	case 3:
            	    // f:/dev/projects/kensho/docs/Kensho.g:238:33: structDecl
            	    {
            	        FOLLOWPUSH(FOLLOW_structDecl_in_program659);
            	        structDecl3=structDecl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, structDecl3.tree);

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start kenniFunction
 * f:/dev/projects/kensho/docs/Kensho.g:241:1: kenniFunction : t= K_NATIVE functionType ID PAREN_L ( type ( COMMA type )* )? PAREN_R SEMICOLON -> ^( KENNIDEF[$t] functionType ID ( type )* ) ;
 */
static KenshoParser_kenniFunction_return
kenniFunction(pKenshoParser ctx)
{   
    KenshoParser_kenniFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    ID5;
    pANTLR3_COMMON_TOKEN    PAREN_L6;
    pANTLR3_COMMON_TOKEN    COMMA8;
    pANTLR3_COMMON_TOKEN    PAREN_R10;
    pANTLR3_COMMON_TOKEN    SEMICOLON11;
    KenshoParser_functionType_return functionType4;
    #undef	RETURN_TYPE_functionType4
    #define	RETURN_TYPE_functionType4 KenshoParser_functionType_return

    KenshoParser_type_return type7;
    #undef	RETURN_TYPE_type7
    #define	RETURN_TYPE_type7 KenshoParser_type_return

    KenshoParser_type_return type9;
    #undef	RETURN_TYPE_type9
    #define	RETURN_TYPE_type9 KenshoParser_type_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE ID5_tree;
    pANTLR3_BASE_TREE PAREN_L6_tree;
    pANTLR3_BASE_TREE COMMA8_tree;
    pANTLR3_BASE_TREE PAREN_R10_tree;
    pANTLR3_BASE_TREE SEMICOLON11_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_NATIVE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    ID5       = NULL;
    PAREN_L6       = NULL;
    COMMA8       = NULL;
    PAREN_R10       = NULL;
    SEMICOLON11       = NULL;
    functionType4.tree = NULL;

    type7.tree = NULL;

    type9.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    ID5_tree   = NULL;
    PAREN_L6_tree   = NULL;
    COMMA8_tree   = NULL;
    PAREN_R10_tree   = NULL;
    SEMICOLON11_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_K_NATIVE   = NULL;
    #define CREATE_stream_K_NATIVE  if (stream_K_NATIVE == NULL) {stream_K_NATIVE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_NATIVE"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_functionType   = NULL;
    #define CREATE_stream_functionType  if (stream_functionType == NULL) {stream_functionType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionType"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:242:2: (t= K_NATIVE functionType ID PAREN_L ( type ( COMMA type )* )? PAREN_R SEMICOLON -> ^( KENNIDEF[$t] functionType ID ( type )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:242:4: t= K_NATIVE functionType ID PAREN_L ( type ( COMMA type )* )? PAREN_R SEMICOLON
        {
            t = (pANTLR3_COMMON_TOKEN) MATCHT(K_NATIVE, &FOLLOW_K_NATIVE_in_kenniFunction676); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
             
            CREATE_stream_K_NATIVE; stream_K_NATIVE->add(stream_K_NATIVE, t, NULL);

            FOLLOWPUSH(FOLLOW_functionType_in_kenniFunction678);
            functionType4=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            CREATE_stream_functionType; stream_functionType->add(stream_functionType, functionType4.tree, NULL);
            ID5 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_kenniFunction680); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID5, NULL);

            PAREN_L6 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_kenniFunction682); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
             
            CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L6, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:242:39: ( type ( COMMA type )* )?
            {
                int alt3=2;
                switch ( LA(1) ) 
                {
                    case T_BOOL:
                    case T_BYTE:
                    case T_SHORT:
                    case T_INT:
                    case T_CHAR:
                    case T_LONG:
                    case T_FLOAT:
                    case T_DOUBLE:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:242:41: type ( COMMA type )*
            	    {
            	        FOLLOWPUSH(FOLLOW_type_in_kenniFunction686);
            	        type7=type(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulekenniFunctionEx;
            	        }

            	        CREATE_stream_type; stream_type->add(stream_type, type7.tree, NULL);

            	        // f:/dev/projects/kensho/docs/Kensho.g:242:46: ( COMMA type )*

            	        for (;;)
            	        {
            	            int alt2=2;
            	            switch ( LA(1) ) 
            	            {
            	            case COMMA:
            	            	{
            	            		alt2=1;
            	            	}
            	                break;

            	            }

            	            switch (alt2) 
            	            {
            	        	case 1:
            	        	    // f:/dev/projects/kensho/docs/Kensho.g:242:48: COMMA type
            	        	    {
            	        	        COMMA8 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_kenniFunction690); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulekenniFunctionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA8, NULL);

            	        	        FOLLOWPUSH(FOLLOW_type_in_kenniFunction692);
            	        	        type9=type(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulekenniFunctionEx;
            	        	        }

            	        	        CREATE_stream_type; stream_type->add(stream_type, type9.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop2;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop2: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }
            PAREN_R10 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_kenniFunction700); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
             
            CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R10, NULL);

            SEMICOLON11 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_kenniFunction702); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }
             
            CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON11, NULL);


             
            /* AST REWRITE
             * elements          : ID, functionType, type
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 243:2: -> ^( KENNIDEF[$t] functionType ID ( type )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:243:5: ^( KENNIDEF[$t] functionType ID ( type )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, KENNIDEF, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, KENNIDEF, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionType == NULL ? NULL : stream_functionType->nextTree(stream_functionType));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:243:36: ( type )*
            	        {
            	        	while ( (stream_type != NULL && stream_type->hasNext(stream_type))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));

            	        	}
            	        	if (stream_type != NULL) stream_type->reset(stream_type);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulekenniFunctionEx; /* Prevent compiler warnings */
    rulekenniFunctionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_K_NATIVE != NULL) stream_K_NATIVE->free(stream_K_NATIVE);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_functionType != NULL) stream_functionType->free(stream_functionType);
        if (stream_type != NULL) stream_type->free(stream_type);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end kenniFunction */

/** 
 * $ANTLR start function
 * f:/dev/projects/kensho/docs/Kensho.g:246:1: function : signature t= BRACE_L ( statement )* BRACE_R -> ^( FUNDEF[$t] signature ( statement )* ) ;
 */
static KenshoParser_function_return
function(pKenshoParser ctx)
{   
    KenshoParser_function_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    BRACE_R14;
    KenshoParser_signature_return signature12;
    #undef	RETURN_TYPE_signature12
    #define	RETURN_TYPE_signature12 KenshoParser_signature_return

    KenshoParser_statement_return statement13;
    #undef	RETURN_TYPE_statement13
    #define	RETURN_TYPE_statement13 KenshoParser_statement_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE BRACE_R14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_signature;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    BRACE_R14       = NULL;
    signature12.tree = NULL;

    statement13.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    BRACE_R14_tree   = NULL;

    stream_BRACE_L   = NULL;
    #define CREATE_stream_BRACE_L  if (stream_BRACE_L == NULL) {stream_BRACE_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_L"); } 
    stream_BRACE_R   = NULL;
    #define CREATE_stream_BRACE_R  if (stream_BRACE_R == NULL) {stream_BRACE_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_R"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_signature   = NULL;
    #define CREATE_stream_signature  if (stream_signature == NULL) {stream_signature = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule signature"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:247:2: ( signature t= BRACE_L ( statement )* BRACE_R -> ^( FUNDEF[$t] signature ( statement )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:247:4: signature t= BRACE_L ( statement )* BRACE_R
        {
            FOLLOWPUSH(FOLLOW_signature_in_function730);
            signature12=signature(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            CREATE_stream_signature; stream_signature->add(stream_signature, signature12.tree, NULL);
            t = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_L, &FOLLOW_BRACE_L_in_function734); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
             
            CREATE_stream_BRACE_L; stream_BRACE_L->add(stream_BRACE_L, t, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:247:24: ( statement )*

            for (;;)
            {
                int alt4=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case OP_ADD:
                case OP_SUB:
                case OP_NOT:
                case OP_BIT_NOT:
                case K_IF:
                case K_WHILE:
                case LITERAL_TRUE:
                case LITERAL_FALSE:
                case K_RETURN:
                case PAREN_L:
                case ID:
                case LITERAL_INT:
                case LITERAL_OCT:
                case LITERAL_HEX:
                case LITERAL_FLOAT:
                case LITERAL_CHAR:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:247:24: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_function736);
            	        statement13=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }

            	        CREATE_stream_statement; stream_statement->add(stream_statement, statement13.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */

            BRACE_R14 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_R, &FOLLOW_BRACE_R_in_function739); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
             
            CREATE_stream_BRACE_R; stream_BRACE_R->add(stream_BRACE_R, BRACE_R14, NULL);


             
            /* AST REWRITE
             * elements          : signature, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 248:3: -> ^( FUNDEF[$t] signature ( statement )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:248:6: ^( FUNDEF[$t] signature ( statement )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FUNDEF, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNDEF, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_signature == NULL ? NULL : stream_signature->nextTree(stream_signature));
            	        // f:/dev/projects/kensho/docs/Kensho.g:248:29: ( statement )*
            	        {
            	        	while ( (stream_statement != NULL && stream_statement->hasNext(stream_statement))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	if (stream_statement != NULL) stream_statement->reset(stream_statement);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BRACE_L != NULL) stream_BRACE_L->free(stream_BRACE_L);
        if (stream_BRACE_R != NULL) stream_BRACE_R->free(stream_BRACE_R);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_signature != NULL) stream_signature->free(stream_signature);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end function */

/** 
 * $ANTLR start signature
 * f:/dev/projects/kensho/docs/Kensho.g:251:1: signature : functionType ID t= PAREN_L ( params )? PAREN_R -> ^( FUNSIG[$t] functionType ID ( params )? ) ;
 */
static KenshoParser_signature_return
signature(pKenshoParser ctx)
{   
    KenshoParser_signature_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    ID16;
    pANTLR3_COMMON_TOKEN    PAREN_R18;
    KenshoParser_functionType_return functionType15;
    #undef	RETURN_TYPE_functionType15
    #define	RETURN_TYPE_functionType15 KenshoParser_functionType_return

    KenshoParser_params_return params17;
    #undef	RETURN_TYPE_params17
    #define	RETURN_TYPE_params17 KenshoParser_params_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE ID16_tree;
    pANTLR3_BASE_TREE PAREN_R18_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_params;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    ID16       = NULL;
    PAREN_R18       = NULL;
    functionType15.tree = NULL;

    params17.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    ID16_tree   = NULL;
    PAREN_R18_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_functionType   = NULL;
    #define CREATE_stream_functionType  if (stream_functionType == NULL) {stream_functionType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionType"); }
    stream_params   = NULL;
    #define CREATE_stream_params  if (stream_params == NULL) {stream_params = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule params"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:252:2: ( functionType ID t= PAREN_L ( params )? PAREN_R -> ^( FUNSIG[$t] functionType ID ( params )? ) )
        // f:/dev/projects/kensho/docs/Kensho.g:252:4: functionType ID t= PAREN_L ( params )? PAREN_R
        {
            FOLLOWPUSH(FOLLOW_functionType_in_signature766);
            functionType15=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            CREATE_stream_functionType; stream_functionType->add(stream_functionType, functionType15.tree, NULL);
            ID16 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_signature768); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID16, NULL);

            t = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_signature772); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
             
            CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, t, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:252:30: ( params )?
            {
                int alt5=2;
                switch ( LA(1) ) 
                {
                    case T_BOOL:
                    case T_BYTE:
                    case T_SHORT:
                    case T_INT:
                    case T_CHAR:
                    case T_LONG:
                    case T_FLOAT:
                    case T_DOUBLE:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:252:30: params
            	    {
            	        FOLLOWPUSH(FOLLOW_params_in_signature774);
            	        params17=params(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignatureEx;
            	        }

            	        CREATE_stream_params; stream_params->add(stream_params, params17.tree, NULL);

            	    }
            	    break;

                }
            }
            PAREN_R18 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_signature777); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }
             
            CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R18, NULL);


             
            /* AST REWRITE
             * elements          : ID, params, functionType
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 253:3: -> ^( FUNSIG[$t] functionType ID ( params )? )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:253:6: ^( FUNSIG[$t] functionType ID ( params )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FUNSIG, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNSIG, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionType == NULL ? NULL : stream_functionType->nextTree(stream_functionType));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:253:35: ( params )?
            	        {
            	        	if ( (stream_params != NULL && stream_params->hasNext(stream_params))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_params == NULL ? NULL : stream_params->nextTree(stream_params));

            	        	}
            	        	if ( stream_params != NULL) stream_params->reset(stream_params);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureEx; /* Prevent compiler warnings */
    rulesignatureEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_functionType != NULL) stream_functionType->free(stream_functionType);
        if (stream_params != NULL) stream_params->free(stream_params);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end signature */

/** 
 * $ANTLR start functionType
 * f:/dev/projects/kensho/docs/Kensho.g:256:1: functionType : ( T_VOID | type );
 */
static KenshoParser_functionType_return
functionType(pKenshoParser ctx)
{   
    KenshoParser_functionType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    T_VOID19;
    KenshoParser_type_return type20;
    #undef	RETURN_TYPE_type20
    #define	RETURN_TYPE_type20 KenshoParser_type_return

    pANTLR3_BASE_TREE T_VOID19_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    T_VOID19       = NULL;
    type20.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    T_VOID19_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:257:2: ( T_VOID | type )
            
            ANTLR3_UINT32 alt6;

            alt6=2;

            switch ( LA(1) ) 
            {
            case T_VOID:
            	{
            		alt6=1;
            	}
                break;
            case T_BOOL:
            case T_BYTE:
            case T_SHORT:
            case T_INT:
            case T_CHAR:
            case T_LONG:
            case T_FLOAT:
            case T_DOUBLE:
            	{
            		alt6=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto rulefunctionTypeEx;
            }

            switch (alt6) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:257:4: T_VOID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        T_VOID19 = (pANTLR3_COMMON_TOKEN) MATCHT(T_VOID, &FOLLOW_T_VOID_in_functionType806); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        T_VOID19_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, T_VOID19));
        	        ADAPTOR->addChild(ADAPTOR, root_0, T_VOID19_tree);


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:257:13: type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_type_in_functionType810);
        	        type20=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, type20.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionTypeEx; /* Prevent compiler warnings */
    rulefunctionTypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end functionType */

/** 
 * $ANTLR start params
 * f:/dev/projects/kensho/docs/Kensho.g:260:1: params : type t= ID ( COMMA type ID )* -> ( ^( ARGDEF[$t] type ID ) )+ ;
 */
static KenshoParser_params_return
params(pKenshoParser ctx)
{   
    KenshoParser_params_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    COMMA22;
    pANTLR3_COMMON_TOKEN    ID24;
    KenshoParser_type_return type21;
    #undef	RETURN_TYPE_type21
    #define	RETURN_TYPE_type21 KenshoParser_type_return

    KenshoParser_type_return type23;
    #undef	RETURN_TYPE_type23
    #define	RETURN_TYPE_type23 KenshoParser_type_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE COMMA22_tree;
    pANTLR3_BASE_TREE ID24_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    COMMA22       = NULL;
    ID24       = NULL;
    type21.tree = NULL;

    type23.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    COMMA22_tree   = NULL;
    ID24_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:261:2: ( type t= ID ( COMMA type ID )* -> ( ^( ARGDEF[$t] type ID ) )+ )
        // f:/dev/projects/kensho/docs/Kensho.g:261:4: type t= ID ( COMMA type ID )*
        {
            FOLLOWPUSH(FOLLOW_type_in_params824);
            type21=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            CREATE_stream_type; stream_type->add(stream_type, type21.tree, NULL);
            t = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_params828); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, t, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:261:14: ( COMMA type ID )*

            for (;;)
            {
                int alt7=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:261:16: COMMA type ID
            	    {
            	        COMMA22 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_params832); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparamsEx;
            	        }
            	         
            	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA22, NULL);

            	        FOLLOWPUSH(FOLLOW_type_in_params834);
            	        type23=type(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparamsEx;
            	        }

            	        CREATE_stream_type; stream_type->add(stream_type, type23.tree, NULL);
            	        ID24 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_params836); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparamsEx;
            	        }
            	         
            	        CREATE_stream_ID; stream_ID->add(stream_ID, ID24, NULL);


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : type, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 262:3: -> ( ^( ARGDEF[$t] type ID ) )+
            	{
            	    if ((stream_type == NULL || !stream_type->hasNext(stream_type)) || (stream_ID == NULL || !stream_ID->hasNext(stream_ID))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_type->hasNext(stream_type)) || (stream_ID->hasNext(stream_ID))  ) {
            	    		// f:/dev/projects/kensho/docs/Kensho.g:262:6: ^( ARGDEF[$t] type ID )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	    		    #if 1 == 2
            	    		    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ARGDEF, TOKTEXT(t))
            	    		    #else
            	    		    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGDEF, (pANTLR3_UINT8)t)
            	    		    #endif
            	    		    , root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	stream_type->reset(stream_type);
            	    	stream_ID->reset(stream_ID);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparamsEx; /* Prevent compiler warnings */
    ruleparamsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_type != NULL) stream_type->free(stream_type);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end params */

/** 
 * $ANTLR start structDecl
 * f:/dev/projects/kensho/docs/Kensho.g:265:1: structDecl : K_STRUCT ID BRACE_L ( structBodyDecl )* BRACE_R -> ^( K_STRUCT ID ( structBodyDecl )* ) ;
 */
static KenshoParser_structDecl_return
structDecl(pKenshoParser ctx)
{   
    KenshoParser_structDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_STRUCT25;
    pANTLR3_COMMON_TOKEN    ID26;
    pANTLR3_COMMON_TOKEN    BRACE_L27;
    pANTLR3_COMMON_TOKEN    BRACE_R29;
    KenshoParser_structBodyDecl_return structBodyDecl28;
    #undef	RETURN_TYPE_structBodyDecl28
    #define	RETURN_TYPE_structBodyDecl28 KenshoParser_structBodyDecl_return

    pANTLR3_BASE_TREE K_STRUCT25_tree;
    pANTLR3_BASE_TREE ID26_tree;
    pANTLR3_BASE_TREE BRACE_L27_tree;
    pANTLR3_BASE_TREE BRACE_R29_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_STRUCT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_R;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_structBodyDecl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    K_STRUCT25       = NULL;
    ID26       = NULL;
    BRACE_L27       = NULL;
    BRACE_R29       = NULL;
    structBodyDecl28.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_STRUCT25_tree   = NULL;
    ID26_tree   = NULL;
    BRACE_L27_tree   = NULL;
    BRACE_R29_tree   = NULL;

    stream_K_STRUCT   = NULL;
    #define CREATE_stream_K_STRUCT  if (stream_K_STRUCT == NULL) {stream_K_STRUCT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_STRUCT"); } 
    stream_BRACE_L   = NULL;
    #define CREATE_stream_BRACE_L  if (stream_BRACE_L == NULL) {stream_BRACE_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_L"); } 
    stream_BRACE_R   = NULL;
    #define CREATE_stream_BRACE_R  if (stream_BRACE_R == NULL) {stream_BRACE_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_R"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_structBodyDecl   = NULL;
    #define CREATE_stream_structBodyDecl  if (stream_structBodyDecl == NULL) {stream_structBodyDecl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule structBodyDecl"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:266:2: ( K_STRUCT ID BRACE_L ( structBodyDecl )* BRACE_R -> ^( K_STRUCT ID ( structBodyDecl )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:266:4: K_STRUCT ID BRACE_L ( structBodyDecl )* BRACE_R
        {
            K_STRUCT25 = (pANTLR3_COMMON_TOKEN) MATCHT(K_STRUCT, &FOLLOW_K_STRUCT_in_structDecl865); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }
             
            CREATE_stream_K_STRUCT; stream_K_STRUCT->add(stream_K_STRUCT, K_STRUCT25, NULL);

            ID26 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_structDecl867); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID26, NULL);

            BRACE_L27 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_L, &FOLLOW_BRACE_L_in_structDecl869); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }
             
            CREATE_stream_BRACE_L; stream_BRACE_L->add(stream_BRACE_L, BRACE_L27, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:266:24: ( structBodyDecl )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case T_VOID:
                case K_STATIC:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:266:24: structBodyDecl
            	    {
            	        FOLLOWPUSH(FOLLOW_structBodyDecl_in_structDecl871);
            	        structBodyDecl28=structBodyDecl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructDeclEx;
            	        }

            	        CREATE_stream_structBodyDecl; stream_structBodyDecl->add(stream_structBodyDecl, structBodyDecl28.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */

            BRACE_R29 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_R, &FOLLOW_BRACE_R_in_structDecl874); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }
             
            CREATE_stream_BRACE_R; stream_BRACE_R->add(stream_BRACE_R, BRACE_R29, NULL);


             
            /* AST REWRITE
             * elements          : structBodyDecl, K_STRUCT, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 267:3: -> ^( K_STRUCT ID ( structBodyDecl )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:267:6: ^( K_STRUCT ID ( structBodyDecl )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_K_STRUCT == NULL ? NULL : stream_K_STRUCT->nextNode(stream_K_STRUCT), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:267:20: ( structBodyDecl )*
            	        {
            	        	while ( (stream_structBodyDecl != NULL && stream_structBodyDecl->hasNext(stream_structBodyDecl))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_structBodyDecl == NULL ? NULL : stream_structBodyDecl->nextTree(stream_structBodyDecl));

            	        	}
            	        	if (stream_structBodyDecl != NULL) stream_structBodyDecl->reset(stream_structBodyDecl);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructDeclEx; /* Prevent compiler warnings */
    rulestructDeclEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_K_STRUCT != NULL) stream_K_STRUCT->free(stream_K_STRUCT);
        if (stream_BRACE_L != NULL) stream_BRACE_L->free(stream_BRACE_L);
        if (stream_BRACE_R != NULL) stream_BRACE_R->free(stream_BRACE_R);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_structBodyDecl != NULL) stream_structBodyDecl->free(stream_structBodyDecl);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structDecl */

/** 
 * $ANTLR start structBodyDecl
 * f:/dev/projects/kensho/docs/Kensho.g:270:1: structBodyDecl : ( variable SEMICOLON | structFunction );
 */
static KenshoParser_structBodyDecl_return
structBodyDecl(pKenshoParser ctx)
{   
    KenshoParser_structBodyDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SEMICOLON31;
    KenshoParser_variable_return variable30;
    #undef	RETURN_TYPE_variable30
    #define	RETURN_TYPE_variable30 KenshoParser_variable_return

    KenshoParser_structFunction_return structFunction32;
    #undef	RETURN_TYPE_structFunction32
    #define	RETURN_TYPE_structFunction32 KenshoParser_structFunction_return

    pANTLR3_BASE_TREE SEMICOLON31_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    SEMICOLON31       = NULL;
    variable30.tree = NULL;

    structFunction32.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SEMICOLON31_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:271:2: ( variable SEMICOLON | structFunction )
            
            ANTLR3_UINT32 alt9;

            alt9=2;

            switch ( LA(1) ) 
            {
            case T_BOOL:
            case T_BYTE:
            case T_SHORT:
            case T_INT:
            case T_CHAR:
            case T_LONG:
            case T_FLOAT:
            case T_DOUBLE:
            	{
            		switch ( LA(2) ) 
            		{
            		case ID:
            			{
            				switch ( LA(3) ) 
            				{
            				case PAREN_L:
            					{
            						alt9=2;
            					}
            				    break;
            				case OP_ASSIGN:
            				case SEMICOLON:
            					{
            						alt9=1;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 9;
            				    EXCEPTION->state        = 3;


            				    goto rulestructBodyDeclEx;
            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 9;
            		    EXCEPTION->state        = 1;


            		    goto rulestructBodyDeclEx;
            		}

            	}
                break;
            case T_VOID:
            case K_STATIC:
            	{
            		alt9=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulestructBodyDeclEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:271:4: variable SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variable_in_structBodyDecl899);
        	        variable30=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, variable30.tree);
        	        SEMICOLON31 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_structBodyDecl901); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:272:4: structFunction
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_structFunction_in_structBodyDecl907);
        	        structFunction32=structFunction(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, structFunction32.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestructBodyDeclEx; /* Prevent compiler warnings */
    rulestructBodyDeclEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structBodyDecl */

/** 
 * $ANTLR start structFunction
 * f:/dev/projects/kensho/docs/Kensho.g:275:1: structFunction : ( structFunMods )? signature t= BRACE_L ( statement )* BRACE_R -> ^( STRUCTFUN[$t] ( ^( MODS structFunMods ) )? signature ( statement )* ) ;
 */
static KenshoParser_structFunction_return
structFunction(pKenshoParser ctx)
{   
    KenshoParser_structFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    BRACE_R36;
    KenshoParser_structFunMods_return structFunMods33;
    #undef	RETURN_TYPE_structFunMods33
    #define	RETURN_TYPE_structFunMods33 KenshoParser_structFunMods_return

    KenshoParser_signature_return signature34;
    #undef	RETURN_TYPE_signature34
    #define	RETURN_TYPE_signature34 KenshoParser_signature_return

    KenshoParser_statement_return statement35;
    #undef	RETURN_TYPE_statement35
    #define	RETURN_TYPE_statement35 KenshoParser_statement_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE BRACE_R36_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BRACE_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_structFunMods;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_signature;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    BRACE_R36       = NULL;
    structFunMods33.tree = NULL;

    signature34.tree = NULL;

    statement35.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    BRACE_R36_tree   = NULL;

    stream_BRACE_L   = NULL;
    #define CREATE_stream_BRACE_L  if (stream_BRACE_L == NULL) {stream_BRACE_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_L"); } 
    stream_BRACE_R   = NULL;
    #define CREATE_stream_BRACE_R  if (stream_BRACE_R == NULL) {stream_BRACE_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BRACE_R"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_structFunMods   = NULL;
    #define CREATE_stream_structFunMods  if (stream_structFunMods == NULL) {stream_structFunMods = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule structFunMods"); }
    stream_signature   = NULL;
    #define CREATE_stream_signature  if (stream_signature == NULL) {stream_signature = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule signature"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:276:2: ( ( structFunMods )? signature t= BRACE_L ( statement )* BRACE_R -> ^( STRUCTFUN[$t] ( ^( MODS structFunMods ) )? signature ( statement )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:276:4: ( structFunMods )? signature t= BRACE_L ( statement )* BRACE_R
        {

            // f:/dev/projects/kensho/docs/Kensho.g:276:4: ( structFunMods )?
            {
                int alt10=2;
                switch ( LA(1) ) 
                {
                    case K_STATIC:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:276:4: structFunMods
            	    {
            	        FOLLOWPUSH(FOLLOW_structFunMods_in_structFunction919);
            	        structFunMods33=structFunMods(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructFunctionEx;
            	        }

            	        CREATE_stream_structFunMods; stream_structFunMods->add(stream_structFunMods, structFunMods33.tree, NULL);

            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_signature_in_structFunction922);
            signature34=signature(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }

            CREATE_stream_signature; stream_signature->add(stream_signature, signature34.tree, NULL);
            t = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_L, &FOLLOW_BRACE_L_in_structFunction926); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }
             
            CREATE_stream_BRACE_L; stream_BRACE_L->add(stream_BRACE_L, t, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:276:39: ( statement )*

            for (;;)
            {
                int alt11=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case OP_ADD:
                case OP_SUB:
                case OP_NOT:
                case OP_BIT_NOT:
                case K_IF:
                case K_WHILE:
                case LITERAL_TRUE:
                case LITERAL_FALSE:
                case K_RETURN:
                case PAREN_L:
                case ID:
                case LITERAL_INT:
                case LITERAL_OCT:
                case LITERAL_HEX:
                case LITERAL_FLOAT:
                case LITERAL_CHAR:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:276:39: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_structFunction928);
            	        statement35=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructFunctionEx;
            	        }

            	        CREATE_stream_statement; stream_statement->add(stream_statement, statement35.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */

            BRACE_R36 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_R, &FOLLOW_BRACE_R_in_structFunction931); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }
             
            CREATE_stream_BRACE_R; stream_BRACE_R->add(stream_BRACE_R, BRACE_R36, NULL);


             
            /* AST REWRITE
             * elements          : statement, signature, structFunMods
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 277:2: -> ^( STRUCTFUN[$t] ( ^( MODS structFunMods ) )? signature ( statement )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:277:5: ^( STRUCTFUN[$t] ( ^( MODS structFunMods ) )? signature ( statement )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, STRUCTFUN, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, STRUCTFUN, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        // f:/dev/projects/kensho/docs/Kensho.g:277:21: ( ^( MODS structFunMods ) )?
            	        {
            	        	if ( (stream_structFunMods != NULL && stream_structFunMods->hasNext(stream_structFunMods))  )
            	        	{
            	        		// f:/dev/projects/kensho/docs/Kensho.g:277:21: ^( MODS structFunMods )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MODS, (pANTLR3_UINT8)"MODS"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_structFunMods == NULL ? NULL : stream_structFunMods->nextTree(stream_structFunMods));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_structFunMods != NULL) stream_structFunMods->reset(stream_structFunMods);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_signature == NULL ? NULL : stream_signature->nextTree(stream_signature));
            	        // f:/dev/projects/kensho/docs/Kensho.g:277:54: ( statement )*
            	        {
            	        	while ( (stream_statement != NULL && stream_statement->hasNext(stream_statement))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	if (stream_statement != NULL) stream_statement->reset(stream_statement);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructFunctionEx; /* Prevent compiler warnings */
    rulestructFunctionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BRACE_L != NULL) stream_BRACE_L->free(stream_BRACE_L);
        if (stream_BRACE_R != NULL) stream_BRACE_R->free(stream_BRACE_R);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_structFunMods != NULL) stream_structFunMods->free(stream_structFunMods);
        if (stream_signature != NULL) stream_signature->free(stream_signature);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structFunction */

/** 
 * $ANTLR start structFunMods
 * f:/dev/projects/kensho/docs/Kensho.g:280:1: structFunMods : K_STATIC ;
 */
static KenshoParser_structFunMods_return
structFunMods(pKenshoParser ctx)
{   
    KenshoParser_structFunMods_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_STATIC37;

    pANTLR3_BASE_TREE K_STATIC37_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    K_STATIC37       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    K_STATIC37_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:281:2: ( K_STATIC )
        // f:/dev/projects/kensho/docs/Kensho.g:281:4: K_STATIC
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            K_STATIC37 = (pANTLR3_COMMON_TOKEN) MATCHT(K_STATIC, &FOLLOW_K_STATIC_in_structFunMods964); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunModsEx;
            }

            K_STATIC37_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, K_STATIC37));
            ADAPTOR->addChild(ADAPTOR, root_0, K_STATIC37_tree);


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructFunModsEx; /* Prevent compiler warnings */
    rulestructFunModsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structFunMods */

/** 
 * $ANTLR start statement
 * f:/dev/projects/kensho/docs/Kensho.g:284:1: statement : ( variable SEMICOLON | expression SEMICOLON | ifStat | whileStat | returnStatement SEMICOLON );
 */
static KenshoParser_statement_return
statement(pKenshoParser ctx)
{   
    KenshoParser_statement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SEMICOLON39;
    pANTLR3_COMMON_TOKEN    SEMICOLON41;
    pANTLR3_COMMON_TOKEN    SEMICOLON45;
    KenshoParser_variable_return variable38;
    #undef	RETURN_TYPE_variable38
    #define	RETURN_TYPE_variable38 KenshoParser_variable_return

    KenshoParser_expression_return expression40;
    #undef	RETURN_TYPE_expression40
    #define	RETURN_TYPE_expression40 KenshoParser_expression_return

    KenshoParser_ifStat_return ifStat42;
    #undef	RETURN_TYPE_ifStat42
    #define	RETURN_TYPE_ifStat42 KenshoParser_ifStat_return

    KenshoParser_whileStat_return whileStat43;
    #undef	RETURN_TYPE_whileStat43
    #define	RETURN_TYPE_whileStat43 KenshoParser_whileStat_return

    KenshoParser_returnStatement_return returnStatement44;
    #undef	RETURN_TYPE_returnStatement44
    #define	RETURN_TYPE_returnStatement44 KenshoParser_returnStatement_return

    pANTLR3_BASE_TREE SEMICOLON39_tree;
    pANTLR3_BASE_TREE SEMICOLON41_tree;
    pANTLR3_BASE_TREE SEMICOLON45_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    SEMICOLON39       = NULL;
    SEMICOLON41       = NULL;
    SEMICOLON45       = NULL;
    variable38.tree = NULL;

    expression40.tree = NULL;

    ifStat42.tree = NULL;

    whileStat43.tree = NULL;

    returnStatement44.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SEMICOLON39_tree   = NULL;
    SEMICOLON41_tree   = NULL;
    SEMICOLON45_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:285:2: ( variable SEMICOLON | expression SEMICOLON | ifStat | whileStat | returnStatement SEMICOLON )
            
            ANTLR3_UINT32 alt12;

            alt12=5;

            switch ( LA(1) ) 
            {
            case T_BOOL:
            case T_BYTE:
            case T_SHORT:
            case T_INT:
            case T_CHAR:
            case T_LONG:
            case T_FLOAT:
            case T_DOUBLE:
            	{
            		alt12=1;
            	}
                break;
            case OP_ADD:
            case OP_SUB:
            case OP_NOT:
            case OP_BIT_NOT:
            case LITERAL_TRUE:
            case LITERAL_FALSE:
            case PAREN_L:
            case ID:
            case LITERAL_INT:
            case LITERAL_OCT:
            case LITERAL_HEX:
            case LITERAL_FLOAT:
            case LITERAL_CHAR:
            	{
            		alt12=2;
            	}
                break;
            case K_IF:
            	{
            		alt12=3;
            	}
                break;
            case K_WHILE:
            	{
            		alt12=4;
            	}
                break;
            case K_RETURN:
            	{
            		alt12=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 12;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt12) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:285:4: variable SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variable_in_statement975);
        	        variable38=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, variable38.tree);
        	        SEMICOLON39 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement977); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:286:4: expression SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expression_in_statement983);
        	        expression40=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expression40.tree);
        	        SEMICOLON41 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement985); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/Kensho.g:287:4: ifStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStat_in_statement991);
        	        ifStat42=ifStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, ifStat42.tree);

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/Kensho.g:288:4: whileStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStat_in_statement996);
        	        whileStat43=whileStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, whileStat43.tree);

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/Kensho.g:289:4: returnStatement SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1001);
        	        returnStatement44=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, returnStatement44.tree);
        	        SEMICOLON45 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement1003); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start returnStatement
 * f:/dev/projects/kensho/docs/Kensho.g:292:1: returnStatement : K_RETURN ( expression )? -> ^( K_RETURN ( expression )? ) ;
 */
static KenshoParser_returnStatement_return
returnStatement(pKenshoParser ctx)
{   
    KenshoParser_returnStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_RETURN46;
    KenshoParser_expression_return expression47;
    #undef	RETURN_TYPE_expression47
    #define	RETURN_TYPE_expression47 KenshoParser_expression_return

    pANTLR3_BASE_TREE K_RETURN46_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_RETURN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    K_RETURN46       = NULL;
    expression47.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_RETURN46_tree   = NULL;

    stream_K_RETURN   = NULL;
    #define CREATE_stream_K_RETURN  if (stream_K_RETURN == NULL) {stream_K_RETURN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_RETURN"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:293:2: ( K_RETURN ( expression )? -> ^( K_RETURN ( expression )? ) )
        // f:/dev/projects/kensho/docs/Kensho.g:293:4: K_RETURN ( expression )?
        {
            K_RETURN46 = (pANTLR3_COMMON_TOKEN) MATCHT(K_RETURN, &FOLLOW_K_RETURN_in_returnStatement1016); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
             
            CREATE_stream_K_RETURN; stream_K_RETURN->add(stream_K_RETURN, K_RETURN46, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:293:13: ( expression )?
            {
                int alt13=2;
                switch ( LA(1) ) 
                {
                    case OP_ADD:
                    case OP_SUB:
                    case OP_NOT:
                    case OP_BIT_NOT:
                    case LITERAL_TRUE:
                    case LITERAL_FALSE:
                    case PAREN_L:
                    case ID:
                    case LITERAL_INT:
                    case LITERAL_OCT:
                    case LITERAL_HEX:
                    case LITERAL_FLOAT:
                    case LITERAL_CHAR:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:293:13: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement1018);
            	        expression47=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }

            	        CREATE_stream_expression; stream_expression->add(stream_expression, expression47.tree, NULL);

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : K_RETURN, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 294:3: -> ^( K_RETURN ( expression )? )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:294:6: ^( K_RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_K_RETURN == NULL ? NULL : stream_K_RETURN->nextNode(stream_K_RETURN), root_1));

            	        // f:/dev/projects/kensho/docs/Kensho.g:294:17: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_K_RETURN != NULL) stream_K_RETURN->free(stream_K_RETURN);
        if (stream_expression != NULL) stream_expression->free(stream_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start block
 * f:/dev/projects/kensho/docs/Kensho.g:297:1: block : BRACE_L ( statement )* BRACE_R ;
 */
static KenshoParser_block_return
block(pKenshoParser ctx)
{   
    KenshoParser_block_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BRACE_L48;
    pANTLR3_COMMON_TOKEN    BRACE_R50;
    KenshoParser_statement_return statement49;
    #undef	RETURN_TYPE_statement49
    #define	RETURN_TYPE_statement49 KenshoParser_statement_return

    pANTLR3_BASE_TREE BRACE_L48_tree;
    pANTLR3_BASE_TREE BRACE_R50_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    BRACE_L48       = NULL;
    BRACE_R50       = NULL;
    statement49.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    BRACE_L48_tree   = NULL;
    BRACE_R50_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:298:2: ( BRACE_L ( statement )* BRACE_R )
        // f:/dev/projects/kensho/docs/Kensho.g:298:4: BRACE_L ( statement )* BRACE_R
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            BRACE_L48 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_L, &FOLLOW_BRACE_L_in_block1042); 
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }


            // f:/dev/projects/kensho/docs/Kensho.g:298:13: ( statement )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case OP_ADD:
                case OP_SUB:
                case OP_NOT:
                case OP_BIT_NOT:
                case K_IF:
                case K_WHILE:
                case LITERAL_TRUE:
                case LITERAL_FALSE:
                case K_RETURN:
                case PAREN_L:
                case ID:
                case LITERAL_INT:
                case LITERAL_OCT:
                case LITERAL_HEX:
                case LITERAL_FLOAT:
                case LITERAL_CHAR:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:298:13: statement
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_block1045);
            	        statement49=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleblockEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, statement49.tree);

            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */

            BRACE_R50 = (pANTLR3_COMMON_TOKEN) MATCHT(BRACE_R, &FOLLOW_BRACE_R_in_block1048); 
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end block */

/** 
 * $ANTLR start ifStat
 * f:/dev/projects/kensho/docs/Kensho.g:301:1: ifStat : K_IF PAREN_L expression PAREN_R block ( elseIfStat )* ( elseStat )? -> ^( K_IF expression block ( ^( ELSEIF elseIfStat ) )* ( ^( K_ELSE elseStat ) )? ) ;
 */
static KenshoParser_ifStat_return
ifStat(pKenshoParser ctx)
{   
    KenshoParser_ifStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_IF51;
    pANTLR3_COMMON_TOKEN    PAREN_L52;
    pANTLR3_COMMON_TOKEN    PAREN_R54;
    KenshoParser_expression_return expression53;
    #undef	RETURN_TYPE_expression53
    #define	RETURN_TYPE_expression53 KenshoParser_expression_return

    KenshoParser_block_return block55;
    #undef	RETURN_TYPE_block55
    #define	RETURN_TYPE_block55 KenshoParser_block_return

    KenshoParser_elseIfStat_return elseIfStat56;
    #undef	RETURN_TYPE_elseIfStat56
    #define	RETURN_TYPE_elseIfStat56 KenshoParser_elseIfStat_return

    KenshoParser_elseStat_return elseStat57;
    #undef	RETURN_TYPE_elseStat57
    #define	RETURN_TYPE_elseStat57 KenshoParser_elseStat_return

    pANTLR3_BASE_TREE K_IF51_tree;
    pANTLR3_BASE_TREE PAREN_L52_tree;
    pANTLR3_BASE_TREE PAREN_R54_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_K_IF;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_elseIfStat;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_elseStat;
    /* Initialize rule variables
     */


    root_0 = NULL;

    K_IF51       = NULL;
    PAREN_L52       = NULL;
    PAREN_R54       = NULL;
    expression53.tree = NULL;

    block55.tree = NULL;

    elseIfStat56.tree = NULL;

    elseStat57.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_IF51_tree   = NULL;
    PAREN_L52_tree   = NULL;
    PAREN_R54_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_K_IF   = NULL;
    #define CREATE_stream_K_IF  if (stream_K_IF == NULL) {stream_K_IF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token K_IF"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_elseIfStat   = NULL;
    #define CREATE_stream_elseIfStat  if (stream_elseIfStat == NULL) {stream_elseIfStat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule elseIfStat"); }
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }
    stream_elseStat   = NULL;
    #define CREATE_stream_elseStat  if (stream_elseStat == NULL) {stream_elseStat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule elseStat"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:302:2: ( K_IF PAREN_L expression PAREN_R block ( elseIfStat )* ( elseStat )? -> ^( K_IF expression block ( ^( ELSEIF elseIfStat ) )* ( ^( K_ELSE elseStat ) )? ) )
        // f:/dev/projects/kensho/docs/Kensho.g:302:4: K_IF PAREN_L expression PAREN_R block ( elseIfStat )* ( elseStat )?
        {
            K_IF51 = (pANTLR3_COMMON_TOKEN) MATCHT(K_IF, &FOLLOW_K_IF_in_ifStat1062); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }
             
            CREATE_stream_K_IF; stream_K_IF->add(stream_K_IF, K_IF51, NULL);

            PAREN_L52 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_ifStat1064); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }
             
            CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L52, NULL);

            FOLLOWPUSH(FOLLOW_expression_in_ifStat1066);
            expression53=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            CREATE_stream_expression; stream_expression->add(stream_expression, expression53.tree, NULL);
            PAREN_R54 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_ifStat1068); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }
             
            CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R54, NULL);

            FOLLOWPUSH(FOLLOW_block_in_ifStat1070);
            block55=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            CREATE_stream_block; stream_block->add(stream_block, block55.tree, NULL);

            // f:/dev/projects/kensho/docs/Kensho.g:303:3: ( elseIfStat )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) ) 
                {
                case K_ELSE:
                	{
                		switch ( LA(2) ) 
                		{
                		case K_IF:
                			{
                				alt15=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt15) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:303:3: elseIfStat
            	    {
            	        FOLLOWPUSH(FOLLOW_elseIfStat_in_ifStat1075);
            	        elseIfStat56=elseIfStat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        CREATE_stream_elseIfStat; stream_elseIfStat->add(stream_elseIfStat, elseIfStat56.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


            // f:/dev/projects/kensho/docs/Kensho.g:304:3: ( elseStat )?
            {
                int alt16=2;
                switch ( LA(1) ) 
                {
                    case K_ELSE:
                    	{
                    		alt16=1;
                    	}
                        break;
                }

                switch (alt16) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:304:3: elseStat
            	    {
            	        FOLLOWPUSH(FOLLOW_elseStat_in_ifStat1080);
            	        elseStat57=elseStat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        CREATE_stream_elseStat; stream_elseStat->add(stream_elseStat, elseStat57.tree, NULL);

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : block, elseIfStat, elseStat, K_IF, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 306:2: -> ^( K_IF expression block ( ^( ELSEIF elseIfStat ) )* ( ^( K_ELSE elseStat ) )? )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:306:5: ^( K_IF expression block ( ^( ELSEIF elseIfStat ) )* ( ^( K_ELSE elseStat ) )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_K_IF == NULL ? NULL : stream_K_IF->nextNode(stream_K_IF), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_block == NULL ? NULL : stream_block->nextTree(stream_block));
            	        // f:/dev/projects/kensho/docs/Kensho.g:307:4: ( ^( ELSEIF elseIfStat ) )*
            	        {
            	        	while ( (stream_elseIfStat != NULL && stream_elseIfStat->hasNext(stream_elseIfStat))  )
            	        	{
            	        		// f:/dev/projects/kensho/docs/Kensho.g:307:4: ^( ELSEIF elseIfStat )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ELSEIF, (pANTLR3_UINT8)"ELSEIF"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_elseIfStat == NULL ? NULL : stream_elseIfStat->nextTree(stream_elseIfStat));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if (stream_elseIfStat != NULL) stream_elseIfStat->reset(stream_elseIfStat);

            	        }
            	        // f:/dev/projects/kensho/docs/Kensho.g:308:4: ( ^( K_ELSE elseStat ) )?
            	        {
            	        	if ( (stream_elseStat != NULL && stream_elseStat->hasNext(stream_elseStat))  )
            	        	{
            	        		// f:/dev/projects/kensho/docs/Kensho.g:308:4: ^( K_ELSE elseStat )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, K_ELSE, (pANTLR3_UINT8)"K_ELSE"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_elseStat == NULL ? NULL : stream_elseStat->nextTree(stream_elseStat));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_elseStat != NULL) stream_elseStat->reset(stream_elseStat);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatEx; /* Prevent compiler warnings */
    ruleifStatEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_K_IF != NULL) stream_K_IF->free(stream_K_IF);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_elseIfStat != NULL) stream_elseIfStat->free(stream_elseIfStat);
        if (stream_block != NULL) stream_block->free(stream_block);
        if (stream_elseStat != NULL) stream_elseStat->free(stream_elseStat);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end ifStat */

/** 
 * $ANTLR start elseIfStat
 * f:/dev/projects/kensho/docs/Kensho.g:311:1: elseIfStat : K_ELSE K_IF PAREN_L expression PAREN_R block ;
 */
static KenshoParser_elseIfStat_return
elseIfStat(pKenshoParser ctx)
{   
    KenshoParser_elseIfStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_ELSE58;
    pANTLR3_COMMON_TOKEN    K_IF59;
    pANTLR3_COMMON_TOKEN    PAREN_L60;
    pANTLR3_COMMON_TOKEN    PAREN_R62;
    KenshoParser_expression_return expression61;
    #undef	RETURN_TYPE_expression61
    #define	RETURN_TYPE_expression61 KenshoParser_expression_return

    KenshoParser_block_return block63;
    #undef	RETURN_TYPE_block63
    #define	RETURN_TYPE_block63 KenshoParser_block_return

    pANTLR3_BASE_TREE K_ELSE58_tree;
    pANTLR3_BASE_TREE K_IF59_tree;
    pANTLR3_BASE_TREE PAREN_L60_tree;
    pANTLR3_BASE_TREE PAREN_R62_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    K_ELSE58       = NULL;
    K_IF59       = NULL;
    PAREN_L60       = NULL;
    PAREN_R62       = NULL;
    expression61.tree = NULL;

    block63.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_ELSE58_tree   = NULL;
    K_IF59_tree   = NULL;
    PAREN_L60_tree   = NULL;
    PAREN_R62_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:312:2: ( K_ELSE K_IF PAREN_L expression PAREN_R block )
        // f:/dev/projects/kensho/docs/Kensho.g:312:4: K_ELSE K_IF PAREN_L expression PAREN_R block
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            K_ELSE58 = (pANTLR3_COMMON_TOKEN) MATCHT(K_ELSE, &FOLLOW_K_ELSE_in_elseIfStat1130); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            K_IF59 = (pANTLR3_COMMON_TOKEN) MATCHT(K_IF, &FOLLOW_K_IF_in_elseIfStat1133); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            PAREN_L60 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_elseIfStat1136); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            FOLLOWPUSH(FOLLOW_expression_in_elseIfStat1139);
            expression61=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, expression61.tree);
            PAREN_R62 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_elseIfStat1141); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            FOLLOWPUSH(FOLLOW_block_in_elseIfStat1144);
            block63=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, block63.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseIfStatEx; /* Prevent compiler warnings */
    ruleelseIfStatEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end elseIfStat */

/** 
 * $ANTLR start elseStat
 * f:/dev/projects/kensho/docs/Kensho.g:315:1: elseStat : K_ELSE block ;
 */
static KenshoParser_elseStat_return
elseStat(pKenshoParser ctx)
{   
    KenshoParser_elseStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_ELSE64;
    KenshoParser_block_return block65;
    #undef	RETURN_TYPE_block65
    #define	RETURN_TYPE_block65 KenshoParser_block_return

    pANTLR3_BASE_TREE K_ELSE64_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    K_ELSE64       = NULL;
    block65.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_ELSE64_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:316:2: ( K_ELSE block )
        // f:/dev/projects/kensho/docs/Kensho.g:316:4: K_ELSE block
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            K_ELSE64 = (pANTLR3_COMMON_TOKEN) MATCHT(K_ELSE, &FOLLOW_K_ELSE_in_elseStat1155); 
            if  (HASEXCEPTION())
            {
                goto ruleelseStatEx;
            }

            FOLLOWPUSH(FOLLOW_block_in_elseStat1158);
            block65=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleelseStatEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, block65.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseStatEx; /* Prevent compiler warnings */
    ruleelseStatEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end elseStat */

/** 
 * $ANTLR start whileStat
 * f:/dev/projects/kensho/docs/Kensho.g:319:1: whileStat : K_WHILE PAREN_L expression PAREN_R block ;
 */
static KenshoParser_whileStat_return
whileStat(pKenshoParser ctx)
{   
    KenshoParser_whileStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    K_WHILE66;
    pANTLR3_COMMON_TOKEN    PAREN_L67;
    pANTLR3_COMMON_TOKEN    PAREN_R69;
    KenshoParser_expression_return expression68;
    #undef	RETURN_TYPE_expression68
    #define	RETURN_TYPE_expression68 KenshoParser_expression_return

    KenshoParser_block_return block70;
    #undef	RETURN_TYPE_block70
    #define	RETURN_TYPE_block70 KenshoParser_block_return

    pANTLR3_BASE_TREE K_WHILE66_tree;
    pANTLR3_BASE_TREE PAREN_L67_tree;
    pANTLR3_BASE_TREE PAREN_R69_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    K_WHILE66       = NULL;
    PAREN_L67       = NULL;
    PAREN_R69       = NULL;
    expression68.tree = NULL;

    block70.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_WHILE66_tree   = NULL;
    PAREN_L67_tree   = NULL;
    PAREN_R69_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:320:2: ( K_WHILE PAREN_L expression PAREN_R block )
        // f:/dev/projects/kensho/docs/Kensho.g:320:4: K_WHILE PAREN_L expression PAREN_R block
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            K_WHILE66 = (pANTLR3_COMMON_TOKEN) MATCHT(K_WHILE, &FOLLOW_K_WHILE_in_whileStat1169); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            K_WHILE66_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, K_WHILE66));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, K_WHILE66_tree, root_0));

            PAREN_L67 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_whileStat1172); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            FOLLOWPUSH(FOLLOW_expression_in_whileStat1175);
            expression68=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, expression68.tree);
            PAREN_R69 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_whileStat1177); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            FOLLOWPUSH(FOLLOW_block_in_whileStat1180);
            block70=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, block70.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatEx; /* Prevent compiler warnings */
    rulewhileStatEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end whileStat */

/** 
 * $ANTLR start variable
 * f:/dev/projects/kensho/docs/Kensho.g:323:1: variable : type t= ID ( OP_ASSIGN expression )? -> ^( VARDEF[$t] type ID ) ( ^( BINOP OP_ASSIGN ID expression ) )? ;
 */
static KenshoParser_variable_return
variable(pKenshoParser ctx)
{   
    KenshoParser_variable_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    t;
    pANTLR3_COMMON_TOKEN    OP_ASSIGN72;
    KenshoParser_type_return type71;
    #undef	RETURN_TYPE_type71
    #define	RETURN_TYPE_type71 KenshoParser_type_return

    KenshoParser_expression_return expression73;
    #undef	RETURN_TYPE_expression73
    #define	RETURN_TYPE_expression73 KenshoParser_expression_return

    pANTLR3_BASE_TREE t_tree;
    pANTLR3_BASE_TREE OP_ASSIGN72_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_OP_ASSIGN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    t       = NULL;
    OP_ASSIGN72       = NULL;
    type71.tree = NULL;

    expression73.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;
    OP_ASSIGN72_tree   = NULL;

    stream_OP_ASSIGN   = NULL;
    #define CREATE_stream_OP_ASSIGN  if (stream_OP_ASSIGN == NULL) {stream_OP_ASSIGN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token OP_ASSIGN"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:324:2: ( type t= ID ( OP_ASSIGN expression )? -> ^( VARDEF[$t] type ID ) ( ^( BINOP OP_ASSIGN ID expression ) )? )
        // f:/dev/projects/kensho/docs/Kensho.g:324:4: type t= ID ( OP_ASSIGN expression )?
        {
            FOLLOWPUSH(FOLLOW_type_in_variable1193);
            type71=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            CREATE_stream_type; stream_type->add(stream_type, type71.tree, NULL);
            t = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_variable1197); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, t, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:324:14: ( OP_ASSIGN expression )?
            {
                int alt17=2;
                switch ( LA(1) ) 
                {
                    case OP_ASSIGN:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:324:16: OP_ASSIGN expression
            	    {
            	        OP_ASSIGN72 = (pANTLR3_COMMON_TOKEN) MATCHT(OP_ASSIGN, &FOLLOW_OP_ASSIGN_in_variable1201); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }
            	         
            	        CREATE_stream_OP_ASSIGN; stream_OP_ASSIGN->add(stream_OP_ASSIGN, OP_ASSIGN72, NULL);

            	        FOLLOWPUSH(FOLLOW_expression_in_variable1203);
            	        expression73=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableEx;
            	        }

            	        CREATE_stream_expression; stream_expression->add(stream_expression, expression73.tree, NULL);

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : ID, ID, type, OP_ASSIGN, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 325:3: -> ^( VARDEF[$t] type ID ) ( ^( BINOP OP_ASSIGN ID expression ) )?
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:325:7: ^( VARDEF[$t] type ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, VARDEF, TOKTEXT(t))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARDEF, (pANTLR3_UINT8)t)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // f:/dev/projects/kensho/docs/Kensho.g:326:4: ( ^( BINOP OP_ASSIGN ID expression ) )?
            	    {
            	    	if ( (stream_ID != NULL && stream_ID->hasNext(stream_ID)) || (stream_OP_ASSIGN != NULL && stream_OP_ASSIGN->hasNext(stream_OP_ASSIGN)) || (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	    	{
            	    		// f:/dev/projects/kensho/docs/Kensho.g:326:4: ^( BINOP OP_ASSIGN ID expression )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BINOP, (pANTLR3_UINT8)"BINOP"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_OP_ASSIGN == NULL ? NULL : stream_OP_ASSIGN->nextNode(stream_OP_ASSIGN));
            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if ( stream_ID != NULL) stream_ID->reset(stream_ID);
            	    	if ( stream_OP_ASSIGN != NULL) stream_OP_ASSIGN->reset(stream_OP_ASSIGN);
            	    	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_OP_ASSIGN != NULL) stream_OP_ASSIGN->free(stream_OP_ASSIGN);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_type != NULL) stream_type->free(stream_type);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end variable */

/** 
 * $ANTLR start args
 * f:/dev/projects/kensho/docs/Kensho.g:329:1: args : expression ( COMMA expression )* ;
 */
static KenshoParser_args_return
args(pKenshoParser ctx)
{   
    KenshoParser_args_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA75;
    KenshoParser_expression_return expression74;
    #undef	RETURN_TYPE_expression74
    #define	RETURN_TYPE_expression74 KenshoParser_expression_return

    KenshoParser_expression_return expression76;
    #undef	RETURN_TYPE_expression76
    #define	RETURN_TYPE_expression76 KenshoParser_expression_return

    pANTLR3_BASE_TREE COMMA75_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA75       = NULL;
    expression74.tree = NULL;

    expression76.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    COMMA75_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:330:2: ( expression ( COMMA expression )* )
        // f:/dev/projects/kensho/docs/Kensho.g:330:4: expression ( COMMA expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_expression_in_args1247);
            expression74=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleargsEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, expression74.tree);

            // f:/dev/projects/kensho/docs/Kensho.g:330:15: ( COMMA expression )*

            for (;;)
            {
                int alt18=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:330:17: COMMA expression
            	    {
            	        COMMA75 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_args1251); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargsEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_expression_in_args1254);
            	        expression76=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargsEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, expression76.tree);

            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargsEx; /* Prevent compiler warnings */
    ruleargsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end args */

/** 
 * $ANTLR start type
 * f:/dev/projects/kensho/docs/Kensho.g:333:1: type : ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE );
 */
static KenshoParser_type_return
type(pKenshoParser ctx)
{   
    KenshoParser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set77;

    pANTLR3_BASE_TREE set77_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set77       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set77_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:334:2: ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set77=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= T_BOOL) && (LA(1) <= T_DOUBLE)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set77)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_type0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type0);    goto ruletypeEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start expression
 * f:/dev/projects/kensho/docs/Kensho.g:344:1: expression : left= primary ( binop right= primary )* ->;
 */
static KenshoParser_expression_return
expression(pKenshoParser ctx)
{   
    KenshoParser_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    KenshoParser_primary_return left;
    #undef	RETURN_TYPE_left
    #define	RETURN_TYPE_left KenshoParser_primary_return

    KenshoParser_primary_return right;
    #undef	RETURN_TYPE_right
    #define	RETURN_TYPE_right KenshoParser_primary_return

    KenshoParser_binop_return binop78;
    #undef	RETURN_TYPE_binop78
    #define	RETURN_TYPE_binop78 KenshoParser_binop_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primary;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_binop;
    /* Initialize rule variables
     */


    root_0 = NULL;


    	std::vector<pANTLR3_BASE_TREE> expressions;
    	std::vector<pANTLR3_COMMON_TOKEN> operators;

    left.tree = NULL;

    right.tree = NULL;

    binop78.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_primary   = NULL;
    #define CREATE_stream_primary  if (stream_primary == NULL) {stream_primary = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primary"); }
    stream_binop   = NULL;
    #define CREATE_stream_binop  if (stream_binop == NULL) {stream_binop = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule binop"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:350:2: (left= primary ( binop right= primary )* ->)
        // f:/dev/projects/kensho/docs/Kensho.g:350:4: left= primary ( binop right= primary )*
        {
            FOLLOWPUSH(FOLLOW_primary_in_expression1321);
            left=primary(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }

            CREATE_stream_primary; stream_primary->add(stream_primary, left.tree, NULL);
            {
                 expressions.push_back((left.tree)); 
            }

            // f:/dev/projects/kensho/docs/Kensho.g:351:3: ( binop right= primary )*

            for (;;)
            {
                int alt19=2;
                switch ( LA(1) ) 
                {
                case OP_ADD:
                case OP_SUB:
                case OP_MUL:
                case OP_DIV:
                case OP_AND:
                case OP_OR:
                case OP_REM:
                case OP_BIT_AND:
                case OP_BIT_OR:
                case OP_XOR:
                case OP_SHIFT_L:
                case OP_SHIFT_R:
                case OP_USHIFT_R:
                case CMP_EQ:
                case CMP_NEQ:
                case CMP_LT:
                case CMP_GT:
                case CMP_LTE:
                case CMP_GTE:
                case OP_ASSIGN:
                case OP_USHIFT_L:
                	{
                		alt19=1;
                	}
                    break;

                }

                switch (alt19) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:352:4: binop right= primary
            	    {
            	        FOLLOWPUSH(FOLLOW_binop_in_expression1334);
            	        binop78=binop(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }

            	        CREATE_stream_binop; stream_binop->add(stream_binop, binop78.tree, NULL);
            	        FOLLOWPUSH(FOLLOW_primary_in_expression1338);
            	        right=primary(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }

            	        CREATE_stream_primary; stream_primary->add(stream_primary, right.tree, NULL);
            	        {
            	             
            	            				operators.push_back((binop78.start)); 
            	            				expressions.push_back((right.tree)); 
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 359:3: ->
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0,  createPrecedenceTree(ctx, expressions, operators) );

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_primary != NULL) stream_primary->free(stream_primary);
        if (stream_binop != NULL) stream_binop->free(stream_binop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start primary
 * f:/dev/projects/kensho/docs/Kensho.g:362:1: primary : ( atom | PAREN_L type PAREN_R atom -> ^( CAST type atom ) );
 */
static KenshoParser_primary_return
primary(pKenshoParser ctx)
{   
    KenshoParser_primary_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    PAREN_L80;
    pANTLR3_COMMON_TOKEN    PAREN_R82;
    KenshoParser_atom_return atom79;
    #undef	RETURN_TYPE_atom79
    #define	RETURN_TYPE_atom79 KenshoParser_atom_return

    KenshoParser_type_return type81;
    #undef	RETURN_TYPE_type81
    #define	RETURN_TYPE_type81 KenshoParser_type_return

    KenshoParser_atom_return atom83;
    #undef	RETURN_TYPE_atom83
    #define	RETURN_TYPE_atom83 KenshoParser_atom_return

    pANTLR3_BASE_TREE PAREN_L80_tree;
    pANTLR3_BASE_TREE PAREN_R82_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_atom;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    PAREN_L80       = NULL;
    PAREN_R82       = NULL;
    atom79.tree = NULL;

    type81.tree = NULL;

    atom83.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    PAREN_L80_tree   = NULL;
    PAREN_R82_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_atom   = NULL;
    #define CREATE_stream_atom  if (stream_atom == NULL) {stream_atom = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule atom"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:363:2: ( atom | PAREN_L type PAREN_R atom -> ^( CAST type atom ) )
            
            ANTLR3_UINT32 alt20;

            alt20=2;

            switch ( LA(1) ) 
            {
            case OP_ADD:
            case OP_SUB:
            case OP_NOT:
            case OP_BIT_NOT:
            case LITERAL_TRUE:
            case LITERAL_FALSE:
            case ID:
            case LITERAL_INT:
            case LITERAL_OCT:
            case LITERAL_HEX:
            case LITERAL_FLOAT:
            case LITERAL_CHAR:
            	{
            		alt20=1;
            	}
                break;
            case PAREN_L:
            	{
            		switch ( LA(2) ) 
            		{
            		case OP_ADD:
            		case OP_SUB:
            		case OP_NOT:
            		case OP_BIT_NOT:
            		case LITERAL_TRUE:
            		case LITERAL_FALSE:
            		case PAREN_L:
            		case ID:
            		case LITERAL_INT:
            		case LITERAL_OCT:
            		case LITERAL_HEX:
            		case LITERAL_FLOAT:
            		case LITERAL_CHAR:
            			{
            				alt20=1;
            			}
            		    break;
            		case T_BOOL:
            		case T_BYTE:
            		case T_SHORT:
            		case T_INT:
            		case T_CHAR:
            		case T_LONG:
            		case T_FLOAT:
            		case T_DOUBLE:
            			{
            				alt20=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 20;
            		    EXCEPTION->state        = 2;


            		    goto ruleprimaryEx;
            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 20;
                EXCEPTION->state        = 0;


                goto ruleprimaryEx;
            }

            switch (alt20) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:363:4: atom
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_atom_in_primary1371);
        	        atom79=atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, atom79.tree);

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:364:4: PAREN_L type PAREN_R atom
        	    {
        	        PAREN_L80 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_primary1376); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	         
        	        CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L80, NULL);

        	        FOLLOWPUSH(FOLLOW_type_in_primary1378);
        	        type81=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        CREATE_stream_type; stream_type->add(stream_type, type81.tree, NULL);
        	        PAREN_R82 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_primary1380); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	         
        	        CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R82, NULL);

        	        FOLLOWPUSH(FOLLOW_atom_in_primary1382);
        	        atom83=atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        CREATE_stream_atom; stream_atom->add(stream_atom, atom83.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : atom, type
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 364:30: -> ^( CAST type atom )
        	        	{
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:364:33: ^( CAST type atom )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CAST, (pANTLR3_UINT8)"CAST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_atom == NULL ? NULL : stream_atom->nextTree(stream_atom));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryEx; /* Prevent compiler warnings */
    ruleprimaryEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_atom != NULL) stream_atom->free(stream_atom);
        if (stream_type != NULL) stream_type->free(stream_type);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end primary */

/** 
 * $ANTLR start atom
 * f:/dev/projects/kensho/docs/Kensho.g:367:1: atom : ( literal -> ^( LIT literal ) | call | ID | PAREN_L expression PAREN_R | unop atom -> ^( UNOP unop atom ) );
 */
static KenshoParser_atom_return
atom(pKenshoParser ctx)
{   
    KenshoParser_atom_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID86;
    pANTLR3_COMMON_TOKEN    PAREN_L87;
    pANTLR3_COMMON_TOKEN    PAREN_R89;
    KenshoParser_literal_return literal84;
    #undef	RETURN_TYPE_literal84
    #define	RETURN_TYPE_literal84 KenshoParser_literal_return

    KenshoParser_call_return call85;
    #undef	RETURN_TYPE_call85
    #define	RETURN_TYPE_call85 KenshoParser_call_return

    KenshoParser_expression_return expression88;
    #undef	RETURN_TYPE_expression88
    #define	RETURN_TYPE_expression88 KenshoParser_expression_return

    KenshoParser_unop_return unop90;
    #undef	RETURN_TYPE_unop90
    #define	RETURN_TYPE_unop90 KenshoParser_unop_return

    KenshoParser_atom_return atom91;
    #undef	RETURN_TYPE_atom91
    #define	RETURN_TYPE_atom91 KenshoParser_atom_return

    pANTLR3_BASE_TREE ID86_tree;
    pANTLR3_BASE_TREE PAREN_L87_tree;
    pANTLR3_BASE_TREE PAREN_R89_tree;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_atom;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unop;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_literal;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID86       = NULL;
    PAREN_L87       = NULL;
    PAREN_R89       = NULL;
    literal84.tree = NULL;

    call85.tree = NULL;

    expression88.tree = NULL;

    unop90.tree = NULL;

    atom91.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID86_tree   = NULL;
    PAREN_L87_tree   = NULL;
    PAREN_R89_tree   = NULL;

    stream_atom   = NULL;
    #define CREATE_stream_atom  if (stream_atom == NULL) {stream_atom = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule atom"); }
    stream_unop   = NULL;
    #define CREATE_stream_unop  if (stream_unop == NULL) {stream_unop = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unop"); }
    stream_literal   = NULL;
    #define CREATE_stream_literal  if (stream_literal == NULL) {stream_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule literal"); }

    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/Kensho.g:368:2: ( literal -> ^( LIT literal ) | call | ID | PAREN_L expression PAREN_R | unop atom -> ^( UNOP unop atom ) )
            
            ANTLR3_UINT32 alt21;

            alt21=5;

            switch ( LA(1) ) 
            {
            case LITERAL_TRUE:
            case LITERAL_FALSE:
            case LITERAL_INT:
            case LITERAL_OCT:
            case LITERAL_HEX:
            case LITERAL_FLOAT:
            case LITERAL_CHAR:
            	{
            		alt21=1;
            	}
                break;
            case ID:
            	{
            		switch ( LA(2) ) 
            		{
            		case PAREN_L:
            			{
            				alt21=2;
            			}
            		    break;
            		case OP_ADD:
            		case OP_SUB:
            		case OP_MUL:
            		case OP_DIV:
            		case OP_AND:
            		case OP_OR:
            		case OP_REM:
            		case OP_BIT_AND:
            		case OP_BIT_OR:
            		case OP_XOR:
            		case OP_SHIFT_L:
            		case OP_SHIFT_R:
            		case OP_USHIFT_R:
            		case CMP_EQ:
            		case CMP_NEQ:
            		case CMP_LT:
            		case CMP_GT:
            		case CMP_LTE:
            		case CMP_GTE:
            		case OP_ASSIGN:
            		case PAREN_R:
            		case COMMA:
            		case SEMICOLON:
            		case OP_USHIFT_L:
            			{
            				alt21=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 21;
            		    EXCEPTION->state        = 2;


            		    goto ruleatomEx;
            		}

            	}
                break;
            case PAREN_L:
            	{
            		alt21=4;
            	}
                break;
            case OP_ADD:
            case OP_SUB:
            case OP_NOT:
            case OP_BIT_NOT:
            	{
            		alt21=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 21;
                EXCEPTION->state        = 0;


                goto ruleatomEx;
            }

            switch (alt21) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/Kensho.g:368:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_atom1404);
        	        literal84=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        CREATE_stream_literal; stream_literal->add(stream_literal, literal84.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : literal
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 368:12: -> ^( LIT literal )
        	        	{
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:368:15: ^( LIT literal )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LIT, (pANTLR3_UINT8)"LIT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_literal == NULL ? NULL : stream_literal->nextTree(stream_literal));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/Kensho.g:369:4: call
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_call_in_atom1417);
        	        call85=call(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, call85.tree);

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/Kensho.g:370:4: ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        ID86 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_atom1422); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        ID86_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID86));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ID86_tree);


        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/Kensho.g:371:4: PAREN_L expression PAREN_R
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        PAREN_L87 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_atom1427); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expression_in_atom1430);
        	        expression88=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expression88.tree);
        	        PAREN_R89 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_atom1432); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/Kensho.g:372:4: unop atom
        	    {
        	        FOLLOWPUSH(FOLLOW_unop_in_atom1438);
        	        unop90=unop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        CREATE_stream_unop; stream_unop->add(stream_unop, unop90.tree, NULL);
        	        FOLLOWPUSH(FOLLOW_atom_in_atom1440);
        	        atom91=atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomEx;
        	        }

        	        CREATE_stream_atom; stream_atom->add(stream_atom, atom91.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : unop, atom
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 372:14: -> ^( UNOP unop atom )
        	        	{
        	        	    // f:/dev/projects/kensho/docs/Kensho.g:372:17: ^( UNOP unop atom )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNOP, (pANTLR3_UINT8)"UNOP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unop == NULL ? NULL : stream_unop->nextTree(stream_unop));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_atom == NULL ? NULL : stream_atom->nextTree(stream_atom));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_atom != NULL) stream_atom->free(stream_atom);
        if (stream_unop != NULL) stream_unop->free(stream_unop);
        if (stream_literal != NULL) stream_literal->free(stream_literal);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end atom */

/** 
 * $ANTLR start call
 * f:/dev/projects/kensho/docs/Kensho.g:375:1: call : ID PAREN_L ( args )? PAREN_R -> ^( CALL ID ( args )* ) ;
 */
static KenshoParser_call_return
call(pKenshoParser ctx)
{   
    KenshoParser_call_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID92;
    pANTLR3_COMMON_TOKEN    PAREN_L93;
    pANTLR3_COMMON_TOKEN    PAREN_R95;
    KenshoParser_args_return args94;
    #undef	RETURN_TYPE_args94
    #define	RETURN_TYPE_args94 KenshoParser_args_return

    pANTLR3_BASE_TREE ID92_tree;
    pANTLR3_BASE_TREE PAREN_L93_tree;
    pANTLR3_BASE_TREE PAREN_R95_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_L;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PAREN_R;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_args;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID92       = NULL;
    PAREN_L93       = NULL;
    PAREN_R95       = NULL;
    args94.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID92_tree   = NULL;
    PAREN_L93_tree   = NULL;
    PAREN_R95_tree   = NULL;

    stream_PAREN_L   = NULL;
    #define CREATE_stream_PAREN_L  if (stream_PAREN_L == NULL) {stream_PAREN_L = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_L"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_PAREN_R   = NULL;
    #define CREATE_stream_PAREN_R  if (stream_PAREN_R == NULL) {stream_PAREN_R = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PAREN_R"); } 
    stream_args   = NULL;
    #define CREATE_stream_args  if (stream_args == NULL) {stream_args = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule args"); }

    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:376:2: ( ID PAREN_L ( args )? PAREN_R -> ^( CALL ID ( args )* ) )
        // f:/dev/projects/kensho/docs/Kensho.g:376:4: ID PAREN_L ( args )? PAREN_R
        {
            ID92 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_call1462); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID92, NULL);

            PAREN_L93 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_L, &FOLLOW_PAREN_L_in_call1464); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }
             
            CREATE_stream_PAREN_L; stream_PAREN_L->add(stream_PAREN_L, PAREN_L93, NULL);


            // f:/dev/projects/kensho/docs/Kensho.g:376:15: ( args )?
            {
                int alt22=2;
                switch ( LA(1) ) 
                {
                    case OP_ADD:
                    case OP_SUB:
                    case OP_NOT:
                    case OP_BIT_NOT:
                    case LITERAL_TRUE:
                    case LITERAL_FALSE:
                    case PAREN_L:
                    case ID:
                    case LITERAL_INT:
                    case LITERAL_OCT:
                    case LITERAL_HEX:
                    case LITERAL_FLOAT:
                    case LITERAL_CHAR:
                    	{
                    		alt22=1;
                    	}
                        break;
                }

                switch (alt22) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/Kensho.g:376:15: args
            	    {
            	        FOLLOWPUSH(FOLLOW_args_in_call1466);
            	        args94=args(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallEx;
            	        }

            	        CREATE_stream_args; stream_args->add(stream_args, args94.tree, NULL);

            	    }
            	    break;

                }
            }
            PAREN_R95 = (pANTLR3_COMMON_TOKEN) MATCHT(PAREN_R, &FOLLOW_PAREN_R_in_call1469); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }
             
            CREATE_stream_PAREN_R; stream_PAREN_R->add(stream_PAREN_R, PAREN_R95, NULL);


             
            /* AST REWRITE
             * elements          : args, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 377:3: -> ^( CALL ID ( args )* )
            	{
            	    // f:/dev/projects/kensho/docs/Kensho.g:377:6: ^( CALL ID ( args )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // f:/dev/projects/kensho/docs/Kensho.g:377:16: ( args )*
            	        {
            	        	while ( (stream_args != NULL && stream_args->hasNext(stream_args))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_args == NULL ? NULL : stream_args->nextTree(stream_args));

            	        	}
            	        	if (stream_args != NULL) stream_args->reset(stream_args);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallEx; /* Prevent compiler warnings */
    rulecallEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PAREN_L != NULL) stream_PAREN_L->free(stream_PAREN_L);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_PAREN_R != NULL) stream_PAREN_R->free(stream_PAREN_R);
        if (stream_args != NULL) stream_args->free(stream_args);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end call */

/** 
 * $ANTLR start literal
 * f:/dev/projects/kensho/docs/Kensho.g:380:1: literal : ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR );
 */
static KenshoParser_literal_return
literal(pKenshoParser ctx)
{   
    KenshoParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set96;

    pANTLR3_BASE_TREE set96_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set96       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set96_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:381:2: ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set96=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= LITERAL_TRUE) && (LA(1) <= LITERAL_FALSE)) || ((LA(1) >= LITERAL_INT) && (LA(1) <= LITERAL_CHAR)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set96)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start unop
 * f:/dev/projects/kensho/docs/Kensho.g:391:1: unop : ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT );
 */
static KenshoParser_unop_return
unop(pKenshoParser ctx)
{   
    KenshoParser_unop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set97;

    pANTLR3_BASE_TREE set97_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set97       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set97_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:392:2: ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set97=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_SUB)) || ((LA(1) >= OP_NOT) && (LA(1) <= OP_BIT_NOT)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set97)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_unop0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unop0);    goto ruleunopEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunopEx; /* Prevent compiler warnings */
    ruleunopEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end unop */

/** 
 * $ANTLR start binop
 * f:/dev/projects/kensho/docs/Kensho.g:398:1: binop : ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_REM | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE );
 */
static KenshoParser_binop_return
binop(pKenshoParser ctx)
{   
    KenshoParser_binop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set98;

    pANTLR3_BASE_TREE set98_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set98       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set98_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/Kensho.g:399:2: ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_REM | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE )
        // f:/dev/projects/kensho/docs/Kensho.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set98=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_DIV)) || ((LA(1) >= OP_AND) && (LA(1) <= OP_ASSIGN)) || LA(1) == OP_USHIFT_L )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set98)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_binop0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_binop0);    goto rulebinopEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebinopEx; /* Prevent compiler warnings */
    rulebinopEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end binop */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
