/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 18, 2009 10:09:25
 *
 *     -  From the grammar source file : f:/dev/projects/kensho/docs/KenshoTreeParser.g
 *     -                            On : 2009-10-02 07:09:12
 *     -           for the tree parser : KenshoTreeParserTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "KenshoTreeParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pKenshoTreeParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pKenshoTreeParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pKenshoTreeParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   KenshoTreeParserTokenNames[67+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "T_BOOL",
        (pANTLR3_UINT8) "T_BYTE",
        (pANTLR3_UINT8) "T_SHORT",
        (pANTLR3_UINT8) "T_INT",
        (pANTLR3_UINT8) "T_CHAR",
        (pANTLR3_UINT8) "T_LONG",
        (pANTLR3_UINT8) "T_FLOAT",
        (pANTLR3_UINT8) "T_DOUBLE",
        (pANTLR3_UINT8) "T_VOID",
        (pANTLR3_UINT8) "OP_ADD",
        (pANTLR3_UINT8) "OP_SUB",
        (pANTLR3_UINT8) "OP_MUL",
        (pANTLR3_UINT8) "OP_DIV",
        (pANTLR3_UINT8) "OP_NOT",
        (pANTLR3_UINT8) "OP_BIT_NOT",
        (pANTLR3_UINT8) "OP_AND",
        (pANTLR3_UINT8) "OP_OR",
        (pANTLR3_UINT8) "OP_BIT_AND",
        (pANTLR3_UINT8) "OP_BIT_OR",
        (pANTLR3_UINT8) "OP_XOR",
        (pANTLR3_UINT8) "OP_SHIFT_L",
        (pANTLR3_UINT8) "OP_SHIFT_R",
        (pANTLR3_UINT8) "OP_USHIFT_L",
        (pANTLR3_UINT8) "OP_USHIFT_R",
        (pANTLR3_UINT8) "CMP_EQ",
        (pANTLR3_UINT8) "CMP_NEQ",
        (pANTLR3_UINT8) "CMP_LT",
        (pANTLR3_UINT8) "CMP_GT",
        (pANTLR3_UINT8) "CMP_LTE",
        (pANTLR3_UINT8) "CMP_GTE",
        (pANTLR3_UINT8) "OP_ASSIGN",
        (pANTLR3_UINT8) "K_IF",
        (pANTLR3_UINT8) "K_ELSE",
        (pANTLR3_UINT8) "K_WHILE",
        (pANTLR3_UINT8) "LITERAL_TRUE",
        (pANTLR3_UINT8) "LITERAL_FALSE",
        (pANTLR3_UINT8) "K_NATIVE",
        (pANTLR3_UINT8) "BRACE_L",
        (pANTLR3_UINT8) "BRACE_R",
        (pANTLR3_UINT8) "PAREN_L",
        (pANTLR3_UINT8) "PAREN_R",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "FUNDEF",
        (pANTLR3_UINT8) "FUNSIG",
        (pANTLR3_UINT8) "ARGDEF",
        (pANTLR3_UINT8) "BINOP",
        (pANTLR3_UINT8) "LIT",
        (pANTLR3_UINT8) "UNOP",
        (pANTLR3_UINT8) "VARDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "CAST",
        (pANTLR3_UINT8) "KENNIDEF",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LITERAL_INT",
        (pANTLR3_UINT8) "LITERAL_OCT",
        (pANTLR3_UINT8) "LITERAL_HEX",
        (pANTLR3_UINT8) "LITERAL_FLOAT",
        (pANTLR3_UINT8) "LITERAL_CHAR",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "HEXDIGIT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "ESCSEQ",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "BLOCK_COMMENT"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static KenshoTreeParser_program_return	program    (pKenshoTreeParser ctx);
static KenshoTreeParser_kenniFunction_return	kenniFunction    (pKenshoTreeParser ctx);
static KenshoTreeParser_function_return	function    (pKenshoTreeParser ctx);
static KenshoTreeParser_signature_return	signature    (pKenshoTreeParser ctx);
static KenshoTreeParser_functionType_return	functionType    (pKenshoTreeParser ctx);
static KenshoTreeParser_params_return	params    (pKenshoTreeParser ctx);
static KenshoTreeParser_statement_return	statement    (pKenshoTreeParser ctx);
static KenshoTreeParser_ifStat_return	ifStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_elseStat_return	elseStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_whileStat_return	whileStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_variable_return	variable    (pKenshoTreeParser ctx);
static KenshoTreeParser_type_return	type    (pKenshoTreeParser ctx);
static KenshoTreeParser_expression_return	expression    (pKenshoTreeParser ctx);
static KenshoTreeParser_call_return	call    (pKenshoTreeParser ctx);
static KenshoTreeParser_literal_return	literal    (pKenshoTreeParser ctx);
static KenshoTreeParser_unop_return	unop    (pKenshoTreeParser ctx);
static KenshoTreeParser_binop_return	binop    (pKenshoTreeParser ctx);
static void	KenshoTreeParserFree(pKenshoTreeParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "f:/dev/projects/kensho/docs/KenshoTreeParser.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new KenshoTreeParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoTreeParser
KenshoTreeParserNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return KenshoTreeParserNewSSD(instream, NULL);
}

/** \brief Create a new KenshoTreeParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoTreeParser
KenshoTreeParserNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pKenshoTreeParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pKenshoTreeParser) ANTLR3_CALLOC(1, sizeof(KenshoTreeParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in KenshoTreeParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our KenshoTreeParser interface
     */
    ctx->program	= program;
    ctx->kenniFunction	= kenniFunction;
    ctx->function	= function;
    ctx->signature	= signature;
    ctx->functionType	= functionType;
    ctx->params	= params;
    ctx->statement	= statement;
    ctx->ifStat	= ifStat;
    ctx->elseStat	= elseStat;
    ctx->whileStat	= whileStat;
    ctx->variable	= variable;
    ctx->type	= type;
    ctx->expression	= expression;
    ctx->call	= call;
    ctx->literal	= literal;
    ctx->unop	= unop;
    ctx->binop	= binop;
    ctx->free			= KenshoTreeParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = KenshoTreeParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 KenshoTreeParserFree(pKenshoTreeParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);

	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return KenshoTreeParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_program70  */
static	ANTLR3_BITWORD FOLLOW_function_in_program70_bits[]	= { ANTLR3_UINT64_LIT(0x0100800000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_program70	= { FOLLOW_function_in_program70_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_kenniFunction_in_program74  */
static	ANTLR3_BITWORD FOLLOW_kenniFunction_in_program74_bits[]	= { ANTLR3_UINT64_LIT(0x0100800000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_kenniFunction_in_program74	= { FOLLOW_kenniFunction_in_program74_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KENNIDEF_in_kenniFunction90  */
static	ANTLR3_BITWORD FOLLOW_KENNIDEF_in_kenniFunction90_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_KENNIDEF_in_kenniFunction90	= { FOLLOW_KENNIDEF_in_kenniFunction90_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_kenniFunction92  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_kenniFunction92_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_kenniFunction92	= { FOLLOW_functionType_in_kenniFunction92_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_kenniFunction94  */
static	ANTLR3_BITWORD FOLLOW_ID_in_kenniFunction94_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_kenniFunction94	= { FOLLOW_ID_in_kenniFunction94_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_kenniFunction96  */
static	ANTLR3_BITWORD FOLLOW_type_in_kenniFunction96_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_kenniFunction96	= { FOLLOW_type_in_kenniFunction96_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNDEF_in_function112  */
static	ANTLR3_BITWORD FOLLOW_FUNDEF_in_function112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNDEF_in_function112	= { FOLLOW_FUNDEF_in_function112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_function114  */
static	ANTLR3_BITWORD FOLLOW_signature_in_function114_bits[]	= { ANTLR3_UINT64_LIT(0x02FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_function114	= { FOLLOW_signature_in_function114_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_function116  */
static	ANTLR3_BITWORD FOLLOW_statement_in_function116_bits[]	= { ANTLR3_UINT64_LIT(0x02FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_function116	= { FOLLOW_statement_in_function116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNSIG_in_signature132  */
static	ANTLR3_BITWORD FOLLOW_FUNSIG_in_signature132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNSIG_in_signature132	= { FOLLOW_FUNSIG_in_signature132_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_signature134  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_signature134_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_signature134	= { FOLLOW_functionType_in_signature134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_signature136  */
static	ANTLR3_BITWORD FOLLOW_ID_in_signature136_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_signature136	= { FOLLOW_ID_in_signature136_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_params_in_signature138  */
static	ANTLR3_BITWORD FOLLOW_params_in_signature138_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_params_in_signature138	= { FOLLOW_params_in_signature138_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_VOID_in_functionType153  */
static	ANTLR3_BITWORD FOLLOW_T_VOID_in_functionType153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_VOID_in_functionType153	= { FOLLOW_T_VOID_in_functionType153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_functionType157  */
static	ANTLR3_BITWORD FOLLOW_type_in_functionType157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_functionType157	= { FOLLOW_type_in_functionType157_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGDEF_in_params172  */
static	ANTLR3_BITWORD FOLLOW_ARGDEF_in_params172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGDEF_in_params172	= { FOLLOW_ARGDEF_in_params172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params174  */
static	ANTLR3_BITWORD FOLLOW_type_in_params174_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params174	= { FOLLOW_type_in_params174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params176  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params176	= { FOLLOW_ID_in_params176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_statement188  */
static	ANTLR3_BITWORD FOLLOW_variable_in_statement188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_statement188	= { FOLLOW_variable_in_statement188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_statement193  */
static	ANTLR3_BITWORD FOLLOW_expression_in_statement193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_statement193	= { FOLLOW_expression_in_statement193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStat_in_statement198  */
static	ANTLR3_BITWORD FOLLOW_ifStat_in_statement198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStat_in_statement198	= { FOLLOW_ifStat_in_statement198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStat_in_statement203  */
static	ANTLR3_BITWORD FOLLOW_whileStat_in_statement203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStat_in_statement203	= { FOLLOW_whileStat_in_statement203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_IF_in_ifStat216  */
static	ANTLR3_BITWORD FOLLOW_K_IF_in_ifStat216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_IF_in_ifStat216	= { FOLLOW_K_IF_in_ifStat216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStat218  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStat218_bits[]	= { ANTLR3_UINT64_LIT(0x02FC003800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStat218	= { FOLLOW_expression_in_ifStat218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStat220  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStat220_bits[]	= { ANTLR3_UINT64_LIT(0x02FC003800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStat220	= { FOLLOW_statement_in_ifStat220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseStat_in_ifStat223  */
static	ANTLR3_BITWORD FOLLOW_elseStat_in_ifStat223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_elseStat_in_ifStat223	= { FOLLOW_elseStat_in_ifStat223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_ELSE_in_elseStat239  */
static	ANTLR3_BITWORD FOLLOW_K_ELSE_in_elseStat239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_ELSE_in_elseStat239	= { FOLLOW_K_ELSE_in_elseStat239_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_elseStat241  */
static	ANTLR3_BITWORD FOLLOW_statement_in_elseStat241_bits[]	= { ANTLR3_UINT64_LIT(0x02FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_elseStat241	= { FOLLOW_statement_in_elseStat241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_WHILE_in_whileStat255  */
static	ANTLR3_BITWORD FOLLOW_K_WHILE_in_whileStat255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_WHILE_in_whileStat255	= { FOLLOW_K_WHILE_in_whileStat255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStat257  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStat257_bits[]	= { ANTLR3_UINT64_LIT(0x02FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStat257	= { FOLLOW_expression_in_whileStat257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStat259  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStat259_bits[]	= { ANTLR3_UINT64_LIT(0x02FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStat259	= { FOLLOW_statement_in_whileStat259_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARDEF_in_variable284  */
static	ANTLR3_BITWORD FOLLOW_VARDEF_in_variable284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARDEF_in_variable284	= { FOLLOW_VARDEF_in_variable284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variable288  */
static	ANTLR3_BITWORD FOLLOW_type_in_variable288_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variable288	= { FOLLOW_type_in_variable288_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable292  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable292	= { FOLLOW_ID_in_variable292_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type0	= { FOLLOW_set_in_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_expression358  */
static	ANTLR3_BITWORD FOLLOW_ID_in_expression358_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_expression358	= { FOLLOW_ID_in_expression358_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIT_in_expression366  */
static	ANTLR3_BITWORD FOLLOW_LIT_in_expression366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LIT_in_expression366	= { FOLLOW_LIT_in_expression366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_expression370  */
static	ANTLR3_BITWORD FOLLOW_literal_in_expression370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_expression370	= { FOLLOW_literal_in_expression370_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_call_in_expression378  */
static	ANTLR3_BITWORD FOLLOW_call_in_expression378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_call_in_expression378	= { FOLLOW_call_in_expression378_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNOP_in_expression386  */
static	ANTLR3_BITWORD FOLLOW_UNOP_in_expression386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNOP_in_expression386	= { FOLLOW_UNOP_in_expression386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unop_in_expression388  */
static	ANTLR3_BITWORD FOLLOW_unop_in_expression388_bits[]	= { ANTLR3_UINT64_LIT(0x02DC000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_unop_in_expression388	= { FOLLOW_unop_in_expression388_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression392  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression392_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression392	= { FOLLOW_expression_in_expression392_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CAST_in_expression401  */
static	ANTLR3_BITWORD FOLLOW_CAST_in_expression401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CAST_in_expression401	= { FOLLOW_CAST_in_expression401_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_expression403  */
static	ANTLR3_BITWORD FOLLOW_type_in_expression403_bits[]	= { ANTLR3_UINT64_LIT(0x02DC000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_expression403	= { FOLLOW_type_in_expression403_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression407  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression407	= { FOLLOW_expression_in_expression407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINOP_in_expression416  */
static	ANTLR3_BITWORD FOLLOW_BINOP_in_expression416_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BINOP_in_expression416	= { FOLLOW_BINOP_in_expression416_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binop_in_expression418  */
static	ANTLR3_BITWORD FOLLOW_binop_in_expression418_bits[]	= { ANTLR3_UINT64_LIT(0x02DC000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_binop_in_expression418	= { FOLLOW_binop_in_expression418_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression422  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression422_bits[]	= { ANTLR3_UINT64_LIT(0x02DC000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression422	= { FOLLOW_expression_in_expression422_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression426  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression426	= { FOLLOW_expression_in_expression426_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_call447  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_call447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_call447	= { FOLLOW_CALL_in_call447_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_call455  */
static	ANTLR3_BITWORD FOLLOW_ID_in_call455_bits[]	= { ANTLR3_UINT64_LIT(0x02DC000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_call455	= { FOLLOW_ID_in_call455_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_call467  */
static	ANTLR3_BITWORD FOLLOW_expression_in_call467_bits[]	= { ANTLR3_UINT64_LIT(0x02DC000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_call467	= { FOLLOW_expression_in_call467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unop0	= { FOLLOW_set_in_unop0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_binop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_binop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_binop0	= { FOLLOW_set_in_binop0_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:30:1: program : ( function | kenniFunction )* ;
 */
static KenshoTreeParser_program_return
program(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_program_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_function_return function1;
    #undef	RETURN_TYPE_function1
    #define	RETURN_TYPE_function1 KenshoTreeParser_function_return

    KenshoTreeParser_kenniFunction_return kenniFunction2;
    #undef	RETURN_TYPE_kenniFunction2
    #define	RETURN_TYPE_kenniFunction2 KenshoTreeParser_kenniFunction_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    function1.tree = NULL;

    kenniFunction2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:31:2: ( ( function | kenniFunction )* )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:31:4: ( function | kenniFunction )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:31:4: ( function | kenniFunction )*

            for (;;)
            {
                int alt1=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == FUNDEF) ) 
                    {
                        alt1=1;
                    }
                    else if ( (LA1_0 == KENNIDEF) ) 
                    {
                        alt1=2;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:31:6: function
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_function_in_program70);
            	        function1=function(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, function1.tree);

            	    }
            	    break;
            	case 2:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:31:17: kenniFunction
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_kenniFunction_in_program74);
            	        kenniFunction2=kenniFunction(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, kenniFunction2.tree);

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start kenniFunction
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:34:1: kenniFunction : ^( KENNIDEF functionType ID ( type )* ) ;
 */
static KenshoTreeParser_kenniFunction_return
kenniFunction(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_kenniFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    KENNIDEF3;
    pANTLR3_BASE_TREE    ID5;
    KenshoTreeParser_functionType_return functionType4;
    #undef	RETURN_TYPE_functionType4
    #define	RETURN_TYPE_functionType4 KenshoTreeParser_functionType_return

    KenshoTreeParser_type_return type6;
    #undef	RETURN_TYPE_type6
    #define	RETURN_TYPE_type6 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE KENNIDEF3_tree;
    pANTLR3_BASE_TREE ID5_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    KENNIDEF3       = NULL;
    ID5       = NULL;
    functionType4.tree = NULL;

    type6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KENNIDEF3_tree   = NULL;
    ID5_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:35:2: ( ^( KENNIDEF functionType ID ( type )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:35:4: ^( KENNIDEF functionType ID ( type )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            KENNIDEF3 = (pANTLR3_BASE_TREE) MATCHT(KENNIDEF, &FOLLOW_KENNIDEF_in_kenniFunction90); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            KENNIDEF3_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, KENNIDEF3);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, KENNIDEF3_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_functionType_in_kenniFunction92);
            functionType4=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, functionType4.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            ID5 = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_kenniFunction94); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            ID5_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ID5);ADAPTOR->addChild(ADAPTOR, root_1, ID5_tree);


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:35:31: ( type )*

            for (;;)
            {
                int alt2=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (((LA2_0 >= T_BOOL) && (LA2_0 <= T_DOUBLE))) ) 
                    {
                        alt2=1;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:35:31: type
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_type_in_kenniFunction96);
            	        type6=type(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulekenniFunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, type6.tree);

            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulekenniFunctionEx; /* Prevent compiler warnings */
    rulekenniFunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end kenniFunction */

/** 
 * $ANTLR start function
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:38:1: function : ^( FUNDEF signature ( statement )* ) ;
 */
static KenshoTreeParser_function_return
function(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_function_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    FUNDEF7;
    KenshoTreeParser_signature_return signature8;
    #undef	RETURN_TYPE_signature8
    #define	RETURN_TYPE_signature8 KenshoTreeParser_signature_return

    KenshoTreeParser_statement_return statement9;
    #undef	RETURN_TYPE_statement9
    #define	RETURN_TYPE_statement9 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE FUNDEF7_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    FUNDEF7       = NULL;
    signature8.tree = NULL;

    statement9.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    FUNDEF7_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:39:2: ( ^( FUNDEF signature ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:39:4: ^( FUNDEF signature ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUNDEF7 = (pANTLR3_BASE_TREE) MATCHT(FUNDEF, &FOLLOW_FUNDEF_in_function112); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            FUNDEF7_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUNDEF7);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUNDEF7_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_signature_in_function114);
            signature8=signature(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, signature8.tree);

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:39:23: ( statement )*

            for (;;)
            {
                int alt3=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA3_0 = LA(1);
                    if ( (LA3_0 == K_IF || LA3_0 == K_WHILE || ((LA3_0 >= BINOP) && (LA3_0 <= CAST)) || LA3_0 == ID) ) 
                    {
                        alt3=1;
                    }

                }
                switch (alt3) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:39:23: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_function116);
            	        statement9=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement9.tree);

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end function */

/** 
 * $ANTLR start signature
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:42:1: signature : ^( FUNSIG functionType ID ( params )* ) ;
 */
static KenshoTreeParser_signature_return
signature(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_signature_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    FUNSIG10;
    pANTLR3_BASE_TREE    ID12;
    KenshoTreeParser_functionType_return functionType11;
    #undef	RETURN_TYPE_functionType11
    #define	RETURN_TYPE_functionType11 KenshoTreeParser_functionType_return

    KenshoTreeParser_params_return params13;
    #undef	RETURN_TYPE_params13
    #define	RETURN_TYPE_params13 KenshoTreeParser_params_return

    pANTLR3_BASE_TREE FUNSIG10_tree;
    pANTLR3_BASE_TREE ID12_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    FUNSIG10       = NULL;
    ID12       = NULL;
    functionType11.tree = NULL;

    params13.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    FUNSIG10_tree   = NULL;
    ID12_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:43:2: ( ^( FUNSIG functionType ID ( params )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:43:4: ^( FUNSIG functionType ID ( params )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUNSIG10 = (pANTLR3_BASE_TREE) MATCHT(FUNSIG, &FOLLOW_FUNSIG_in_signature132); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            FUNSIG10_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUNSIG10);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUNSIG10_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_functionType_in_signature134);
            functionType11=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, functionType11.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            ID12 = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_signature136); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            ID12_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ID12);ADAPTOR->addChild(ADAPTOR, root_1, ID12_tree);


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:43:29: ( params )*

            for (;;)
            {
                int alt4=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA4_0 = LA(1);
                    if ( (LA4_0 == ARGDEF) ) 
                    {
                        alt4=1;
                    }

                }
                switch (alt4) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:43:29: params
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_params_in_signature138);
            	        params13=params(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignatureEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, params13.tree);

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureEx; /* Prevent compiler warnings */
    rulesignatureEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end signature */

/** 
 * $ANTLR start functionType
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:46:1: functionType : ( T_VOID | type );
 */
static KenshoTreeParser_functionType_return
functionType(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_functionType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    T_VOID14;
    KenshoTreeParser_type_return type15;
    #undef	RETURN_TYPE_type15
    #define	RETURN_TYPE_type15 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE T_VOID14_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    T_VOID14       = NULL;
    type15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    T_VOID14_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:47:2: ( T_VOID | type )
            
            ANTLR3_UINT32 alt5;

            alt5=2;


            {
                int LA5_0 = LA(1);
                if ( (LA5_0 == T_VOID) ) 
                {
                    alt5=1;
                }
                else if ( (((LA5_0 >= T_BOOL) && (LA5_0 <= T_DOUBLE))) ) 
                {
                    alt5=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 5;
                    EXCEPTION->state        = 0;


                    goto rulefunctionTypeEx;
                }
            }
            switch (alt5) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:47:4: T_VOID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        T_VOID14 = (pANTLR3_BASE_TREE) MATCHT(T_VOID, &FOLLOW_T_VOID_in_functionType153); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        T_VOID14_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, T_VOID14);ADAPTOR->addChild(ADAPTOR, root_0, T_VOID14_tree);


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:47:13: type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_type_in_functionType157);
        	        type15=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, type15.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionTypeEx; /* Prevent compiler warnings */
    rulefunctionTypeEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end functionType */

/** 
 * $ANTLR start params
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:50:1: params : ^( ARGDEF type ID ) ;
 */
static KenshoTreeParser_params_return
params(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_params_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ARGDEF16;
    pANTLR3_BASE_TREE    ID18;
    KenshoTreeParser_type_return type17;
    #undef	RETURN_TYPE_type17
    #define	RETURN_TYPE_type17 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE ARGDEF16_tree;
    pANTLR3_BASE_TREE ID18_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ARGDEF16       = NULL;
    ID18       = NULL;
    type17.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ARGDEF16_tree   = NULL;
    ID18_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:51:2: ( ^( ARGDEF type ID ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:51:4: ^( ARGDEF type ID )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ARGDEF16 = (pANTLR3_BASE_TREE) MATCHT(ARGDEF, &FOLLOW_ARGDEF_in_params172); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            ARGDEF16_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARGDEF16);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARGDEF16_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_type_in_params174);
            type17=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, type17.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            ID18 = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_params176); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            ID18_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ID18);ADAPTOR->addChild(ADAPTOR, root_1, ID18_tree);


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparamsEx; /* Prevent compiler warnings */
    ruleparamsEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end params */

/** 
 * $ANTLR start statement
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:54:1: statement : ( variable | expression | ifStat | whileStat );
 */
static KenshoTreeParser_statement_return
statement(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_statement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_variable_return variable19;
    #undef	RETURN_TYPE_variable19
    #define	RETURN_TYPE_variable19 KenshoTreeParser_variable_return

    KenshoTreeParser_expression_return expression20;
    #undef	RETURN_TYPE_expression20
    #define	RETURN_TYPE_expression20 KenshoTreeParser_expression_return

    KenshoTreeParser_ifStat_return ifStat21;
    #undef	RETURN_TYPE_ifStat21
    #define	RETURN_TYPE_ifStat21 KenshoTreeParser_ifStat_return

    KenshoTreeParser_whileStat_return whileStat22;
    #undef	RETURN_TYPE_whileStat22
    #define	RETURN_TYPE_whileStat22 KenshoTreeParser_whileStat_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    variable19.tree = NULL;

    expression20.tree = NULL;

    ifStat21.tree = NULL;

    whileStat22.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:55:2: ( variable | expression | ifStat | whileStat )
            
            ANTLR3_UINT32 alt6;

            alt6=4;

            switch ( LA(1) ) 
            {
            case VARDEF:
            	{
            		alt6=1;
            	}
                break;
            case BINOP:
            case LIT:
            case UNOP:
            case CALL:
            case CAST:
            case ID:
            	{
            		alt6=2;
            	}
                break;
            case K_IF:
            	{
            		alt6=3;
            	}
                break;
            case K_WHILE:
            	{
            		alt6=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt6) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:55:4: variable
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_variable_in_statement188);
        	        variable19=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, variable19.tree);

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:56:4: expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_statement193);
        	        expression20=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, expression20.tree);

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:57:4: ifStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_ifStat_in_statement198);
        	        ifStat21=ifStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, ifStat21.tree);

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:58:4: whileStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_whileStat_in_statement203);
        	        whileStat22=whileStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, whileStat22.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start ifStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:61:1: ifStat : ^( K_IF expression ( statement )* ( elseStat )? ) ;
 */
static KenshoTreeParser_ifStat_return
ifStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_ifStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_IF23;
    KenshoTreeParser_expression_return expression24;
    #undef	RETURN_TYPE_expression24
    #define	RETURN_TYPE_expression24 KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return statement25;
    #undef	RETURN_TYPE_statement25
    #define	RETURN_TYPE_statement25 KenshoTreeParser_statement_return

    KenshoTreeParser_elseStat_return elseStat26;
    #undef	RETURN_TYPE_elseStat26
    #define	RETURN_TYPE_elseStat26 KenshoTreeParser_elseStat_return

    pANTLR3_BASE_TREE K_IF23_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_IF23       = NULL;
    expression24.tree = NULL;

    statement25.tree = NULL;

    elseStat26.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_IF23_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:62:2: ( ^( K_IF expression ( statement )* ( elseStat )? ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:62:4: ^( K_IF expression ( statement )* ( elseStat )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_IF23 = (pANTLR3_BASE_TREE) MATCHT(K_IF, &FOLLOW_K_IF_in_ifStat216); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            K_IF23_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_IF23);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_IF23_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_ifStat218);
            expression24=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, expression24.tree);

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:62:22: ( statement )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == K_IF || LA7_0 == K_WHILE || ((LA7_0 >= BINOP) && (LA7_0 <= CAST)) || LA7_0 == ID) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:62:22: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStat220);
            	        statement25=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement25.tree);

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:62:33: ( elseStat )?
            {
                int alt8=2;
                {
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == K_ELSE) ) 
                    {
                        alt8=1;
                    }
                }
                switch (alt8) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:62:33: elseStat
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_elseStat_in_ifStat223);
            	        elseStat26=elseStat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, elseStat26.tree);

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatEx; /* Prevent compiler warnings */
    ruleifStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end ifStat */

/** 
 * $ANTLR start elseStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:65:1: elseStat : ^( K_ELSE ( statement )* ) ;
 */
static KenshoTreeParser_elseStat_return
elseStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_elseStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_ELSE27;
    KenshoTreeParser_statement_return statement28;
    #undef	RETURN_TYPE_statement28
    #define	RETURN_TYPE_statement28 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE K_ELSE27_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_ELSE27       = NULL;
    statement28.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_ELSE27_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:66:2: ( ^( K_ELSE ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:66:4: ^( K_ELSE ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_ELSE27 = (pANTLR3_BASE_TREE) MATCHT(K_ELSE, &FOLLOW_K_ELSE_in_elseStat239); 
            if  (HASEXCEPTION())
            {
                goto ruleelseStatEx;
            }

            K_ELSE27_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_ELSE27);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_ELSE27_tree, root_1);



            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

                // f:/dev/projects/kensho/docs/KenshoTreeParser.g:66:13: ( statement )*

                for (;;)
                {
                    int alt9=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA9_0 = LA(1);
                        if ( (LA9_0 == K_IF || LA9_0 == K_WHILE || ((LA9_0 >= BINOP) && (LA9_0 <= CAST)) || LA9_0 == ID) ) 
                        {
                            alt9=1;
                        }

                    }
                    switch (alt9) 
                    {
                	case 1:
                	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:66:13: statement
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_statement_in_elseStat241);
                	        statement28=statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleelseStatEx;
                	        }

                	        	ADAPTOR->addChild(ADAPTOR, root_1, statement28.tree);

                	    }
                	    break;

                	default:
                	    goto loop9;	/* break out of the loop */
                	    break;
                    }
                }
                loop9: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
            }ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseStatEx; /* Prevent compiler warnings */
    ruleelseStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end elseStat */

/** 
 * $ANTLR start whileStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:69:1: whileStat : ^( K_WHILE expression ( statement )* ) ;
 */
static KenshoTreeParser_whileStat_return
whileStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_whileStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_WHILE29;
    KenshoTreeParser_expression_return expression30;
    #undef	RETURN_TYPE_expression30
    #define	RETURN_TYPE_expression30 KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return statement31;
    #undef	RETURN_TYPE_statement31
    #define	RETURN_TYPE_statement31 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE K_WHILE29_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_WHILE29       = NULL;
    expression30.tree = NULL;

    statement31.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_WHILE29_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:70:2: ( ^( K_WHILE expression ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:70:4: ^( K_WHILE expression ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_WHILE29 = (pANTLR3_BASE_TREE) MATCHT(K_WHILE, &FOLLOW_K_WHILE_in_whileStat255); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            K_WHILE29_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_WHILE29);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_WHILE29_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_whileStat257);
            expression30=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, expression30.tree);

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:70:25: ( statement )*

            for (;;)
            {
                int alt10=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == K_IF || LA10_0 == K_WHILE || ((LA10_0 >= BINOP) && (LA10_0 <= CAST)) || LA10_0 == ID) ) 
                    {
                        alt10=1;
                    }

                }
                switch (alt10) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:70:25: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_whileStat259);
            	        statement31=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement31.tree);

            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatEx; /* Prevent compiler warnings */
    rulewhileStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end whileStat */

/** 
 * $ANTLR start variable
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:73:1: variable returns [kensho::ast::VariableDefinition* node] : ^( VARDEF t= type n= ID ) ;
 */
static KenshoTreeParser_variable_return
variable(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_variable_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    VARDEF32;
    KenshoTreeParser_type_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE VARDEF32_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    VARDEF32       = NULL;
    t.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    VARDEF32_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:78:2: ( ^( VARDEF t= type n= ID ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:78:4: ^( VARDEF t= type n= ID )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            VARDEF32 = (pANTLR3_BASE_TREE) MATCHT(VARDEF, &FOLLOW_VARDEF_in_variable284); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            VARDEF32_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, VARDEF32);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, VARDEF32_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_type_in_variable288);
            t=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_variable292); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }
    else
    {
	{

	    	std::string name((char*)n->getText(n)->chars);
	    	retval.node= new kensho::ast::VariableDefinition(name, (t.tree)->getType((t.tree)));

	}
    }

    return retval;
}
/* $ANTLR end variable */

/** 
 * $ANTLR start type
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:81:1: type : ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE );
 */
static KenshoTreeParser_type_return
type(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set33;

    pANTLR3_BASE_TREE set33_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set33       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set33_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:82:2: ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set33=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= T_BOOL) && (LA(1) <= T_DOUBLE)) )
            {
                CONSUME();

                set33_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set33);

                ADAPTOR->addChild(ADAPTOR, root_0, set33_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type0);    goto ruletypeEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start expression
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:92:1: expression returns [kensho::ast::Node* node] : (name= ID | ^( LIT lit= literal ) | call | ^( UNOP unop unex= expression ) | ^( CAST type castex= expression ) | ^( BINOP binop left= expression right= expression ) );
 */
static KenshoTreeParser_expression_return
expression(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    name;
    pANTLR3_BASE_TREE    LIT34;
    pANTLR3_BASE_TREE    UNOP36;
    pANTLR3_BASE_TREE    CAST38;
    pANTLR3_BASE_TREE    BINOP40;
    KenshoTreeParser_literal_return lit;
    #undef	RETURN_TYPE_lit
    #define	RETURN_TYPE_lit KenshoTreeParser_literal_return

    KenshoTreeParser_expression_return unex;
    #undef	RETURN_TYPE_unex
    #define	RETURN_TYPE_unex KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return castex;
    #undef	RETURN_TYPE_castex
    #define	RETURN_TYPE_castex KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return left;
    #undef	RETURN_TYPE_left
    #define	RETURN_TYPE_left KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return right;
    #undef	RETURN_TYPE_right
    #define	RETURN_TYPE_right KenshoTreeParser_expression_return

    KenshoTreeParser_call_return call35;
    #undef	RETURN_TYPE_call35
    #define	RETURN_TYPE_call35 KenshoTreeParser_call_return

    KenshoTreeParser_unop_return unop37;
    #undef	RETURN_TYPE_unop37
    #define	RETURN_TYPE_unop37 KenshoTreeParser_unop_return

    KenshoTreeParser_type_return type39;
    #undef	RETURN_TYPE_type39
    #define	RETURN_TYPE_type39 KenshoTreeParser_type_return

    KenshoTreeParser_binop_return binop41;
    #undef	RETURN_TYPE_binop41
    #define	RETURN_TYPE_binop41 KenshoTreeParser_binop_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE LIT34_tree;
    pANTLR3_BASE_TREE UNOP36_tree;
    pANTLR3_BASE_TREE CAST38_tree;
    pANTLR3_BASE_TREE BINOP40_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    name       = NULL;
    LIT34       = NULL;
    UNOP36       = NULL;
    CAST38       = NULL;
    BINOP40       = NULL;
    lit.tree = NULL;

    unex.tree = NULL;

    castex.tree = NULL;

    left.tree = NULL;

    right.tree = NULL;

    call35.tree = NULL;

    unop37.tree = NULL;

    type39.tree = NULL;

    binop41.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    LIT34_tree   = NULL;
    UNOP36_tree   = NULL;
    CAST38_tree   = NULL;
    BINOP40_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:93:2: (name= ID | ^( LIT lit= literal ) | call | ^( UNOP unop unex= expression ) | ^( CAST type castex= expression ) | ^( BINOP binop left= expression right= expression ) )
            
            ANTLR3_UINT32 alt11;

            alt11=6;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		alt11=1;
            	}
                break;
            case LIT:
            	{
            		alt11=2;
            	}
                break;
            case CALL:
            	{
            		alt11=3;
            	}
                break;
            case UNOP:
            	{
            		alt11=4;
            	}
                break;
            case CAST:
            	{
            		alt11=5;
            	}
                break;
            case BINOP:
            	{
            		alt11=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 11;
                EXCEPTION->state        = 0;


                goto ruleexpressionEx;
            }

            switch (alt11) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:93:4: name= ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        name = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_expression358); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        name_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, name);ADAPTOR->addChild(ADAPTOR, root_0, name_tree);

        	        {
        	             
        	            			retval.node= new kensho::ast::Variable(
        	            				std::string((char*)name->getText(name)->chars)
        	            			); 
        	            		
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:98:4: ^( LIT lit= literal )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        LIT34 = (pANTLR3_BASE_TREE) MATCHT(LIT, &FOLLOW_LIT_in_expression366); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        LIT34_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LIT34);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, LIT34_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_literal_in_expression370);
        	        lit=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, lit.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			retval.node= lit.node;
        	            		
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:101:4: call
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_call_in_expression378);
        	        call35=call(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, call35.tree);
        	        {

        	            			retval.node= call35.node;
        	            		
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:104:4: ^( UNOP unop unex= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        UNOP36 = (pANTLR3_BASE_TREE) MATCHT(UNOP, &FOLLOW_UNOP_in_expression386); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        UNOP36_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, UNOP36);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, UNOP36_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_unop_in_expression388);
        	        unop37=unop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, unop37.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression392);
        	        unex=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, unex.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (unop37.tree)->getToken((unop37.tree));
        	            			retval.node= new kensho::ast::UnaryExpression(tok->getType(tok), unex.node); 
        	            		
        	        }

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:108:4: ^( CAST type castex= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CAST38 = (pANTLR3_BASE_TREE) MATCHT(CAST, &FOLLOW_CAST_in_expression401); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        CAST38_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CAST38);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CAST38_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_type_in_expression403);
        	        type39=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, type39.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression407);
        	        castex=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, castex.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (type39.tree)->getToken((type39.tree));
        	            			retval.node= new kensho::ast::Cast(tok->getType(tok), castex.node);
        	            		
        	        }

        	    }
        	    break;
        	case 6:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:112:4: ^( BINOP binop left= expression right= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        BINOP40 = (pANTLR3_BASE_TREE) MATCHT(BINOP, &FOLLOW_BINOP_in_expression416); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        BINOP40_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, BINOP40);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, BINOP40_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_binop_in_expression418);
        	        binop41=binop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, binop41.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression422);
        	        left=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, left.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression426);
        	        right=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, right.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (binop41.tree)->getToken((binop41.tree));
        	            			retval.node= new kensho::ast::BinaryExpression(
        	            				tok->getType(tok), left.node, right.node
        	            			);
        	            		
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start call
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:120:1: call returns [kensho::ast::Call* node] : ^( CALL name= ID (ex= expression )* ) ;
 */
static KenshoTreeParser_call_return
call(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_call_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    name;
    pANTLR3_BASE_TREE    CALL42;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE CALL42_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    name       = NULL;
    CALL42       = NULL;
    ex.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    CALL42_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:121:2: ( ^( CALL name= ID (ex= expression )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:121:4: ^( CALL name= ID (ex= expression )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            CALL42 = (pANTLR3_BASE_TREE) MATCHT(CALL, &FOLLOW_CALL_in_call447); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }

            CALL42_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CALL42);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CALL42_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            name = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_call455); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }

            name_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, name);ADAPTOR->addChild(ADAPTOR, root_1, name_tree);

            {

                				std::string nameStr((char*)name->getText(name)->chars);
                				retval.node= new kensho::ast::Call(nameStr);   
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:126:4: (ex= expression )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (((LA12_0 >= BINOP) && (LA12_0 <= UNOP)) || ((LA12_0 >= CALL) && (LA12_0 <= CAST)) || LA12_0 == ID) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:126:6: ex= expression
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expression_in_call467);
            	        ex=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            	        {

            	            				retval.node->addArgument(ex.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallEx; /* Prevent compiler warnings */
    rulecallEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end call */

/** 
 * $ANTLR start literal
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:132:1: literal returns [kensho::ast::Literal* node] : ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR );
 */
static KenshoTreeParser_literal_return
literal(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set43;

    pANTLR3_BASE_TREE set43_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set43       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set43_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:141:2: ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set43=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= LITERAL_TRUE) && (LA(1) <= LITERAL_FALSE)) || ((LA(1) >= LITERAL_INT) && (LA(1) <= LITERAL_CHAR)) )
            {
                CONSUME();

                set43_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set43);

                ADAPTOR->addChild(ADAPTOR, root_0, set43_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }
    else
    {
	{

	    	pANTLR3_COMMON_TOKEN token = retval.tree->getToken(retval.tree);
	    	retval.node= new kensho::ast::Literal(
	    		retval.tree->getType(retval.tree),
	    		std::string((char*)token->getText(token)->chars)
	    	);

	}
    }

    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start unop
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:150:1: unop : ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT );
 */
static KenshoTreeParser_unop_return
unop(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_unop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set44;

    pANTLR3_BASE_TREE set44_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set44       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set44_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:151:2: ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set44=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_SUB)) || ((LA(1) >= OP_NOT) && (LA(1) <= OP_BIT_NOT)) )
            {
                CONSUME();

                set44_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set44);

                ADAPTOR->addChild(ADAPTOR, root_0, set44_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unop0);    goto ruleunopEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunopEx; /* Prevent compiler warnings */
    ruleunopEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end unop */

/** 
 * $ANTLR start binop
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:157:1: binop : ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE );
 */
static KenshoTreeParser_binop_return
binop(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_binop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set45;

    pANTLR3_BASE_TREE set45_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set45       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set45_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:158:2: ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set45=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_DIV)) || ((LA(1) >= OP_AND) && (LA(1) <= OP_ASSIGN)) )
            {
                CONSUME();

                set45_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set45);

                ADAPTOR->addChild(ADAPTOR, root_0, set45_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_binop0);    goto rulebinopEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebinopEx; /* Prevent compiler warnings */
    rulebinopEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end binop */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
