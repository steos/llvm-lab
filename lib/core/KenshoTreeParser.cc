/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : f:/dev/projects/kensho/docs/KenshoTreeParser.g
 *     -                            On : 2009-10-05 01:26:50
 *     -           for the tree parser : KenshoTreeParserTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "KenshoTreeParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pKenshoTreeParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pKenshoTreeParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pKenshoTreeParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pKenshoTreeParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   KenshoTreeParserTokenNames[77+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "T_BOOL",
        (pANTLR3_UINT8) "T_BYTE",
        (pANTLR3_UINT8) "T_SHORT",
        (pANTLR3_UINT8) "T_INT",
        (pANTLR3_UINT8) "T_CHAR",
        (pANTLR3_UINT8) "T_LONG",
        (pANTLR3_UINT8) "T_FLOAT",
        (pANTLR3_UINT8) "T_DOUBLE",
        (pANTLR3_UINT8) "T_VOID",
        (pANTLR3_UINT8) "OP_ADD",
        (pANTLR3_UINT8) "OP_SUB",
        (pANTLR3_UINT8) "OP_MUL",
        (pANTLR3_UINT8) "OP_DIV",
        (pANTLR3_UINT8) "OP_NOT",
        (pANTLR3_UINT8) "OP_BIT_NOT",
        (pANTLR3_UINT8) "OP_AND",
        (pANTLR3_UINT8) "OP_OR",
        (pANTLR3_UINT8) "OP_REM",
        (pANTLR3_UINT8) "OP_BIT_AND",
        (pANTLR3_UINT8) "OP_BIT_OR",
        (pANTLR3_UINT8) "OP_XOR",
        (pANTLR3_UINT8) "OP_SHIFT_L",
        (pANTLR3_UINT8) "OP_SHIFT_R",
        (pANTLR3_UINT8) "OP_USHIFT_R",
        (pANTLR3_UINT8) "CMP_EQ",
        (pANTLR3_UINT8) "CMP_NEQ",
        (pANTLR3_UINT8) "CMP_LT",
        (pANTLR3_UINT8) "CMP_GT",
        (pANTLR3_UINT8) "CMP_LTE",
        (pANTLR3_UINT8) "CMP_GTE",
        (pANTLR3_UINT8) "OP_ASSIGN",
        (pANTLR3_UINT8) "K_IF",
        (pANTLR3_UINT8) "K_ELSE",
        (pANTLR3_UINT8) "K_WHILE",
        (pANTLR3_UINT8) "LITERAL_TRUE",
        (pANTLR3_UINT8) "LITERAL_FALSE",
        (pANTLR3_UINT8) "K_NATIVE",
        (pANTLR3_UINT8) "K_RETURN",
        (pANTLR3_UINT8) "K_NEW",
        (pANTLR3_UINT8) "K_DELETE",
        (pANTLR3_UINT8) "K_STRUCT",
        (pANTLR3_UINT8) "K_STATIC",
        (pANTLR3_UINT8) "BRACE_L",
        (pANTLR3_UINT8) "BRACE_R",
        (pANTLR3_UINT8) "PAREN_L",
        (pANTLR3_UINT8) "PAREN_R",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "FUNDEF",
        (pANTLR3_UINT8) "FUNSIG",
        (pANTLR3_UINT8) "ARGDEF",
        (pANTLR3_UINT8) "BINOP",
        (pANTLR3_UINT8) "LIT",
        (pANTLR3_UINT8) "UNOP",
        (pANTLR3_UINT8) "VARDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "CAST",
        (pANTLR3_UINT8) "KENNIDEF",
        (pANTLR3_UINT8) "ELSEIF",
        (pANTLR3_UINT8) "STRUCTFUN",
        (pANTLR3_UINT8) "MODS",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LITERAL_INT",
        (pANTLR3_UINT8) "LITERAL_OCT",
        (pANTLR3_UINT8) "LITERAL_HEX",
        (pANTLR3_UINT8) "LITERAL_FLOAT",
        (pANTLR3_UINT8) "LITERAL_CHAR",
        (pANTLR3_UINT8) "OP_USHIFT_L",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "POSDIGIT",
        (pANTLR3_UINT8) "HEXDIGIT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "ESCSEQ",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "BLOCK_COMMENT"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static KenshoTreeParser_program_return	program    (pKenshoTreeParser ctx);
static KenshoTreeParser_kenniFunction_return	kenniFunction    (pKenshoTreeParser ctx);
static KenshoTreeParser_structDecl_return	structDecl    (pKenshoTreeParser ctx);
static KenshoTreeParser_structBodyDecl_return	structBodyDecl    (pKenshoTreeParser ctx, kensho::ast::Struct* parent);
static KenshoTreeParser_structFunction_return	structFunction    (pKenshoTreeParser ctx, kensho::ast::Struct* parent);
static KenshoTreeParser_structFunMods_return	structFunMods    (pKenshoTreeParser ctx);
static KenshoTreeParser_function_return	function    (pKenshoTreeParser ctx);
static KenshoTreeParser_signature_return	signature    (pKenshoTreeParser ctx);
static KenshoTreeParser_functionType_return	functionType    (pKenshoTreeParser ctx);
static KenshoTreeParser_params_return	params    (pKenshoTreeParser ctx, kensho::ast::Function* node, uint32_t index);
static KenshoTreeParser_statement_return	statement    (pKenshoTreeParser ctx);
static KenshoTreeParser_returnStatement_return	returnStatement    (pKenshoTreeParser ctx);
static KenshoTreeParser_ifStat_return	ifStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_elseIfStat_return	elseIfStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_elseStat_return	elseStat    (pKenshoTreeParser ctx, kensho::ast::Conditional* node);
static KenshoTreeParser_whileStat_return	whileStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_variable_return	variable    (pKenshoTreeParser ctx);
static KenshoTreeParser_type_return	type    (pKenshoTreeParser ctx);
static KenshoTreeParser_expression_return	expression    (pKenshoTreeParser ctx);
static KenshoTreeParser_call_return	call    (pKenshoTreeParser ctx);
static KenshoTreeParser_literal_return	literal    (pKenshoTreeParser ctx);
static KenshoTreeParser_unop_return	unop    (pKenshoTreeParser ctx);
static KenshoTreeParser_binop_return	binop    (pKenshoTreeParser ctx);
static void	KenshoTreeParserFree(pKenshoTreeParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "f:/dev/projects/kensho/docs/KenshoTreeParser.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new KenshoTreeParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoTreeParser
KenshoTreeParserNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return KenshoTreeParserNewSSD(instream, NULL);
}

/** \brief Create a new KenshoTreeParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoTreeParser
KenshoTreeParserNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pKenshoTreeParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pKenshoTreeParser) ANTLR3_CALLOC(1, sizeof(KenshoTreeParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in KenshoTreeParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our KenshoTreeParser interface
     */
    ctx->program	= program;
    ctx->kenniFunction	= kenniFunction;
    ctx->structDecl	= structDecl;
    ctx->structBodyDecl	= structBodyDecl;
    ctx->structFunction	= structFunction;
    ctx->structFunMods	= structFunMods;
    ctx->function	= function;
    ctx->signature	= signature;
    ctx->functionType	= functionType;
    ctx->params	= params;
    ctx->statement	= statement;
    ctx->returnStatement	= returnStatement;
    ctx->ifStat	= ifStat;
    ctx->elseIfStat	= elseIfStat;
    ctx->elseStat	= elseStat;
    ctx->whileStat	= whileStat;
    ctx->variable	= variable;
    ctx->type	= type;
    ctx->expression	= expression;
    ctx->call	= call;
    ctx->literal	= literal;
    ctx->unop	= unop;
    ctx->binop	= binop;
    ctx->free			= KenshoTreeParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = KenshoTreeParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 KenshoTreeParserFree(pKenshoTreeParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);

	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return KenshoTreeParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_program88  */
static	ANTLR3_BITWORD FOLLOW_function_in_program88_bits[]	= { ANTLR3_UINT64_LIT(0x2010100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_program88	= { FOLLOW_function_in_program88_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_kenniFunction_in_program98  */
static	ANTLR3_BITWORD FOLLOW_kenniFunction_in_program98_bits[]	= { ANTLR3_UINT64_LIT(0x2010100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_kenniFunction_in_program98	= { FOLLOW_kenniFunction_in_program98_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structDecl_in_program107  */
static	ANTLR3_BITWORD FOLLOW_structDecl_in_program107_bits[]	= { ANTLR3_UINT64_LIT(0x2010100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structDecl_in_program107	= { FOLLOW_structDecl_in_program107_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KENNIDEF_in_kenniFunction131  */
static	ANTLR3_BITWORD FOLLOW_KENNIDEF_in_kenniFunction131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_KENNIDEF_in_kenniFunction131	= { FOLLOW_KENNIDEF_in_kenniFunction131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_kenniFunction139  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_kenniFunction139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_kenniFunction139	= { FOLLOW_functionType_in_kenniFunction139_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_kenniFunction147  */
static	ANTLR3_BITWORD FOLLOW_ID_in_kenniFunction147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_kenniFunction147	= { FOLLOW_ID_in_kenniFunction147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_kenniFunction156  */
static	ANTLR3_BITWORD FOLLOW_type_in_kenniFunction156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_kenniFunction156	= { FOLLOW_type_in_kenniFunction156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_STRUCT_in_structDecl182  */
static	ANTLR3_BITWORD FOLLOW_K_STRUCT_in_structDecl182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_STRUCT_in_structDecl182	= { FOLLOW_K_STRUCT_in_structDecl182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_structDecl190  */
static	ANTLR3_BITWORD FOLLOW_ID_in_structDecl190_bits[]	= { ANTLR3_UINT64_LIT(0x8400000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_structDecl190	= { FOLLOW_ID_in_structDecl190_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structBodyDecl_in_structDecl200  */
static	ANTLR3_BITWORD FOLLOW_structBodyDecl_in_structDecl200_bits[]	= { ANTLR3_UINT64_LIT(0x8400000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_structBodyDecl_in_structDecl200	= { FOLLOW_structBodyDecl_in_structDecl200_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_structBodyDecl221  */
static	ANTLR3_BITWORD FOLLOW_variable_in_structBodyDecl221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_structBodyDecl221	= { FOLLOW_variable_in_structBodyDecl221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structFunction_in_structBodyDecl228  */
static	ANTLR3_BITWORD FOLLOW_structFunction_in_structBodyDecl228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structFunction_in_structBodyDecl228	= { FOLLOW_structFunction_in_structBodyDecl228_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRUCTFUN_in_structFunction253  */
static	ANTLR3_BITWORD FOLLOW_STRUCTFUN_in_structFunction253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_STRUCTFUN_in_structFunction253	= { FOLLOW_STRUCTFUN_in_structFunction253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structFunMods_in_structFunction261  */
static	ANTLR3_BITWORD FOLLOW_structFunMods_in_structFunction261_bits[]	= { ANTLR3_UINT64_LIT(0x0020000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_structFunMods_in_structFunction261	= { FOLLOW_structFunMods_in_structFunction261_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_structFunction274  */
static	ANTLR3_BITWORD FOLLOW_signature_in_structFunction274_bits[]	= { ANTLR3_UINT64_LIT(0x1F80022800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_structFunction274	= { FOLLOW_signature_in_structFunction274_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_structFunction282  */
static	ANTLR3_BITWORD FOLLOW_statement_in_structFunction282_bits[]	= { ANTLR3_UINT64_LIT(0x1F80022800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_structFunction282	= { FOLLOW_statement_in_structFunction282_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MODS_in_structFunMods309  */
static	ANTLR3_BITWORD FOLLOW_MODS_in_structFunMods309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MODS_in_structFunMods309	= { FOLLOW_MODS_in_structFunMods309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_STATIC_in_structFunMods311  */
static	ANTLR3_BITWORD FOLLOW_K_STATIC_in_structFunMods311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_K_STATIC_in_structFunMods311	= { FOLLOW_K_STATIC_in_structFunMods311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNDEF_in_function332  */
static	ANTLR3_BITWORD FOLLOW_FUNDEF_in_function332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNDEF_in_function332	= { FOLLOW_FUNDEF_in_function332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_function338  */
static	ANTLR3_BITWORD FOLLOW_signature_in_function338_bits[]	= { ANTLR3_UINT64_LIT(0x1F80022800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_function338	= { FOLLOW_signature_in_function338_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_function348  */
static	ANTLR3_BITWORD FOLLOW_statement_in_function348_bits[]	= { ANTLR3_UINT64_LIT(0x1F80022800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_function348	= { FOLLOW_statement_in_function348_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNSIG_in_signature379  */
static	ANTLR3_BITWORD FOLLOW_FUNSIG_in_signature379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNSIG_in_signature379	= { FOLLOW_FUNSIG_in_signature379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_signature387  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_signature387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_signature387	= { FOLLOW_functionType_in_signature387_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_signature395  */
static	ANTLR3_BITWORD FOLLOW_ID_in_signature395_bits[]	= { ANTLR3_UINT64_LIT(0x0040000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_signature395	= { FOLLOW_ID_in_signature395_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_params_in_signature403  */
static	ANTLR3_BITWORD FOLLOW_params_in_signature403_bits[]	= { ANTLR3_UINT64_LIT(0x0040000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_params_in_signature403	= { FOLLOW_params_in_signature403_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_VOID_in_functionType422  */
static	ANTLR3_BITWORD FOLLOW_T_VOID_in_functionType422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_VOID_in_functionType422	= { FOLLOW_T_VOID_in_functionType422_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_functionType426  */
static	ANTLR3_BITWORD FOLLOW_type_in_functionType426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_functionType426	= { FOLLOW_type_in_functionType426_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGDEF_in_params442  */
static	ANTLR3_BITWORD FOLLOW_ARGDEF_in_params442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGDEF_in_params442	= { FOLLOW_ARGDEF_in_params442_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params444  */
static	ANTLR3_BITWORD FOLLOW_type_in_params444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params444	= { FOLLOW_type_in_params444_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params448  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params448	= { FOLLOW_ID_in_params448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_statement466  */
static	ANTLR3_BITWORD FOLLOW_variable_in_statement466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_statement466	= { FOLLOW_variable_in_statement466_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_statement473  */
static	ANTLR3_BITWORD FOLLOW_expression_in_statement473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_statement473	= { FOLLOW_expression_in_statement473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStat_in_statement480  */
static	ANTLR3_BITWORD FOLLOW_ifStat_in_statement480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStat_in_statement480	= { FOLLOW_ifStat_in_statement480_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStat_in_statement487  */
static	ANTLR3_BITWORD FOLLOW_whileStat_in_statement487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStat_in_statement487	= { FOLLOW_whileStat_in_statement487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement494  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement494	= { FOLLOW_returnStatement_in_statement494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_RETURN_in_returnStatement518  */
static	ANTLR3_BITWORD FOLLOW_K_RETURN_in_returnStatement518_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_RETURN_in_returnStatement518	= { FOLLOW_K_RETURN_in_returnStatement518_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement528  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement528	= { FOLLOW_expression_in_returnStatement528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_IF_in_ifStat554  */
static	ANTLR3_BITWORD FOLLOW_K_IF_in_ifStat554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_IF_in_ifStat554	= { FOLLOW_K_IF_in_ifStat554_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStat562  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStat562_bits[]	= { ANTLR3_UINT64_LIT(0x5F80023800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStat562	= { FOLLOW_expression_in_ifStat562_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStat571  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStat571_bits[]	= { ANTLR3_UINT64_LIT(0x5F80023800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStat571	= { FOLLOW_statement_in_ifStat571_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseIfStat_in_ifStat583  */
static	ANTLR3_BITWORD FOLLOW_elseIfStat_in_ifStat583_bits[]	= { ANTLR3_UINT64_LIT(0x4000001000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_elseIfStat_in_ifStat583	= { FOLLOW_elseIfStat_in_ifStat583_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseStat_in_ifStat595  */
static	ANTLR3_BITWORD FOLLOW_elseStat_in_ifStat595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_elseStat_in_ifStat595	= { FOLLOW_elseStat_in_ifStat595_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ELSEIF_in_elseIfStat621  */
static	ANTLR3_BITWORD FOLLOW_ELSEIF_in_elseIfStat621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ELSEIF_in_elseIfStat621	= { FOLLOW_ELSEIF_in_elseIfStat621_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_elseIfStat629  */
static	ANTLR3_BITWORD FOLLOW_expression_in_elseIfStat629_bits[]	= { ANTLR3_UINT64_LIT(0x1F80022800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_elseIfStat629	= { FOLLOW_expression_in_elseIfStat629_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_elseIfStat638  */
static	ANTLR3_BITWORD FOLLOW_statement_in_elseIfStat638_bits[]	= { ANTLR3_UINT64_LIT(0x1F80022800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_elseIfStat638	= { FOLLOW_statement_in_elseIfStat638_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_ELSE_in_elseStat660  */
static	ANTLR3_BITWORD FOLLOW_K_ELSE_in_elseStat660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_ELSE_in_elseStat660	= { FOLLOW_K_ELSE_in_elseStat660_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_elseStat668  */
static	ANTLR3_BITWORD FOLLOW_statement_in_elseStat668_bits[]	= { ANTLR3_UINT64_LIT(0x1F80022800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_elseStat668	= { FOLLOW_statement_in_elseStat668_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_WHILE_in_whileStat694  */
static	ANTLR3_BITWORD FOLLOW_K_WHILE_in_whileStat694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_WHILE_in_whileStat694	= { FOLLOW_K_WHILE_in_whileStat694_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStat702  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStat702_bits[]	= { ANTLR3_UINT64_LIT(0x1F80022800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStat702	= { FOLLOW_expression_in_whileStat702_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStat714  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStat714_bits[]	= { ANTLR3_UINT64_LIT(0x1F80022800000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStat714	= { FOLLOW_statement_in_whileStat714_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARDEF_in_variable745  */
static	ANTLR3_BITWORD FOLLOW_VARDEF_in_variable745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARDEF_in_variable745	= { FOLLOW_VARDEF_in_variable745_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variable749  */
static	ANTLR3_BITWORD FOLLOW_type_in_variable749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variable749	= { FOLLOW_type_in_variable749_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable753  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable753_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable753	= { FOLLOW_ID_in_variable753_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type0	= { FOLLOW_set_in_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_expression819  */
static	ANTLR3_BITWORD FOLLOW_ID_in_expression819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_expression819	= { FOLLOW_ID_in_expression819_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIT_in_expression827  */
static	ANTLR3_BITWORD FOLLOW_LIT_in_expression827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LIT_in_expression827	= { FOLLOW_LIT_in_expression827_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_expression831  */
static	ANTLR3_BITWORD FOLLOW_literal_in_expression831_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_expression831	= { FOLLOW_literal_in_expression831_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_call_in_expression839  */
static	ANTLR3_BITWORD FOLLOW_call_in_expression839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_call_in_expression839	= { FOLLOW_call_in_expression839_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNOP_in_expression847  */
static	ANTLR3_BITWORD FOLLOW_UNOP_in_expression847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNOP_in_expression847	= { FOLLOW_UNOP_in_expression847_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unop_in_expression849  */
static	ANTLR3_BITWORD FOLLOW_unop_in_expression849_bits[]	= { ANTLR3_UINT64_LIT(0x1B80000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unop_in_expression849	= { FOLLOW_unop_in_expression849_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression853  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression853	= { FOLLOW_expression_in_expression853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CAST_in_expression862  */
static	ANTLR3_BITWORD FOLLOW_CAST_in_expression862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CAST_in_expression862	= { FOLLOW_CAST_in_expression862_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_expression864  */
static	ANTLR3_BITWORD FOLLOW_type_in_expression864_bits[]	= { ANTLR3_UINT64_LIT(0x1B80000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_expression864	= { FOLLOW_type_in_expression864_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression868  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression868	= { FOLLOW_expression_in_expression868_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINOP_in_expression877  */
static	ANTLR3_BITWORD FOLLOW_BINOP_in_expression877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BINOP_in_expression877	= { FOLLOW_BINOP_in_expression877_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binop_in_expression879  */
static	ANTLR3_BITWORD FOLLOW_binop_in_expression879_bits[]	= { ANTLR3_UINT64_LIT(0x1B80000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_binop_in_expression879	= { FOLLOW_binop_in_expression879_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression883  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression883_bits[]	= { ANTLR3_UINT64_LIT(0x1B80000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression883	= { FOLLOW_expression_in_expression883_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression887  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression887	= { FOLLOW_expression_in_expression887_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_call908  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_call908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_call908	= { FOLLOW_CALL_in_call908_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_call916  */
static	ANTLR3_BITWORD FOLLOW_ID_in_call916_bits[]	= { ANTLR3_UINT64_LIT(0x1B80000000000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_call916	= { FOLLOW_ID_in_call916_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_call928  */
static	ANTLR3_BITWORD FOLLOW_expression_in_call928_bits[]	= { ANTLR3_UINT64_LIT(0x1B80000000000008), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_call928	= { FOLLOW_expression_in_call928_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unop0	= { FOLLOW_set_in_unop0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_binop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_binop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_binop0	= { FOLLOW_set_in_binop0_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:45:1: program returns [std::vector<kensho::ast::Callable*>* functions, \r\n\tstd::vector<kensho::ast::Struct*>* structs] : ( function | kenniFunction | structDecl )* ;
 */
static KenshoTreeParser_program_return
program(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_program_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_function_return function1;
    #undef	RETURN_TYPE_function1
    #define	RETURN_TYPE_function1 KenshoTreeParser_function_return

    KenshoTreeParser_kenniFunction_return kenniFunction2;
    #undef	RETURN_TYPE_kenniFunction2
    #define	RETURN_TYPE_kenniFunction2 KenshoTreeParser_kenniFunction_return

    KenshoTreeParser_structDecl_return structDecl3;
    #undef	RETURN_TYPE_structDecl3
    #define	RETURN_TYPE_structDecl3 KenshoTreeParser_structDecl_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;


    	retval.functions= new std::vector<kensho::ast::Callable*>();
    	retval.structs= new std::vector<kensho::ast::Struct*>();

    function1.tree = NULL;

    kenniFunction2.tree = NULL;

    structDecl3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:52:2: ( ( function | kenniFunction | structDecl )* )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:52:4: ( function | kenniFunction | structDecl )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:52:4: ( function | kenniFunction | structDecl )*

            for (;;)
            {
                int alt1=4;
                switch ( LA(1) ) 
                {
                case FUNDEF:
                	{
                		alt1=1;
                	}
                    break;
                case KENNIDEF:
                	{
                		alt1=2;
                	}
                    break;
                case K_STRUCT:
                	{
                		alt1=3;
                	}
                    break;

                }

                switch (alt1) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:52:7: function
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_function_in_program88);
            	        function1=function(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, function1.tree);
            	        {

            	            			retval.functions->push_back(function1.node);
            	            		
            	        }

            	    }
            	    break;
            	case 2:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:55:6: kenniFunction
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_kenniFunction_in_program98);
            	        kenniFunction2=kenniFunction(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, kenniFunction2.tree);
            	        {
            	             
            	            				retval.functions->push_back(kenniFunction2.node); 
            	            			
            	        }

            	    }
            	    break;
            	case 3:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:58:5: structDecl
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_structDecl_in_program107);
            	        structDecl3=structDecl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, structDecl3.tree);
            	        {

            	            				retval.structs->push_back(structDecl3.node);			
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start kenniFunction
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:64:1: kenniFunction returns [kensho::ast::Callable* node] : ^( KENNIDEF t= functionType n= ID ( type )* ) ;
 */
static KenshoTreeParser_kenniFunction_return
kenniFunction(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_kenniFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    KENNIDEF4;
    KenshoTreeParser_functionType_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_functionType_return

    KenshoTreeParser_type_return type5;
    #undef	RETURN_TYPE_type5
    #define	RETURN_TYPE_type5 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE KENNIDEF4_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    KENNIDEF4       = NULL;
    t.tree = NULL;

    type5.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    KENNIDEF4_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:65:2: ( ^( KENNIDEF t= functionType n= ID ( type )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:65:4: ^( KENNIDEF t= functionType n= ID ( type )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            KENNIDEF4 = (pANTLR3_BASE_TREE) MATCHT(KENNIDEF, &FOLLOW_KENNIDEF_in_kenniFunction131); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            KENNIDEF4_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, KENNIDEF4);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, KENNIDEF4_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_functionType_in_kenniFunction139);
            t=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_kenniFunction147); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);

            {

                				std::string name((char*)n->getText(n)->chars);
                				retval.node= new kensho::ast::Callable(name, (t.tree)->getType((t.tree)));
                				retval.node->setSourcePosition((n->getLine(n)), (n->getCharPositionInLine(n)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:72:4: ( type )*

            for (;;)
            {
                int alt2=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:72:6: type
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_type_in_kenniFunction156);
            	        type5=type(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulekenniFunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, type5.tree);
            	        {

            	            				retval.node->addParameter((type5.tree)->getType((type5.tree)));
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulekenniFunctionEx; /* Prevent compiler warnings */
    rulekenniFunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end kenniFunction */

/** 
 * $ANTLR start structDecl
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:78:1: structDecl returns [kensho::ast::Struct* node] : ^( K_STRUCT n= ID ( structBodyDecl[$node] )* ) ;
 */
static KenshoTreeParser_structDecl_return
structDecl(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_structDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    K_STRUCT6;
    KenshoTreeParser_structBodyDecl_return structBodyDecl7;
    #undef	RETURN_TYPE_structBodyDecl7
    #define	RETURN_TYPE_structBodyDecl7 KenshoTreeParser_structBodyDecl_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE K_STRUCT6_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    K_STRUCT6       = NULL;
    structBodyDecl7.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    K_STRUCT6_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:79:2: ( ^( K_STRUCT n= ID ( structBodyDecl[$node] )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:79:4: ^( K_STRUCT n= ID ( structBodyDecl[$node] )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_STRUCT6 = (pANTLR3_BASE_TREE) MATCHT(K_STRUCT, &FOLLOW_K_STRUCT_in_structDecl182); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }

            K_STRUCT6_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_STRUCT6);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_STRUCT6_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_structDecl190); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);

            {

                				std::string name((char*)n->getText(n)->chars);
                				retval.node= new kensho::ast::Struct(name);
                				retval.node->setSourcePosition((n->getLine(n)), (n->getCharPositionInLine(n)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:85:4: ( structBodyDecl[$node] )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) ) 
                {
                case VARDEF:
                case STRUCTFUN:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:85:6: structBodyDecl[$node]
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_structBodyDecl_in_structDecl200);
            	        structBodyDecl7=structBodyDecl(ctx, retval.node);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructDeclEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, structBodyDecl7.tree);

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructDeclEx; /* Prevent compiler warnings */
    rulestructDeclEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end structDecl */

/** 
 * $ANTLR start structBodyDecl
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:89:1: structBodyDecl[kensho::ast::Struct* parent] : ( variable | structFunction[$parent] );
 */
static KenshoTreeParser_structBodyDecl_return
structBodyDecl(pKenshoTreeParser ctx, kensho::ast::Struct* parent)
{   
    KenshoTreeParser_structBodyDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_variable_return variable8;
    #undef	RETURN_TYPE_variable8
    #define	RETURN_TYPE_variable8 KenshoTreeParser_variable_return

    KenshoTreeParser_structFunction_return structFunction9;
    #undef	RETURN_TYPE_structFunction9
    #define	RETURN_TYPE_structFunction9 KenshoTreeParser_structFunction_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    variable8.tree = NULL;

    structFunction9.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:90:2: ( variable | structFunction[$parent] )
            
            ANTLR3_UINT32 alt4;

            alt4=2;

            switch ( LA(1) ) 
            {
            case VARDEF:
            	{
            		alt4=1;
            	}
                break;
            case STRUCTFUN:
            	{
            		alt4=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto rulestructBodyDeclEx;
            }

            switch (alt4) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:90:4: variable
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_variable_in_structBodyDecl221);
        	        variable8=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, variable8.tree);
        	        {

        	            		parent->addVariableDefinition(variable8.node);
        	            	
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:93:4: structFunction[$parent]
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_structFunction_in_structBodyDecl228);
        	        structFunction9=structFunction(ctx, parent);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, structFunction9.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestructBodyDeclEx; /* Prevent compiler warnings */
    rulestructBodyDeclEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end structBodyDecl */

/** 
 * $ANTLR start structFunction
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:96:1: structFunction[kensho::ast::Struct* parent] : ^( STRUCTFUN ( structFunMods )* sig= signature ( statement )* ) ;
 */
static KenshoTreeParser_structFunction_return
structFunction(pKenshoTreeParser ctx, kensho::ast::Struct* parent)
{   
    KenshoTreeParser_structFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    STRUCTFUN10;
    KenshoTreeParser_signature_return sig;
    #undef	RETURN_TYPE_sig
    #define	RETURN_TYPE_sig KenshoTreeParser_signature_return

    KenshoTreeParser_structFunMods_return structFunMods11;
    #undef	RETURN_TYPE_structFunMods11
    #define	RETURN_TYPE_structFunMods11 KenshoTreeParser_structFunMods_return

    KenshoTreeParser_statement_return statement12;
    #undef	RETURN_TYPE_statement12
    #define	RETURN_TYPE_statement12 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE STRUCTFUN10_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;


    	bool staticDef = false;

    STRUCTFUN10       = NULL;
    sig.tree = NULL;

    structFunMods11.tree = NULL;

    statement12.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    STRUCTFUN10_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:103:2: ( ^( STRUCTFUN ( structFunMods )* sig= signature ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:103:4: ^( STRUCTFUN ( structFunMods )* sig= signature ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            STRUCTFUN10 = (pANTLR3_BASE_TREE) MATCHT(STRUCTFUN, &FOLLOW_STRUCTFUN_in_structFunction253); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }

            STRUCTFUN10_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, STRUCTFUN10);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, STRUCTFUN10_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:104:4: ( structFunMods )*

            for (;;)
            {
                int alt5=2;
                switch ( LA(1) ) 
                {
                case MODS:
                	{
                		alt5=1;
                	}
                    break;

                }

                switch (alt5) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:104:6: structFunMods
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_structFunMods_in_structFunction261);
            	        structFunMods11=structFunMods(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructFunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, structFunMods11.tree);
            	        {
            	             if (structFunMods11.staticDef) staticDef = true; 
            	        }

            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_signature_in_structFunction274);
            sig=signature(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, sig.tree);

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:106:4: ( statement )*

            for (;;)
            {
                int alt6=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt6=1;
                	}
                    break;

                }

                switch (alt6) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:106:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_structFunction282);
            	        statement12=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructFunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement12.tree);
            	        {

            	            				sig.node->addBodyNode(statement12.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructFunctionEx; /* Prevent compiler warnings */
    rulestructFunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	parent->addFunction(sig.node, staticDef);

                }
            }


    return retval;
}
/* $ANTLR end structFunction */

/** 
 * $ANTLR start structFunMods
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:112:1: structFunMods returns [bool staticDef] : ^( MODS K_STATIC ) ;
 */
static KenshoTreeParser_structFunMods_return
structFunMods(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_structFunMods_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    MODS13;
    pANTLR3_BASE_TREE    K_STATIC14;

    pANTLR3_BASE_TREE MODS13_tree;
    pANTLR3_BASE_TREE K_STATIC14_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    MODS13       = NULL;
    K_STATIC14       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    MODS13_tree   = NULL;
    K_STATIC14_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:113:2: ( ^( MODS K_STATIC ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:113:4: ^( MODS K_STATIC )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            MODS13 = (pANTLR3_BASE_TREE) MATCHT(MODS, &FOLLOW_MODS_in_structFunMods309); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunModsEx;
            }

            MODS13_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, MODS13);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, MODS13_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            K_STATIC14 = (pANTLR3_BASE_TREE) MATCHT(K_STATIC, &FOLLOW_K_STATIC_in_structFunMods311); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunModsEx;
            }

            K_STATIC14_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_STATIC14);ADAPTOR->addChild(ADAPTOR, root_1, K_STATIC14_tree);

            {
                 retval.staticDef= true; 
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructFunModsEx; /* Prevent compiler warnings */
    rulestructFunModsEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end structFunMods */

/** 
 * $ANTLR start function
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:116:1: function returns [kensho::ast::Function* node] : ^( FUNDEF signature ( statement )* ) ;
 */
static KenshoTreeParser_function_return
function(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_function_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    FUNDEF15;
    KenshoTreeParser_signature_return signature16;
    #undef	RETURN_TYPE_signature16
    #define	RETURN_TYPE_signature16 KenshoTreeParser_signature_return

    KenshoTreeParser_statement_return statement17;
    #undef	RETURN_TYPE_statement17
    #define	RETURN_TYPE_statement17 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE FUNDEF15_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    FUNDEF15       = NULL;
    signature16.tree = NULL;

    statement17.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    FUNDEF15_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:117:2: ( ^( FUNDEF signature ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:117:4: ^( FUNDEF signature ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUNDEF15 = (pANTLR3_BASE_TREE) MATCHT(FUNDEF, &FOLLOW_FUNDEF_in_function332); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            FUNDEF15_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUNDEF15);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUNDEF15_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_signature_in_function338);
            signature16=signature(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, signature16.tree);
            {
                 
                				retval.node= signature16.node;
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:121:4: ( statement )*

            for (;;)
            {
                int alt7=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:121:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_function348);
            	        statement17=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement17.tree);
            	        {

            	            				retval.node->addBodyNode(statement17.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end function */

/** 
 * $ANTLR start signature
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:127:1: signature returns [kensho::ast::Function* node] : ^( FUNSIG t= functionType n= ID ( params[$node, paramCount++] )* ) ;
 */
static KenshoTreeParser_signature_return
signature(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_signature_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    FUNSIG18;
    KenshoTreeParser_functionType_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_functionType_return

    KenshoTreeParser_params_return params19;
    #undef	RETURN_TYPE_params19
    #define	RETURN_TYPE_params19 KenshoTreeParser_params_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE FUNSIG18_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

     uint32_t paramCount = 0; 
    n       = NULL;
    FUNSIG18       = NULL;
    t.tree = NULL;

    params19.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    FUNSIG18_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:129:2: ( ^( FUNSIG t= functionType n= ID ( params[$node, paramCount++] )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:129:4: ^( FUNSIG t= functionType n= ID ( params[$node, paramCount++] )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUNSIG18 = (pANTLR3_BASE_TREE) MATCHT(FUNSIG, &FOLLOW_FUNSIG_in_signature379); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            FUNSIG18_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUNSIG18);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUNSIG18_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_functionType_in_signature387);
            t=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_signature395); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);

            {

                				std::string name((char*)n->getText(n)->chars);
                				retval.node= new kensho::ast::Function(name, (t.tree)->getType((t.tree)));
                				retval.node->setSourcePosition((n->getLine(n)), (n->getCharPositionInLine(n)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:136:4: ( params[$node, paramCount++] )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                case ARGDEF:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:136:4: params[$node, paramCount++]
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_params_in_signature403);
            	        params19=params(ctx, retval.node, paramCount++);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignatureEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, params19.tree);

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureEx; /* Prevent compiler warnings */
    rulesignatureEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end signature */

/** 
 * $ANTLR start functionType
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:140:1: functionType : ( T_VOID | type );
 */
static KenshoTreeParser_functionType_return
functionType(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_functionType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    T_VOID20;
    KenshoTreeParser_type_return type21;
    #undef	RETURN_TYPE_type21
    #define	RETURN_TYPE_type21 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE T_VOID20_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    T_VOID20       = NULL;
    type21.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    T_VOID20_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:141:2: ( T_VOID | type )
            
            ANTLR3_UINT32 alt9;

            alt9=2;

            switch ( LA(1) ) 
            {
            case T_VOID:
            	{
            		alt9=1;
            	}
                break;
            case T_BOOL:
            case T_BYTE:
            case T_SHORT:
            case T_INT:
            case T_CHAR:
            case T_LONG:
            case T_FLOAT:
            case T_DOUBLE:
            	{
            		alt9=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulefunctionTypeEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:141:4: T_VOID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        T_VOID20 = (pANTLR3_BASE_TREE) MATCHT(T_VOID, &FOLLOW_T_VOID_in_functionType422); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        T_VOID20_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, T_VOID20);ADAPTOR->addChild(ADAPTOR, root_0, T_VOID20_tree);


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:141:13: type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_type_in_functionType426);
        	        type21=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, type21.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionTypeEx; /* Prevent compiler warnings */
    rulefunctionTypeEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end functionType */

/** 
 * $ANTLR start params
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:144:1: params[kensho::ast::Function* node, uint32_t index] : ^( ARGDEF type n= ID ) ;
 */
static KenshoTreeParser_params_return
params(pKenshoTreeParser ctx, kensho::ast::Function* node, uint32_t index)
{   
    KenshoTreeParser_params_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    ARGDEF22;
    KenshoTreeParser_type_return type23;
    #undef	RETURN_TYPE_type23
    #define	RETURN_TYPE_type23 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE ARGDEF22_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    ARGDEF22       = NULL;
    type23.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    ARGDEF22_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:145:2: ( ^( ARGDEF type n= ID ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:145:4: ^( ARGDEF type n= ID )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ARGDEF22 = (pANTLR3_BASE_TREE) MATCHT(ARGDEF, &FOLLOW_ARGDEF_in_params442); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            ARGDEF22_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARGDEF22);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARGDEF22_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_type_in_params444);
            type23=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, type23.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_params448); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }

            {

                			std::string name((char*)n->getText(n)->chars);
                			node->addParameter(name, (type23.tree)->getType((type23.tree)));
                			// add variable definition for the parameter
                			node->addBodyNode(new kensho::ast::ParameterDefinition(
                				name, node, index, (type23.tree)->getType((type23.tree))
                			));
                		
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparamsEx; /* Prevent compiler warnings */
    ruleparamsEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end params */

/** 
 * $ANTLR start statement
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:155:1: statement returns [kensho::ast::Node* node] : ( variable | expression | ifStat | whileStat | returnStatement );
 */
static KenshoTreeParser_statement_return
statement(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_statement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_variable_return variable24;
    #undef	RETURN_TYPE_variable24
    #define	RETURN_TYPE_variable24 KenshoTreeParser_variable_return

    KenshoTreeParser_expression_return expression25;
    #undef	RETURN_TYPE_expression25
    #define	RETURN_TYPE_expression25 KenshoTreeParser_expression_return

    KenshoTreeParser_ifStat_return ifStat26;
    #undef	RETURN_TYPE_ifStat26
    #define	RETURN_TYPE_ifStat26 KenshoTreeParser_ifStat_return

    KenshoTreeParser_whileStat_return whileStat27;
    #undef	RETURN_TYPE_whileStat27
    #define	RETURN_TYPE_whileStat27 KenshoTreeParser_whileStat_return

    KenshoTreeParser_returnStatement_return returnStatement28;
    #undef	RETURN_TYPE_returnStatement28
    #define	RETURN_TYPE_returnStatement28 KenshoTreeParser_returnStatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    variable24.tree = NULL;

    expression25.tree = NULL;

    ifStat26.tree = NULL;

    whileStat27.tree = NULL;

    returnStatement28.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:156:2: ( variable | expression | ifStat | whileStat | returnStatement )
            
            ANTLR3_UINT32 alt10;

            alt10=5;

            switch ( LA(1) ) 
            {
            case VARDEF:
            	{
            		alt10=1;
            	}
                break;
            case BINOP:
            case LIT:
            case UNOP:
            case CALL:
            case CAST:
            case ID:
            	{
            		alt10=2;
            	}
                break;
            case K_IF:
            	{
            		alt10=3;
            	}
                break;
            case K_WHILE:
            	{
            		alt10=4;
            	}
                break;
            case K_RETURN:
            	{
            		alt10=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 10;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt10) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:156:4: variable
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_variable_in_statement466);
        	        variable24=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, variable24.tree);
        	        {
        	             retval.node= variable24.node; 
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:157:4: expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_statement473);
        	        expression25=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, expression25.tree);
        	        {
        	             retval.node= expression25.node; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:158:4: ifStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_ifStat_in_statement480);
        	        ifStat26=ifStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, ifStat26.tree);
        	        {
        	             retval.node= ifStat26.node; 
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:159:4: whileStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_whileStat_in_statement487);
        	        whileStat27=whileStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, whileStat27.tree);
        	        {
        	             retval.node= whileStat27.node; 
        	        }

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:160:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement494);
        	        returnStatement28=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, returnStatement28.tree);
        	        {
        	             retval.node= returnStatement28.node; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start returnStatement
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:163:1: returnStatement returns [kensho::ast::Return* node] : ^( K_RETURN (ex= expression )? ) ;
 */
static KenshoTreeParser_returnStatement_return
returnStatement(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_returnStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_RETURN29;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    pANTLR3_BASE_TREE K_RETURN29_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_RETURN29       = NULL;
    ex.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_RETURN29_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:169:2: ( ^( K_RETURN (ex= expression )? ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:169:4: ^( K_RETURN (ex= expression )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_RETURN29 = (pANTLR3_BASE_TREE) MATCHT(K_RETURN, &FOLLOW_K_RETURN_in_returnStatement518); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }

            K_RETURN29_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_RETURN29);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_RETURN29_tree, root_1);



            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

                // f:/dev/projects/kensho/docs/KenshoTreeParser.g:170:4: (ex= expression )?
                {
                    int alt11=2;
                    switch ( LA(1) ) 
                    {
                        case BINOP:
                        case LIT:
                        case UNOP:
                        case CALL:
                        case CAST:
                        case ID:
                        	{
                        		alt11=1;
                        	}
                            break;
                    }

                    switch (alt11) 
                    {
                	case 1:
                	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:170:6: ex= expression
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement528);
                	        ex=expression(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulereturnStatementEx;
                	        }

                	        	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
                	        {
                	             
                	            				retval.node= new kensho::ast::Return(ex.node); 
                	            				pANTLR3_COMMON_TOKEN tok = (ex.tree)->getToken((ex.tree));
                	            				retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
                	            			
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
            }ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	if (retval.node == NULL) {
                    		retval.node= new kensho::ast::Return(NULL);
                    	}

                }
            }


    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start ifStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:178:1: ifStat returns [kensho::ast::Conditional* node] : ^( K_IF ex= expression ( statement )* ( elseIfStat )* ( elseStat[$node] )? ) ;
 */
static KenshoTreeParser_ifStat_return
ifStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_ifStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_IF30;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return statement31;
    #undef	RETURN_TYPE_statement31
    #define	RETURN_TYPE_statement31 KenshoTreeParser_statement_return

    KenshoTreeParser_elseIfStat_return elseIfStat32;
    #undef	RETURN_TYPE_elseIfStat32
    #define	RETURN_TYPE_elseIfStat32 KenshoTreeParser_elseIfStat_return

    KenshoTreeParser_elseStat_return elseStat33;
    #undef	RETURN_TYPE_elseStat33
    #define	RETURN_TYPE_elseStat33 KenshoTreeParser_elseStat_return

    pANTLR3_BASE_TREE K_IF30_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_IF30       = NULL;
    ex.tree = NULL;

    statement31.tree = NULL;

    elseIfStat32.tree = NULL;

    elseStat33.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_IF30_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:179:2: ( ^( K_IF ex= expression ( statement )* ( elseIfStat )* ( elseStat[$node] )? ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:179:4: ^( K_IF ex= expression ( statement )* ( elseIfStat )* ( elseStat[$node] )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_IF30 = (pANTLR3_BASE_TREE) MATCHT(K_IF, &FOLLOW_K_IF_in_ifStat554); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            K_IF30_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_IF30);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_IF30_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_ifStat562);
            ex=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            {

                				retval.node= new kensho::ast::Conditional(ex.node);
                				pANTLR3_COMMON_TOKEN tok = (ex.tree)->getToken((ex.tree));
                				retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:185:4: ( statement )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:185:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStat571);
            	        statement31=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement31.tree);
            	        {

            	            				retval.node->addTrueBodyNode(statement31.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:188:4: ( elseIfStat )*

            for (;;)
            {
                int alt13=2;
                switch ( LA(1) ) 
                {
                case ELSEIF:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:188:6: elseIfStat
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_elseIfStat_in_ifStat583);
            	        elseIfStat32=elseIfStat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, elseIfStat32.tree);
            	        {

            	            				retval.node->addBranch(elseIfStat32.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:191:4: ( elseStat[$node] )?
            {
                int alt14=2;
                switch ( LA(1) ) 
                {
                    case K_ELSE:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:191:6: elseStat[$node]
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_elseStat_in_ifStat595);
            	        elseStat33=elseStat(ctx, retval.node);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, elseStat33.tree);

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatEx; /* Prevent compiler warnings */
    ruleifStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end ifStat */

/** 
 * $ANTLR start elseIfStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:195:1: elseIfStat returns [kensho::ast::Conditional* node] : ^( ELSEIF ex= expression ( statement )* ) ;
 */
static KenshoTreeParser_elseIfStat_return
elseIfStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_elseIfStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ELSEIF34;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return statement35;
    #undef	RETURN_TYPE_statement35
    #define	RETURN_TYPE_statement35 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE ELSEIF34_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ELSEIF34       = NULL;
    ex.tree = NULL;

    statement35.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ELSEIF34_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:196:2: ( ^( ELSEIF ex= expression ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:196:4: ^( ELSEIF ex= expression ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ELSEIF34 = (pANTLR3_BASE_TREE) MATCHT(ELSEIF, &FOLLOW_ELSEIF_in_elseIfStat621); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            ELSEIF34_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ELSEIF34);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ELSEIF34_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_elseIfStat629);
            ex=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            {

                				retval.node= new kensho::ast::Conditional(ex.node);
                				pANTLR3_COMMON_TOKEN tok = (ex.tree)->getToken((ex.tree));
                				retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:202:4: ( statement )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:202:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_elseIfStat638);
            	        statement35=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleelseIfStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement35.tree);
            	        {

            	            				retval.node->addTrueBodyNode(statement35.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseIfStatEx; /* Prevent compiler warnings */
    ruleelseIfStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end elseIfStat */

/** 
 * $ANTLR start elseStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:208:1: elseStat[kensho::ast::Conditional* node] : ^( K_ELSE ( statement )* ) ;
 */
static KenshoTreeParser_elseStat_return
elseStat(pKenshoTreeParser ctx, kensho::ast::Conditional* node)
{   
    KenshoTreeParser_elseStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_ELSE36;
    KenshoTreeParser_statement_return statement37;
    #undef	RETURN_TYPE_statement37
    #define	RETURN_TYPE_statement37 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE K_ELSE36_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_ELSE36       = NULL;
    statement37.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_ELSE36_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:209:2: ( ^( K_ELSE ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:209:4: ^( K_ELSE ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_ELSE36 = (pANTLR3_BASE_TREE) MATCHT(K_ELSE, &FOLLOW_K_ELSE_in_elseStat660); 
            if  (HASEXCEPTION())
            {
                goto ruleelseStatEx;
            }

            K_ELSE36_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_ELSE36);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_ELSE36_tree, root_1);



            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

                // f:/dev/projects/kensho/docs/KenshoTreeParser.g:210:4: ( statement )*

                for (;;)
                {
                    int alt16=2;
                    switch ( LA(1) ) 
                    {
                    case K_IF:
                    case K_WHILE:
                    case K_RETURN:
                    case BINOP:
                    case LIT:
                    case UNOP:
                    case VARDEF:
                    case CALL:
                    case CAST:
                    case ID:
                    	{
                    		alt16=1;
                    	}
                        break;

                    }

                    switch (alt16) 
                    {
                	case 1:
                	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:210:6: statement
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_statement_in_elseStat668);
                	        statement37=statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleelseStatEx;
                	        }

                	        	ADAPTOR->addChild(ADAPTOR, root_1, statement37.tree);
                	        {

                	            				node->addFalseBodyNode(statement37.node);
                	            			
                	        }

                	    }
                	    break;

                	default:
                	    goto loop16;	/* break out of the loop */
                	    break;
                    }
                }
                loop16: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
            }ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseStatEx; /* Prevent compiler warnings */
    ruleelseStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end elseStat */

/** 
 * $ANTLR start whileStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:216:1: whileStat returns [kensho::ast::While* node] : ^(t= K_WHILE ex= expression (s= statement )* ) ;
 */
static KenshoTreeParser_whileStat_return
whileStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_whileStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    t;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE t_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    t       = NULL;
    ex.tree = NULL;

    s.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:217:2: ( ^(t= K_WHILE ex= expression (s= statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:217:4: ^(t= K_WHILE ex= expression (s= statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            t = (pANTLR3_BASE_TREE) MATCHT(K_WHILE, &FOLLOW_K_WHILE_in_whileStat694); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, t_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_whileStat702);
            ex=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            {

                				retval.node= new kensho::ast::While(ex.node);
                				pANTLR3_COMMON_TOKEN tok = (ex.tree)->getToken((ex.tree));
                				retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:223:4: (s= statement )*

            for (;;)
            {
                int alt17=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:223:6: s= statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_whileStat714);
            	        s=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, s.tree);
            	        {

            	            				retval.node->addBodyNode(s.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatEx; /* Prevent compiler warnings */
    rulewhileStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end whileStat */

/** 
 * $ANTLR start variable
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:229:1: variable returns [kensho::ast::VariableDefinition* node] : ^( VARDEF t= type n= ID ) ;
 */
static KenshoTreeParser_variable_return
variable(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_variable_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    VARDEF38;
    KenshoTreeParser_type_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE VARDEF38_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    VARDEF38       = NULL;
    t.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    VARDEF38_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:235:2: ( ^( VARDEF t= type n= ID ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:235:4: ^( VARDEF t= type n= ID )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            VARDEF38 = (pANTLR3_BASE_TREE) MATCHT(VARDEF, &FOLLOW_VARDEF_in_variable745); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            VARDEF38_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, VARDEF38);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, VARDEF38_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_type_in_variable749);
            t=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_variable753); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	std::string name((char*)n->getText(n)->chars);
                    	retval.node= new kensho::ast::VariableDefinition(name, (t.tree)->getType((t.tree)));
                    	retval.node->setSourcePosition((n->getLine(n)), (n->getCharPositionInLine(n)));

                }
            }


    return retval;
}
/* $ANTLR end variable */

/** 
 * $ANTLR start type
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:238:1: type : ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE );
 */
static KenshoTreeParser_type_return
type(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set39;

    pANTLR3_BASE_TREE set39_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set39       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set39_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:239:2: ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set39=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= T_BOOL) && (LA(1) <= T_DOUBLE)) )
            {
                CONSUME();

                set39_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set39);

                ADAPTOR->addChild(ADAPTOR, root_0, set39_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type0);    goto ruletypeEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start expression
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:249:1: expression returns [kensho::ast::Node* node] : (name= ID | ^( LIT lit= literal ) | call | ^( UNOP unop unex= expression ) | ^( CAST type castex= expression ) | ^( BINOP binop left= expression right= expression ) );
 */
static KenshoTreeParser_expression_return
expression(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    name;
    pANTLR3_BASE_TREE    LIT40;
    pANTLR3_BASE_TREE    UNOP42;
    pANTLR3_BASE_TREE    CAST44;
    pANTLR3_BASE_TREE    BINOP46;
    KenshoTreeParser_literal_return lit;
    #undef	RETURN_TYPE_lit
    #define	RETURN_TYPE_lit KenshoTreeParser_literal_return

    KenshoTreeParser_expression_return unex;
    #undef	RETURN_TYPE_unex
    #define	RETURN_TYPE_unex KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return castex;
    #undef	RETURN_TYPE_castex
    #define	RETURN_TYPE_castex KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return left;
    #undef	RETURN_TYPE_left
    #define	RETURN_TYPE_left KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return right;
    #undef	RETURN_TYPE_right
    #define	RETURN_TYPE_right KenshoTreeParser_expression_return

    KenshoTreeParser_call_return call41;
    #undef	RETURN_TYPE_call41
    #define	RETURN_TYPE_call41 KenshoTreeParser_call_return

    KenshoTreeParser_unop_return unop43;
    #undef	RETURN_TYPE_unop43
    #define	RETURN_TYPE_unop43 KenshoTreeParser_unop_return

    KenshoTreeParser_type_return type45;
    #undef	RETURN_TYPE_type45
    #define	RETURN_TYPE_type45 KenshoTreeParser_type_return

    KenshoTreeParser_binop_return binop47;
    #undef	RETURN_TYPE_binop47
    #define	RETURN_TYPE_binop47 KenshoTreeParser_binop_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE LIT40_tree;
    pANTLR3_BASE_TREE UNOP42_tree;
    pANTLR3_BASE_TREE CAST44_tree;
    pANTLR3_BASE_TREE BINOP46_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    name       = NULL;
    LIT40       = NULL;
    UNOP42       = NULL;
    CAST44       = NULL;
    BINOP46       = NULL;
    lit.tree = NULL;

    unex.tree = NULL;

    castex.tree = NULL;

    left.tree = NULL;

    right.tree = NULL;

    call41.tree = NULL;

    unop43.tree = NULL;

    type45.tree = NULL;

    binop47.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    LIT40_tree   = NULL;
    UNOP42_tree   = NULL;
    CAST44_tree   = NULL;
    BINOP46_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:250:2: (name= ID | ^( LIT lit= literal ) | call | ^( UNOP unop unex= expression ) | ^( CAST type castex= expression ) | ^( BINOP binop left= expression right= expression ) )
            
            ANTLR3_UINT32 alt18;

            alt18=6;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		alt18=1;
            	}
                break;
            case LIT:
            	{
            		alt18=2;
            	}
                break;
            case CALL:
            	{
            		alt18=3;
            	}
                break;
            case UNOP:
            	{
            		alt18=4;
            	}
                break;
            case CAST:
            	{
            		alt18=5;
            	}
                break;
            case BINOP:
            	{
            		alt18=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto ruleexpressionEx;
            }

            switch (alt18) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:250:4: name= ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        name = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_expression819); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        name_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, name);ADAPTOR->addChild(ADAPTOR, root_0, name_tree);

        	        {
        	             
        	            			retval.node= new kensho::ast::Variable(
        	            				std::string((char*)name->getText(name)->chars)
        	            			); 
        	            			retval.node->setSourcePosition((name->getLine(name)), (name->getCharPositionInLine(name)));
        	            		
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:256:4: ^( LIT lit= literal )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_1     = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        LIT40 = (pANTLR3_BASE_TREE) MATCHT(LIT, &FOLLOW_LIT_in_expression827); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        LIT40_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LIT40);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, LIT40_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_literal_in_expression831);
        	        lit=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, lit.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			retval.node= lit.node;
        	            		
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:259:4: call
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_call_in_expression839);
        	        call41=call(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, call41.tree);
        	        {

        	            			retval.node= call41.node;
        	            		
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:262:4: ^( UNOP unop unex= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_1     = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        UNOP42 = (pANTLR3_BASE_TREE) MATCHT(UNOP, &FOLLOW_UNOP_in_expression847); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        UNOP42_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, UNOP42);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, UNOP42_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_unop_in_expression849);
        	        unop43=unop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, unop43.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression853);
        	        unex=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, unex.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (unop43.tree)->getToken((unop43.tree));
        	            			retval.node= new kensho::ast::UnaryExpression(tok->getType(tok), unex.node); 
        	            			retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
        	            		
        	        }

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:267:4: ^( CAST type castex= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_1     = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CAST44 = (pANTLR3_BASE_TREE) MATCHT(CAST, &FOLLOW_CAST_in_expression862); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        CAST44_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CAST44);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CAST44_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_type_in_expression864);
        	        type45=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, type45.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression868);
        	        castex=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, castex.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (type45.tree)->getToken((type45.tree));
        	            			retval.node= new kensho::ast::Cast(tok->getType(tok), castex.node);
        	            			retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
        	            		
        	        }

        	    }
        	    break;
        	case 6:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:272:4: ^( BINOP binop left= expression right= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_1     = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        BINOP46 = (pANTLR3_BASE_TREE) MATCHT(BINOP, &FOLLOW_BINOP_in_expression877); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        BINOP46_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, BINOP46);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, BINOP46_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_binop_in_expression879);
        	        binop47=binop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, binop47.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression883);
        	        left=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, left.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression887);
        	        right=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, right.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (binop47.tree)->getToken((binop47.tree));
        	            			retval.node= new kensho::ast::BinaryExpression(
        	            				tok->getType(tok), left.node, right.node
        	            			);
        	            			retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
        	            		
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start call
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:281:1: call returns [kensho::ast::Call* node] : ^( CALL name= ID (ex= expression )* ) ;
 */
static KenshoTreeParser_call_return
call(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_call_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    name;
    pANTLR3_BASE_TREE    CALL48;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE CALL48_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    name       = NULL;
    CALL48       = NULL;
    ex.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    CALL48_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:282:2: ( ^( CALL name= ID (ex= expression )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:282:4: ^( CALL name= ID (ex= expression )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            CALL48 = (pANTLR3_BASE_TREE) MATCHT(CALL, &FOLLOW_CALL_in_call908); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }

            CALL48_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CALL48);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CALL48_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            name = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_call916); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }

            name_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, name);ADAPTOR->addChild(ADAPTOR, root_1, name_tree);

            {

                				std::string nameStr((char*)name->getText(name)->chars);
                				retval.node= new kensho::ast::Call(nameStr);   
                				retval.node->setSourcePosition((name->getLine(name)), (name->getCharPositionInLine(name)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:288:4: (ex= expression )*

            for (;;)
            {
                int alt19=2;
                switch ( LA(1) ) 
                {
                case BINOP:
                case LIT:
                case UNOP:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt19=1;
                	}
                    break;

                }

                switch (alt19) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:288:6: ex= expression
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expression_in_call928);
            	        ex=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            	        {

            	            				retval.node->addArgument(ex.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallEx; /* Prevent compiler warnings */
    rulecallEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end call */

/** 
 * $ANTLR start literal
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:294:1: literal returns [kensho::ast::Literal* node] : ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR );
 */
static KenshoTreeParser_literal_return
literal(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set49;

    pANTLR3_BASE_TREE set49_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set49       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set49_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:304:2: ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set49=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= LITERAL_TRUE) && (LA(1) <= LITERAL_FALSE)) || ((LA(1) >= LITERAL_INT) && (LA(1) <= LITERAL_CHAR)) )
            {
                CONSUME();

                set49_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set49);

                ADAPTOR->addChild(ADAPTOR, root_0, set49_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	pANTLR3_COMMON_TOKEN token = retval.tree->getToken(retval.tree);
                    	retval.node= new kensho::ast::Literal(
                    		retval.tree->getType(retval.tree),
                    		std::string((char*)token->getText(token)->chars)
                    	);
                    	retval.node->setSourcePosition(token->getLine(token), token->getCharPositionInLine(token));

                }
            }


    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start unop
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:313:1: unop : ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT );
 */
static KenshoTreeParser_unop_return
unop(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_unop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set50;

    pANTLR3_BASE_TREE set50_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set50       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set50_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:314:2: ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set50=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_SUB)) || ((LA(1) >= OP_NOT) && (LA(1) <= OP_BIT_NOT)) )
            {
                CONSUME();

                set50_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set50);

                ADAPTOR->addChild(ADAPTOR, root_0, set50_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unop0);    goto ruleunopEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunopEx; /* Prevent compiler warnings */
    ruleunopEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end unop */

/** 
 * $ANTLR start binop
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:320:1: binop : ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_REM | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE );
 */
static KenshoTreeParser_binop_return
binop(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_binop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set51;

    pANTLR3_BASE_TREE set51_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set51       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set51_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:321:2: ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_REM | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set51=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_DIV)) || ((LA(1) >= OP_AND) && (LA(1) <= OP_ASSIGN)) || LA(1) == OP_USHIFT_L )
            {
                CONSUME();

                set51_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set51);

                ADAPTOR->addChild(ADAPTOR, root_0, set51_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_binop0);    goto rulebinopEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebinopEx; /* Prevent compiler warnings */
    rulebinopEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end binop */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
