/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 18, 2009 10:09:25
 *
 *     -  From the grammar source file : f:/dev/projects/kensho/docs/KenshoTreeParser.g
 *     -                            On : 2009-10-02 08:21:02
 *     -           for the tree parser : KenshoTreeParserTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "KenshoTreeParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pKenshoTreeParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pKenshoTreeParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pKenshoTreeParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   KenshoTreeParserTokenNames[68+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "T_BOOL",
        (pANTLR3_UINT8) "T_BYTE",
        (pANTLR3_UINT8) "T_SHORT",
        (pANTLR3_UINT8) "T_INT",
        (pANTLR3_UINT8) "T_CHAR",
        (pANTLR3_UINT8) "T_LONG",
        (pANTLR3_UINT8) "T_FLOAT",
        (pANTLR3_UINT8) "T_DOUBLE",
        (pANTLR3_UINT8) "T_VOID",
        (pANTLR3_UINT8) "OP_ADD",
        (pANTLR3_UINT8) "OP_SUB",
        (pANTLR3_UINT8) "OP_MUL",
        (pANTLR3_UINT8) "OP_DIV",
        (pANTLR3_UINT8) "OP_NOT",
        (pANTLR3_UINT8) "OP_BIT_NOT",
        (pANTLR3_UINT8) "OP_AND",
        (pANTLR3_UINT8) "OP_OR",
        (pANTLR3_UINT8) "OP_BIT_AND",
        (pANTLR3_UINT8) "OP_BIT_OR",
        (pANTLR3_UINT8) "OP_XOR",
        (pANTLR3_UINT8) "OP_SHIFT_L",
        (pANTLR3_UINT8) "OP_SHIFT_R",
        (pANTLR3_UINT8) "OP_USHIFT_L",
        (pANTLR3_UINT8) "OP_USHIFT_R",
        (pANTLR3_UINT8) "CMP_EQ",
        (pANTLR3_UINT8) "CMP_NEQ",
        (pANTLR3_UINT8) "CMP_LT",
        (pANTLR3_UINT8) "CMP_GT",
        (pANTLR3_UINT8) "CMP_LTE",
        (pANTLR3_UINT8) "CMP_GTE",
        (pANTLR3_UINT8) "OP_ASSIGN",
        (pANTLR3_UINT8) "K_IF",
        (pANTLR3_UINT8) "K_ELSE",
        (pANTLR3_UINT8) "K_WHILE",
        (pANTLR3_UINT8) "LITERAL_TRUE",
        (pANTLR3_UINT8) "LITERAL_FALSE",
        (pANTLR3_UINT8) "K_NATIVE",
        (pANTLR3_UINT8) "BRACE_L",
        (pANTLR3_UINT8) "BRACE_R",
        (pANTLR3_UINT8) "PAREN_L",
        (pANTLR3_UINT8) "PAREN_R",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "FUNDEF",
        (pANTLR3_UINT8) "FUNSIG",
        (pANTLR3_UINT8) "ARGDEF",
        (pANTLR3_UINT8) "BINOP",
        (pANTLR3_UINT8) "LIT",
        (pANTLR3_UINT8) "UNOP",
        (pANTLR3_UINT8) "VARDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "CAST",
        (pANTLR3_UINT8) "KENNIDEF",
        (pANTLR3_UINT8) "ELSEIF",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LITERAL_INT",
        (pANTLR3_UINT8) "LITERAL_OCT",
        (pANTLR3_UINT8) "LITERAL_HEX",
        (pANTLR3_UINT8) "LITERAL_FLOAT",
        (pANTLR3_UINT8) "LITERAL_CHAR",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "HEXDIGIT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "ESCSEQ",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "BLOCK_COMMENT"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static KenshoTreeParser_program_return	program    (pKenshoTreeParser ctx);
static KenshoTreeParser_kenniFunction_return	kenniFunction    (pKenshoTreeParser ctx);
static KenshoTreeParser_function_return	function    (pKenshoTreeParser ctx);
static KenshoTreeParser_signature_return	signature    (pKenshoTreeParser ctx);
static KenshoTreeParser_functionType_return	functionType    (pKenshoTreeParser ctx);
static KenshoTreeParser_params_return	params    (pKenshoTreeParser ctx, kensho::ast::Function* node);
static KenshoTreeParser_statement_return	statement    (pKenshoTreeParser ctx);
static KenshoTreeParser_ifStat_return	ifStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_elseIfStat_return	elseIfStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_elseStat_return	elseStat    (pKenshoTreeParser ctx, kensho::ast::Conditional* node);
static KenshoTreeParser_whileStat_return	whileStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_variable_return	variable    (pKenshoTreeParser ctx);
static KenshoTreeParser_type_return	type    (pKenshoTreeParser ctx);
static KenshoTreeParser_expression_return	expression    (pKenshoTreeParser ctx);
static KenshoTreeParser_call_return	call    (pKenshoTreeParser ctx);
static KenshoTreeParser_literal_return	literal    (pKenshoTreeParser ctx);
static KenshoTreeParser_unop_return	unop    (pKenshoTreeParser ctx);
static KenshoTreeParser_binop_return	binop    (pKenshoTreeParser ctx);
static void	KenshoTreeParserFree(pKenshoTreeParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "f:/dev/projects/kensho/docs/KenshoTreeParser.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new KenshoTreeParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoTreeParser
KenshoTreeParserNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return KenshoTreeParserNewSSD(instream, NULL);
}

/** \brief Create a new KenshoTreeParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoTreeParser
KenshoTreeParserNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pKenshoTreeParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pKenshoTreeParser) ANTLR3_CALLOC(1, sizeof(KenshoTreeParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in KenshoTreeParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our KenshoTreeParser interface
     */
    ctx->program	= program;
    ctx->kenniFunction	= kenniFunction;
    ctx->function	= function;
    ctx->signature	= signature;
    ctx->functionType	= functionType;
    ctx->params	= params;
    ctx->statement	= statement;
    ctx->ifStat	= ifStat;
    ctx->elseIfStat	= elseIfStat;
    ctx->elseStat	= elseStat;
    ctx->whileStat	= whileStat;
    ctx->variable	= variable;
    ctx->type	= type;
    ctx->expression	= expression;
    ctx->call	= call;
    ctx->literal	= literal;
    ctx->unop	= unop;
    ctx->binop	= binop;
    ctx->free			= KenshoTreeParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = KenshoTreeParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 KenshoTreeParserFree(pKenshoTreeParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);

	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return KenshoTreeParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_program80  */
static	ANTLR3_BITWORD FOLLOW_function_in_program80_bits[]	= { ANTLR3_UINT64_LIT(0x0100800000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_program80	= { FOLLOW_function_in_program80_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_kenniFunction_in_program90  */
static	ANTLR3_BITWORD FOLLOW_kenniFunction_in_program90_bits[]	= { ANTLR3_UINT64_LIT(0x0100800000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_kenniFunction_in_program90	= { FOLLOW_kenniFunction_in_program90_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KENNIDEF_in_kenniFunction115  */
static	ANTLR3_BITWORD FOLLOW_KENNIDEF_in_kenniFunction115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_KENNIDEF_in_kenniFunction115	= { FOLLOW_KENNIDEF_in_kenniFunction115_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_kenniFunction123  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_kenniFunction123_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_kenniFunction123	= { FOLLOW_functionType_in_kenniFunction123_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_kenniFunction131  */
static	ANTLR3_BITWORD FOLLOW_ID_in_kenniFunction131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_kenniFunction131	= { FOLLOW_ID_in_kenniFunction131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_kenniFunction140  */
static	ANTLR3_BITWORD FOLLOW_type_in_kenniFunction140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000FF8) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_kenniFunction140	= { FOLLOW_type_in_kenniFunction140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNDEF_in_function166  */
static	ANTLR3_BITWORD FOLLOW_FUNDEF_in_function166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNDEF_in_function166	= { FOLLOW_FUNDEF_in_function166_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_function172  */
static	ANTLR3_BITWORD FOLLOW_signature_in_function172_bits[]	= { ANTLR3_UINT64_LIT(0x04FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_function172	= { FOLLOW_signature_in_function172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_function182  */
static	ANTLR3_BITWORD FOLLOW_statement_in_function182_bits[]	= { ANTLR3_UINT64_LIT(0x04FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_function182	= { FOLLOW_statement_in_function182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNSIG_in_signature208  */
static	ANTLR3_BITWORD FOLLOW_FUNSIG_in_signature208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNSIG_in_signature208	= { FOLLOW_FUNSIG_in_signature208_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_signature216  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_signature216_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_signature216	= { FOLLOW_functionType_in_signature216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_signature224  */
static	ANTLR3_BITWORD FOLLOW_ID_in_signature224_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_signature224	= { FOLLOW_ID_in_signature224_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_params_in_signature232  */
static	ANTLR3_BITWORD FOLLOW_params_in_signature232_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_params_in_signature232	= { FOLLOW_params_in_signature232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_VOID_in_functionType251  */
static	ANTLR3_BITWORD FOLLOW_T_VOID_in_functionType251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_VOID_in_functionType251	= { FOLLOW_T_VOID_in_functionType251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_functionType255  */
static	ANTLR3_BITWORD FOLLOW_type_in_functionType255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_functionType255	= { FOLLOW_type_in_functionType255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGDEF_in_params271  */
static	ANTLR3_BITWORD FOLLOW_ARGDEF_in_params271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGDEF_in_params271	= { FOLLOW_ARGDEF_in_params271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params273  */
static	ANTLR3_BITWORD FOLLOW_type_in_params273_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params273	= { FOLLOW_type_in_params273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params277  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params277	= { FOLLOW_ID_in_params277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_statement295  */
static	ANTLR3_BITWORD FOLLOW_variable_in_statement295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_statement295	= { FOLLOW_variable_in_statement295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_statement302  */
static	ANTLR3_BITWORD FOLLOW_expression_in_statement302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_statement302	= { FOLLOW_expression_in_statement302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStat_in_statement309  */
static	ANTLR3_BITWORD FOLLOW_ifStat_in_statement309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStat_in_statement309	= { FOLLOW_ifStat_in_statement309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStat_in_statement316  */
static	ANTLR3_BITWORD FOLLOW_whileStat_in_statement316_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStat_in_statement316	= { FOLLOW_whileStat_in_statement316_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_IF_in_ifStat335  */
static	ANTLR3_BITWORD FOLLOW_K_IF_in_ifStat335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_IF_in_ifStat335	= { FOLLOW_K_IF_in_ifStat335_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStat343  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStat343_bits[]	= { ANTLR3_UINT64_LIT(0x06FC003800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStat343	= { FOLLOW_expression_in_ifStat343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStat352  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStat352_bits[]	= { ANTLR3_UINT64_LIT(0x06FC003800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStat352	= { FOLLOW_statement_in_ifStat352_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseIfStat_in_ifStat364  */
static	ANTLR3_BITWORD FOLLOW_elseIfStat_in_ifStat364_bits[]	= { ANTLR3_UINT64_LIT(0x0200001000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_elseIfStat_in_ifStat364	= { FOLLOW_elseIfStat_in_ifStat364_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseStat_in_ifStat376  */
static	ANTLR3_BITWORD FOLLOW_elseStat_in_ifStat376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_elseStat_in_ifStat376	= { FOLLOW_elseStat_in_ifStat376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ELSEIF_in_elseIfStat402  */
static	ANTLR3_BITWORD FOLLOW_ELSEIF_in_elseIfStat402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ELSEIF_in_elseIfStat402	= { FOLLOW_ELSEIF_in_elseIfStat402_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_elseIfStat410  */
static	ANTLR3_BITWORD FOLLOW_expression_in_elseIfStat410_bits[]	= { ANTLR3_UINT64_LIT(0x04FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_elseIfStat410	= { FOLLOW_expression_in_elseIfStat410_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_elseIfStat419  */
static	ANTLR3_BITWORD FOLLOW_statement_in_elseIfStat419_bits[]	= { ANTLR3_UINT64_LIT(0x04FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_elseIfStat419	= { FOLLOW_statement_in_elseIfStat419_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_ELSE_in_elseStat441  */
static	ANTLR3_BITWORD FOLLOW_K_ELSE_in_elseStat441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_ELSE_in_elseStat441	= { FOLLOW_K_ELSE_in_elseStat441_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_elseStat449  */
static	ANTLR3_BITWORD FOLLOW_statement_in_elseStat449_bits[]	= { ANTLR3_UINT64_LIT(0x04FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_elseStat449	= { FOLLOW_statement_in_elseStat449_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_WHILE_in_whileStat473  */
static	ANTLR3_BITWORD FOLLOW_K_WHILE_in_whileStat473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_WHILE_in_whileStat473	= { FOLLOW_K_WHILE_in_whileStat473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStat481  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStat481_bits[]	= { ANTLR3_UINT64_LIT(0x04FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStat481	= { FOLLOW_expression_in_whileStat481_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStat493  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStat493_bits[]	= { ANTLR3_UINT64_LIT(0x04FC002800000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStat493	= { FOLLOW_statement_in_whileStat493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARDEF_in_variable524  */
static	ANTLR3_BITWORD FOLLOW_VARDEF_in_variable524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARDEF_in_variable524	= { FOLLOW_VARDEF_in_variable524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variable528  */
static	ANTLR3_BITWORD FOLLOW_type_in_variable528_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variable528	= { FOLLOW_type_in_variable528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable532  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable532	= { FOLLOW_ID_in_variable532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type0	= { FOLLOW_set_in_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_expression598  */
static	ANTLR3_BITWORD FOLLOW_ID_in_expression598_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_expression598	= { FOLLOW_ID_in_expression598_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIT_in_expression606  */
static	ANTLR3_BITWORD FOLLOW_LIT_in_expression606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LIT_in_expression606	= { FOLLOW_LIT_in_expression606_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_expression610  */
static	ANTLR3_BITWORD FOLLOW_literal_in_expression610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_expression610	= { FOLLOW_literal_in_expression610_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_call_in_expression618  */
static	ANTLR3_BITWORD FOLLOW_call_in_expression618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_call_in_expression618	= { FOLLOW_call_in_expression618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNOP_in_expression626  */
static	ANTLR3_BITWORD FOLLOW_UNOP_in_expression626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNOP_in_expression626	= { FOLLOW_UNOP_in_expression626_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unop_in_expression628  */
static	ANTLR3_BITWORD FOLLOW_unop_in_expression628_bits[]	= { ANTLR3_UINT64_LIT(0x04DC000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_unop_in_expression628	= { FOLLOW_unop_in_expression628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression632  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression632	= { FOLLOW_expression_in_expression632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CAST_in_expression641  */
static	ANTLR3_BITWORD FOLLOW_CAST_in_expression641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CAST_in_expression641	= { FOLLOW_CAST_in_expression641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_expression643  */
static	ANTLR3_BITWORD FOLLOW_type_in_expression643_bits[]	= { ANTLR3_UINT64_LIT(0x04DC000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_expression643	= { FOLLOW_type_in_expression643_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression647  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression647	= { FOLLOW_expression_in_expression647_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINOP_in_expression656  */
static	ANTLR3_BITWORD FOLLOW_BINOP_in_expression656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BINOP_in_expression656	= { FOLLOW_BINOP_in_expression656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binop_in_expression658  */
static	ANTLR3_BITWORD FOLLOW_binop_in_expression658_bits[]	= { ANTLR3_UINT64_LIT(0x04DC000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_binop_in_expression658	= { FOLLOW_binop_in_expression658_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression662  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression662_bits[]	= { ANTLR3_UINT64_LIT(0x04DC000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression662	= { FOLLOW_expression_in_expression662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression666  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression666_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression666	= { FOLLOW_expression_in_expression666_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_call687  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_call687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_call687	= { FOLLOW_CALL_in_call687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_call695  */
static	ANTLR3_BITWORD FOLLOW_ID_in_call695_bits[]	= { ANTLR3_UINT64_LIT(0x04DC000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_call695	= { FOLLOW_ID_in_call695_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_call707  */
static	ANTLR3_BITWORD FOLLOW_expression_in_call707_bits[]	= { ANTLR3_UINT64_LIT(0x04DC000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_call707	= { FOLLOW_expression_in_call707_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_unop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unop0	= { FOLLOW_set_in_unop0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_binop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_binop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_binop0	= { FOLLOW_set_in_binop0_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:31:1: program returns [std::vector<kensho::ast::Callable*>* functions] : ( function | kenniFunction )* ;
 */
static KenshoTreeParser_program_return
program(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_program_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_function_return function1;
    #undef	RETURN_TYPE_function1
    #define	RETURN_TYPE_function1 KenshoTreeParser_function_return

    KenshoTreeParser_kenniFunction_return kenniFunction2;
    #undef	RETURN_TYPE_kenniFunction2
    #define	RETURN_TYPE_kenniFunction2 KenshoTreeParser_kenniFunction_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;


    	retval.functions= new std::vector<kensho::ast::Callable*>();

    function1.tree = NULL;

    kenniFunction2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:35:2: ( ( function | kenniFunction )* )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:35:4: ( function | kenniFunction )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:35:4: ( function | kenniFunction )*

            for (;;)
            {
                int alt1=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == FUNDEF) ) 
                    {
                        alt1=1;
                    }
                    else if ( (LA1_0 == KENNIDEF) ) 
                    {
                        alt1=2;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:35:7: function
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_function_in_program80);
            	        function1=function(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, function1.tree);
            	        {

            	            			retval.functions->push_back(function1.node);
            	            		
            	        }

            	    }
            	    break;
            	case 2:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:38:6: kenniFunction
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_kenniFunction_in_program90);
            	        kenniFunction2=kenniFunction(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, kenniFunction2.tree);
            	        {
            	             
            	            				retval.functions->push_back(kenniFunction2.node); 
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start kenniFunction
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:44:1: kenniFunction returns [kensho::ast::Callable* node] : ^( KENNIDEF t= functionType n= ID ( type )* ) ;
 */
static KenshoTreeParser_kenniFunction_return
kenniFunction(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_kenniFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    KENNIDEF3;
    KenshoTreeParser_functionType_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_functionType_return

    KenshoTreeParser_type_return type4;
    #undef	RETURN_TYPE_type4
    #define	RETURN_TYPE_type4 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE KENNIDEF3_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    KENNIDEF3       = NULL;
    t.tree = NULL;

    type4.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    KENNIDEF3_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:45:2: ( ^( KENNIDEF t= functionType n= ID ( type )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:45:4: ^( KENNIDEF t= functionType n= ID ( type )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            KENNIDEF3 = (pANTLR3_BASE_TREE) MATCHT(KENNIDEF, &FOLLOW_KENNIDEF_in_kenniFunction115); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            KENNIDEF3_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, KENNIDEF3);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, KENNIDEF3_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_functionType_in_kenniFunction123);
            t=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_kenniFunction131); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);

            {

                				std::string name((char*)n->getText(n)->chars);
                				retval.node= new kensho::ast::Callable(name, (t.tree)->getType((t.tree)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:51:4: ( type )*

            for (;;)
            {
                int alt2=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (((LA2_0 >= T_BOOL) && (LA2_0 <= T_DOUBLE))) ) 
                    {
                        alt2=1;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:51:6: type
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_type_in_kenniFunction140);
            	        type4=type(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulekenniFunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, type4.tree);
            	        {

            	            				retval.node->addParameter((type4.tree)->getType((type4.tree)));
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulekenniFunctionEx; /* Prevent compiler warnings */
    rulekenniFunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end kenniFunction */

/** 
 * $ANTLR start function
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:57:1: function returns [kensho::ast::Function* node] : ^( FUNDEF signature ( statement )* ) ;
 */
static KenshoTreeParser_function_return
function(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_function_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    FUNDEF5;
    KenshoTreeParser_signature_return signature6;
    #undef	RETURN_TYPE_signature6
    #define	RETURN_TYPE_signature6 KenshoTreeParser_signature_return

    KenshoTreeParser_statement_return statement7;
    #undef	RETURN_TYPE_statement7
    #define	RETURN_TYPE_statement7 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE FUNDEF5_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    FUNDEF5       = NULL;
    signature6.tree = NULL;

    statement7.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    FUNDEF5_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:58:2: ( ^( FUNDEF signature ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:58:4: ^( FUNDEF signature ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUNDEF5 = (pANTLR3_BASE_TREE) MATCHT(FUNDEF, &FOLLOW_FUNDEF_in_function166); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            FUNDEF5_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUNDEF5);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUNDEF5_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_signature_in_function172);
            signature6=signature(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, signature6.tree);
            {
                 
                				retval.node= signature6.node;
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:62:4: ( statement )*

            for (;;)
            {
                int alt3=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA3_0 = LA(1);
                    if ( (LA3_0 == K_IF || LA3_0 == K_WHILE || ((LA3_0 >= BINOP) && (LA3_0 <= CAST)) || LA3_0 == ID) ) 
                    {
                        alt3=1;
                    }

                }
                switch (alt3) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:62:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_function182);
            	        statement7=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement7.tree);
            	        {

            	            				retval.node->addBodyNode(statement7.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end function */

/** 
 * $ANTLR start signature
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:68:1: signature returns [kensho::ast::Function* node] : ^( FUNSIG t= functionType n= ID ( params[$node] )* ) ;
 */
static KenshoTreeParser_signature_return
signature(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_signature_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    FUNSIG8;
    KenshoTreeParser_functionType_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_functionType_return

    KenshoTreeParser_params_return params9;
    #undef	RETURN_TYPE_params9
    #define	RETURN_TYPE_params9 KenshoTreeParser_params_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE FUNSIG8_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    FUNSIG8       = NULL;
    t.tree = NULL;

    params9.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    FUNSIG8_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:69:2: ( ^( FUNSIG t= functionType n= ID ( params[$node] )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:69:4: ^( FUNSIG t= functionType n= ID ( params[$node] )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUNSIG8 = (pANTLR3_BASE_TREE) MATCHT(FUNSIG, &FOLLOW_FUNSIG_in_signature208); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            FUNSIG8_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUNSIG8);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUNSIG8_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_functionType_in_signature216);
            t=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_signature224); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);

            {

                				std::string name((char*)n->getText(n)->chars);
                				retval.node= new kensho::ast::Function(name, (t.tree)->getType((t.tree)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:75:4: ( params[$node] )*

            for (;;)
            {
                int alt4=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA4_0 = LA(1);
                    if ( (LA4_0 == ARGDEF) ) 
                    {
                        alt4=1;
                    }

                }
                switch (alt4) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:75:4: params[$node]
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_params_in_signature232);
            	        params9=params(ctx, retval.node);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignatureEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, params9.tree);

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureEx; /* Prevent compiler warnings */
    rulesignatureEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end signature */

/** 
 * $ANTLR start functionType
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:79:1: functionType : ( T_VOID | type );
 */
static KenshoTreeParser_functionType_return
functionType(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_functionType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    T_VOID10;
    KenshoTreeParser_type_return type11;
    #undef	RETURN_TYPE_type11
    #define	RETURN_TYPE_type11 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE T_VOID10_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    T_VOID10       = NULL;
    type11.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    T_VOID10_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:80:2: ( T_VOID | type )
            
            ANTLR3_UINT32 alt5;

            alt5=2;


            {
                int LA5_0 = LA(1);
                if ( (LA5_0 == T_VOID) ) 
                {
                    alt5=1;
                }
                else if ( (((LA5_0 >= T_BOOL) && (LA5_0 <= T_DOUBLE))) ) 
                {
                    alt5=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 5;
                    EXCEPTION->state        = 0;


                    goto rulefunctionTypeEx;
                }
            }
            switch (alt5) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:80:4: T_VOID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        T_VOID10 = (pANTLR3_BASE_TREE) MATCHT(T_VOID, &FOLLOW_T_VOID_in_functionType251); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        T_VOID10_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, T_VOID10);ADAPTOR->addChild(ADAPTOR, root_0, T_VOID10_tree);


        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:80:13: type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_type_in_functionType255);
        	        type11=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, type11.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionTypeEx; /* Prevent compiler warnings */
    rulefunctionTypeEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end functionType */

/** 
 * $ANTLR start params
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:83:1: params[kensho::ast::Function* node] : ^( ARGDEF type n= ID ) ;
 */
static KenshoTreeParser_params_return
params(pKenshoTreeParser ctx, kensho::ast::Function* node)
{   
    KenshoTreeParser_params_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    ARGDEF12;
    KenshoTreeParser_type_return type13;
    #undef	RETURN_TYPE_type13
    #define	RETURN_TYPE_type13 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE ARGDEF12_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    ARGDEF12       = NULL;
    type13.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    ARGDEF12_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:84:2: ( ^( ARGDEF type n= ID ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:84:4: ^( ARGDEF type n= ID )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ARGDEF12 = (pANTLR3_BASE_TREE) MATCHT(ARGDEF, &FOLLOW_ARGDEF_in_params271); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            ARGDEF12_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARGDEF12);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARGDEF12_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_type_in_params273);
            type13=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, type13.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_params277); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }

            {

                			std::string name((char*)n->getText(n)->chars);
                			node->addParameter(name, (type13.tree)->getType((type13.tree)));
                		
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparamsEx; /* Prevent compiler warnings */
    ruleparamsEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end params */

/** 
 * $ANTLR start statement
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:90:1: statement returns [kensho::ast::Node* node] : ( variable | expression | ifStat | whileStat );
 */
static KenshoTreeParser_statement_return
statement(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_statement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_variable_return variable14;
    #undef	RETURN_TYPE_variable14
    #define	RETURN_TYPE_variable14 KenshoTreeParser_variable_return

    KenshoTreeParser_expression_return expression15;
    #undef	RETURN_TYPE_expression15
    #define	RETURN_TYPE_expression15 KenshoTreeParser_expression_return

    KenshoTreeParser_ifStat_return ifStat16;
    #undef	RETURN_TYPE_ifStat16
    #define	RETURN_TYPE_ifStat16 KenshoTreeParser_ifStat_return

    KenshoTreeParser_whileStat_return whileStat17;
    #undef	RETURN_TYPE_whileStat17
    #define	RETURN_TYPE_whileStat17 KenshoTreeParser_whileStat_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    variable14.tree = NULL;

    expression15.tree = NULL;

    ifStat16.tree = NULL;

    whileStat17.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:91:2: ( variable | expression | ifStat | whileStat )
            
            ANTLR3_UINT32 alt6;

            alt6=4;

            switch ( LA(1) ) 
            {
            case VARDEF:
            	{
            		alt6=1;
            	}
                break;
            case BINOP:
            case LIT:
            case UNOP:
            case CALL:
            case CAST:
            case ID:
            	{
            		alt6=2;
            	}
                break;
            case K_IF:
            	{
            		alt6=3;
            	}
                break;
            case K_WHILE:
            	{
            		alt6=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt6) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:91:4: variable
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_variable_in_statement295);
        	        variable14=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, variable14.tree);
        	        {
        	             retval.node= variable14.node; 
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:92:4: expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_statement302);
        	        expression15=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, expression15.tree);
        	        {
        	             retval.node= expression15.node; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:93:4: ifStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_ifStat_in_statement309);
        	        ifStat16=ifStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, ifStat16.tree);
        	        {
        	             retval.node= ifStat16.node; 
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:94:4: whileStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_whileStat_in_statement316);
        	        whileStat17=whileStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, whileStat17.tree);
        	        {
        	             retval.node= whileStat17.node; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start ifStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:97:1: ifStat returns [kensho::ast::Conditional* node] : ^( K_IF ex= expression ( statement )* ( elseIfStat )* ( elseStat[$node] )? ) ;
 */
static KenshoTreeParser_ifStat_return
ifStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_ifStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_IF18;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return statement19;
    #undef	RETURN_TYPE_statement19
    #define	RETURN_TYPE_statement19 KenshoTreeParser_statement_return

    KenshoTreeParser_elseIfStat_return elseIfStat20;
    #undef	RETURN_TYPE_elseIfStat20
    #define	RETURN_TYPE_elseIfStat20 KenshoTreeParser_elseIfStat_return

    KenshoTreeParser_elseStat_return elseStat21;
    #undef	RETURN_TYPE_elseStat21
    #define	RETURN_TYPE_elseStat21 KenshoTreeParser_elseStat_return

    pANTLR3_BASE_TREE K_IF18_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_IF18       = NULL;
    ex.tree = NULL;

    statement19.tree = NULL;

    elseIfStat20.tree = NULL;

    elseStat21.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_IF18_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:98:2: ( ^( K_IF ex= expression ( statement )* ( elseIfStat )* ( elseStat[$node] )? ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:98:4: ^( K_IF ex= expression ( statement )* ( elseIfStat )* ( elseStat[$node] )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_IF18 = (pANTLR3_BASE_TREE) MATCHT(K_IF, &FOLLOW_K_IF_in_ifStat335); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            K_IF18_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_IF18);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_IF18_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_ifStat343);
            ex=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            {

                				retval.node= new kensho::ast::Conditional(ex.node);
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:102:4: ( statement )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == K_IF || LA7_0 == K_WHILE || ((LA7_0 >= BINOP) && (LA7_0 <= CAST)) || LA7_0 == ID) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:102:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStat352);
            	        statement19=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement19.tree);
            	        {

            	            				retval.node->addTrueBodyNode(statement19.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:105:4: ( elseIfStat )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == ELSEIF) ) 
                    {
                        alt8=1;
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:105:6: elseIfStat
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_elseIfStat_in_ifStat364);
            	        elseIfStat20=elseIfStat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, elseIfStat20.tree);
            	        {

            	            				retval.node->addBranch(elseIfStat20.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:108:4: ( elseStat[$node] )?
            {
                int alt9=2;
                {
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == K_ELSE) ) 
                    {
                        alt9=1;
                    }
                }
                switch (alt9) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:108:6: elseStat[$node]
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_elseStat_in_ifStat376);
            	        elseStat21=elseStat(ctx, retval.node);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, elseStat21.tree);

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatEx; /* Prevent compiler warnings */
    ruleifStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end ifStat */

/** 
 * $ANTLR start elseIfStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:112:1: elseIfStat returns [kensho::ast::Conditional* node] : ^( ELSEIF ex= expression ( statement )* ) ;
 */
static KenshoTreeParser_elseIfStat_return
elseIfStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_elseIfStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ELSEIF22;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return statement23;
    #undef	RETURN_TYPE_statement23
    #define	RETURN_TYPE_statement23 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE ELSEIF22_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ELSEIF22       = NULL;
    ex.tree = NULL;

    statement23.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ELSEIF22_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:113:2: ( ^( ELSEIF ex= expression ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:113:4: ^( ELSEIF ex= expression ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ELSEIF22 = (pANTLR3_BASE_TREE) MATCHT(ELSEIF, &FOLLOW_ELSEIF_in_elseIfStat402); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            ELSEIF22_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ELSEIF22);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ELSEIF22_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_elseIfStat410);
            ex=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            {

                				retval.node= new kensho::ast::Conditional(ex.node);
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:117:4: ( statement )*

            for (;;)
            {
                int alt10=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == K_IF || LA10_0 == K_WHILE || ((LA10_0 >= BINOP) && (LA10_0 <= CAST)) || LA10_0 == ID) ) 
                    {
                        alt10=1;
                    }

                }
                switch (alt10) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:117:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_elseIfStat419);
            	        statement23=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleelseIfStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement23.tree);
            	        {

            	            				retval.node->addTrueBodyNode(statement23.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseIfStatEx; /* Prevent compiler warnings */
    ruleelseIfStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end elseIfStat */

/** 
 * $ANTLR start elseStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:123:1: elseStat[kensho::ast::Conditional* node] : ^( K_ELSE ( statement )* ) ;
 */
static KenshoTreeParser_elseStat_return
elseStat(pKenshoTreeParser ctx, kensho::ast::Conditional* node)
{   
    KenshoTreeParser_elseStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_ELSE24;
    KenshoTreeParser_statement_return statement25;
    #undef	RETURN_TYPE_statement25
    #define	RETURN_TYPE_statement25 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE K_ELSE24_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_ELSE24       = NULL;
    statement25.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_ELSE24_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:124:2: ( ^( K_ELSE ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:124:4: ^( K_ELSE ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_ELSE24 = (pANTLR3_BASE_TREE) MATCHT(K_ELSE, &FOLLOW_K_ELSE_in_elseStat441); 
            if  (HASEXCEPTION())
            {
                goto ruleelseStatEx;
            }

            K_ELSE24_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_ELSE24);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_ELSE24_tree, root_1);



            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

                // f:/dev/projects/kensho/docs/KenshoTreeParser.g:125:4: ( statement )*

                for (;;)
                {
                    int alt11=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA11_0 = LA(1);
                        if ( (LA11_0 == K_IF || LA11_0 == K_WHILE || ((LA11_0 >= BINOP) && (LA11_0 <= CAST)) || LA11_0 == ID) ) 
                        {
                            alt11=1;
                        }

                    }
                    switch (alt11) 
                    {
                	case 1:
                	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:125:6: statement
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_statement_in_elseStat449);
                	        statement25=statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleelseStatEx;
                	        }

                	        	ADAPTOR->addChild(ADAPTOR, root_1, statement25.tree);
                	        {

                	            				node->addFalseBodyNode(statement25.node);
                	            			
                	        }

                	    }
                	    break;

                	default:
                	    goto loop11;	/* break out of the loop */
                	    break;
                    }
                }
                loop11: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
            }ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseStatEx; /* Prevent compiler warnings */
    ruleelseStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end elseStat */

/** 
 * $ANTLR start whileStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:131:1: whileStat returns [kensho::ast::While* node] : ^( K_WHILE ex= expression (s= statement )* ) ;
 */
static KenshoTreeParser_whileStat_return
whileStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_whileStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_WHILE26;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE K_WHILE26_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_WHILE26       = NULL;
    ex.tree = NULL;

    s.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_WHILE26_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:132:2: ( ^( K_WHILE ex= expression (s= statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:132:4: ^( K_WHILE ex= expression (s= statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_WHILE26 = (pANTLR3_BASE_TREE) MATCHT(K_WHILE, &FOLLOW_K_WHILE_in_whileStat473); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            K_WHILE26_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_WHILE26);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_WHILE26_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_whileStat481);
            ex=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            {

                				retval.node= new kensho::ast::While(ex.node);
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:136:4: (s= statement )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == K_IF || LA12_0 == K_WHILE || ((LA12_0 >= BINOP) && (LA12_0 <= CAST)) || LA12_0 == ID) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:136:6: s= statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_whileStat493);
            	        s=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, s.tree);
            	        {

            	            				retval.node->addBodyNode(s.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatEx; /* Prevent compiler warnings */
    rulewhileStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end whileStat */

/** 
 * $ANTLR start variable
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:142:1: variable returns [kensho::ast::VariableDefinition* node] : ^( VARDEF t= type n= ID ) ;
 */
static KenshoTreeParser_variable_return
variable(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_variable_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    VARDEF27;
    KenshoTreeParser_type_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE VARDEF27_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    VARDEF27       = NULL;
    t.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    VARDEF27_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:147:2: ( ^( VARDEF t= type n= ID ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:147:4: ^( VARDEF t= type n= ID )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            VARDEF27 = (pANTLR3_BASE_TREE) MATCHT(VARDEF, &FOLLOW_VARDEF_in_variable524); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            VARDEF27_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, VARDEF27);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, VARDEF27_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_type_in_variable528);
            t=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_variable532); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }
    else
    {
	{

	    	std::string name((char*)n->getText(n)->chars);
	    	retval.node= new kensho::ast::VariableDefinition(name, (t.tree)->getType((t.tree)));

	}
    }

    return retval;
}
/* $ANTLR end variable */

/** 
 * $ANTLR start type
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:150:1: type : ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE );
 */
static KenshoTreeParser_type_return
type(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set28;

    pANTLR3_BASE_TREE set28_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set28       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set28_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:151:2: ( T_BOOL | T_BYTE | T_SHORT | T_CHAR | T_INT | T_LONG | T_FLOAT | T_DOUBLE )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set28=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= T_BOOL) && (LA(1) <= T_DOUBLE)) )
            {
                CONSUME();

                set28_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set28);

                ADAPTOR->addChild(ADAPTOR, root_0, set28_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type0);    goto ruletypeEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start expression
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:161:1: expression returns [kensho::ast::Node* node] : (name= ID | ^( LIT lit= literal ) | call | ^( UNOP unop unex= expression ) | ^( CAST type castex= expression ) | ^( BINOP binop left= expression right= expression ) );
 */
static KenshoTreeParser_expression_return
expression(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    name;
    pANTLR3_BASE_TREE    LIT29;
    pANTLR3_BASE_TREE    UNOP31;
    pANTLR3_BASE_TREE    CAST33;
    pANTLR3_BASE_TREE    BINOP35;
    KenshoTreeParser_literal_return lit;
    #undef	RETURN_TYPE_lit
    #define	RETURN_TYPE_lit KenshoTreeParser_literal_return

    KenshoTreeParser_expression_return unex;
    #undef	RETURN_TYPE_unex
    #define	RETURN_TYPE_unex KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return castex;
    #undef	RETURN_TYPE_castex
    #define	RETURN_TYPE_castex KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return left;
    #undef	RETURN_TYPE_left
    #define	RETURN_TYPE_left KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return right;
    #undef	RETURN_TYPE_right
    #define	RETURN_TYPE_right KenshoTreeParser_expression_return

    KenshoTreeParser_call_return call30;
    #undef	RETURN_TYPE_call30
    #define	RETURN_TYPE_call30 KenshoTreeParser_call_return

    KenshoTreeParser_unop_return unop32;
    #undef	RETURN_TYPE_unop32
    #define	RETURN_TYPE_unop32 KenshoTreeParser_unop_return

    KenshoTreeParser_type_return type34;
    #undef	RETURN_TYPE_type34
    #define	RETURN_TYPE_type34 KenshoTreeParser_type_return

    KenshoTreeParser_binop_return binop36;
    #undef	RETURN_TYPE_binop36
    #define	RETURN_TYPE_binop36 KenshoTreeParser_binop_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE LIT29_tree;
    pANTLR3_BASE_TREE UNOP31_tree;
    pANTLR3_BASE_TREE CAST33_tree;
    pANTLR3_BASE_TREE BINOP35_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    name       = NULL;
    LIT29       = NULL;
    UNOP31       = NULL;
    CAST33       = NULL;
    BINOP35       = NULL;
    lit.tree = NULL;

    unex.tree = NULL;

    castex.tree = NULL;

    left.tree = NULL;

    right.tree = NULL;

    call30.tree = NULL;

    unop32.tree = NULL;

    type34.tree = NULL;

    binop36.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    LIT29_tree   = NULL;
    UNOP31_tree   = NULL;
    CAST33_tree   = NULL;
    BINOP35_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:162:2: (name= ID | ^( LIT lit= literal ) | call | ^( UNOP unop unex= expression ) | ^( CAST type castex= expression ) | ^( BINOP binop left= expression right= expression ) )
            
            ANTLR3_UINT32 alt13;

            alt13=6;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		alt13=1;
            	}
                break;
            case LIT:
            	{
            		alt13=2;
            	}
                break;
            case CALL:
            	{
            		alt13=3;
            	}
                break;
            case UNOP:
            	{
            		alt13=4;
            	}
                break;
            case CAST:
            	{
            		alt13=5;
            	}
                break;
            case BINOP:
            	{
            		alt13=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto ruleexpressionEx;
            }

            switch (alt13) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:162:4: name= ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        name = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_expression598); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        name_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, name);ADAPTOR->addChild(ADAPTOR, root_0, name_tree);

        	        {
        	             
        	            			retval.node= new kensho::ast::Variable(
        	            				std::string((char*)name->getText(name)->chars)
        	            			); 
        	            		
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:167:4: ^( LIT lit= literal )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        LIT29 = (pANTLR3_BASE_TREE) MATCHT(LIT, &FOLLOW_LIT_in_expression606); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        LIT29_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LIT29);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, LIT29_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_literal_in_expression610);
        	        lit=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, lit.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			retval.node= lit.node;
        	            		
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:170:4: call
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_call_in_expression618);
        	        call30=call(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, call30.tree);
        	        {

        	            			retval.node= call30.node;
        	            		
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:173:4: ^( UNOP unop unex= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        UNOP31 = (pANTLR3_BASE_TREE) MATCHT(UNOP, &FOLLOW_UNOP_in_expression626); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        UNOP31_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, UNOP31);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, UNOP31_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_unop_in_expression628);
        	        unop32=unop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, unop32.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression632);
        	        unex=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, unex.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (unop32.tree)->getToken((unop32.tree));
        	            			retval.node= new kensho::ast::UnaryExpression(tok->getType(tok), unex.node); 
        	            		
        	        }

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:177:4: ^( CAST type castex= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CAST33 = (pANTLR3_BASE_TREE) MATCHT(CAST, &FOLLOW_CAST_in_expression641); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        CAST33_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CAST33);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CAST33_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_type_in_expression643);
        	        type34=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, type34.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression647);
        	        castex=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, castex.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (type34.tree)->getToken((type34.tree));
        	            			retval.node= new kensho::ast::Cast(tok->getType(tok), castex.node);
        	            		
        	        }

        	    }
        	    break;
        	case 6:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:181:4: ^( BINOP binop left= expression right= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        BINOP35 = (pANTLR3_BASE_TREE) MATCHT(BINOP, &FOLLOW_BINOP_in_expression656); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        BINOP35_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, BINOP35);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, BINOP35_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_binop_in_expression658);
        	        binop36=binop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, binop36.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression662);
        	        left=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, left.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression666);
        	        right=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, right.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (binop36.tree)->getToken((binop36.tree));
        	            			retval.node= new kensho::ast::BinaryExpression(
        	            				tok->getType(tok), left.node, right.node
        	            			);
        	            		
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start call
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:189:1: call returns [kensho::ast::Call* node] : ^( CALL name= ID (ex= expression )* ) ;
 */
static KenshoTreeParser_call_return
call(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_call_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    name;
    pANTLR3_BASE_TREE    CALL37;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE CALL37_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    name       = NULL;
    CALL37       = NULL;
    ex.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    CALL37_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:190:2: ( ^( CALL name= ID (ex= expression )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:190:4: ^( CALL name= ID (ex= expression )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            CALL37 = (pANTLR3_BASE_TREE) MATCHT(CALL, &FOLLOW_CALL_in_call687); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }

            CALL37_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CALL37);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CALL37_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            name = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_call695); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }

            name_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, name);ADAPTOR->addChild(ADAPTOR, root_1, name_tree);

            {

                				std::string nameStr((char*)name->getText(name)->chars);
                				retval.node= new kensho::ast::Call(nameStr);   
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:195:4: (ex= expression )*

            for (;;)
            {
                int alt14=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA14_0 = LA(1);
                    if ( (((LA14_0 >= BINOP) && (LA14_0 <= UNOP)) || ((LA14_0 >= CALL) && (LA14_0 <= CAST)) || LA14_0 == ID) ) 
                    {
                        alt14=1;
                    }

                }
                switch (alt14) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:195:6: ex= expression
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expression_in_call707);
            	        ex=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            	        {

            	            				retval.node->addArgument(ex.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallEx; /* Prevent compiler warnings */
    rulecallEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end call */

/** 
 * $ANTLR start literal
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:201:1: literal returns [kensho::ast::Literal* node] : ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR );
 */
static KenshoTreeParser_literal_return
literal(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set38;

    pANTLR3_BASE_TREE set38_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set38       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set38_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:210:2: ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set38=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= LITERAL_TRUE) && (LA(1) <= LITERAL_FALSE)) || ((LA(1) >= LITERAL_INT) && (LA(1) <= LITERAL_CHAR)) )
            {
                CONSUME();

                set38_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set38);

                ADAPTOR->addChild(ADAPTOR, root_0, set38_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }
    else
    {
	{

	    	pANTLR3_COMMON_TOKEN token = retval.tree->getToken(retval.tree);
	    	retval.node= new kensho::ast::Literal(
	    		retval.tree->getType(retval.tree),
	    		std::string((char*)token->getText(token)->chars)
	    	);

	}
    }

    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start unop
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:219:1: unop : ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT );
 */
static KenshoTreeParser_unop_return
unop(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_unop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set39;

    pANTLR3_BASE_TREE set39_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set39       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set39_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:220:2: ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set39=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_SUB)) || ((LA(1) >= OP_NOT) && (LA(1) <= OP_BIT_NOT)) )
            {
                CONSUME();

                set39_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set39);

                ADAPTOR->addChild(ADAPTOR, root_0, set39_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_unop0);    goto ruleunopEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunopEx; /* Prevent compiler warnings */
    ruleunopEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end unop */

/** 
 * $ANTLR start binop
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:226:1: binop : ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE );
 */
static KenshoTreeParser_binop_return
binop(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_binop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set40;

    pANTLR3_BASE_TREE set40_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set40       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set40_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:227:2: ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | OP_USHIFT_L | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set40=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= OP_ADD) && (LA(1) <= OP_DIV)) || ((LA(1) >= OP_AND) && (LA(1) <= OP_ASSIGN)) )
            {
                CONSUME();

                set40_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set40);

                ADAPTOR->addChild(ADAPTOR, root_0, set40_tree);

                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_binop0);    goto rulebinopEx;
            }

             

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebinopEx; /* Prevent compiler warnings */
    rulebinopEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end binop */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
