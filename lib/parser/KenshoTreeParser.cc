/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : f:/dev/projects/kensho/docs/KenshoTreeParser.g
 *     -                            On : 2009-10-09 12:15:35
 *     -           for the tree parser : KenshoTreeParserTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "KenshoTreeParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pKenshoTreeParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pKenshoTreeParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pKenshoTreeParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pKenshoTreeParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a KenshoTreeParser_program scope set 
 */
static pKenshoTreeParser_program_SCOPE   pKenshoTreeParser_programPush(pKenshoTreeParser ctx);
static void ANTLR3_CDECL programFree(pKenshoTreeParser_program_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL programFree(pKenshoTreeParser_program_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a KenshoTreeParser program scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pKenshoTreeParser_programTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pKenshoTreeParser_program_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pKenshoTreeParser_program_SCOPE
pKenshoTreeParser_programPush(pKenshoTreeParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pKenshoTreeParser_program_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pKenshoTreeParser_programStack->size(ctx->pKenshoTreeParser_programStack) > ctx->pKenshoTreeParser_programStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pKenshoTreeParser_program_SCOPE)ctx->pKenshoTreeParser_programStack->get(ctx->pKenshoTreeParser_programStack, ctx->pKenshoTreeParser_programStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pKenshoTreeParser_program_SCOPE) ANTLR3_MALLOC(sizeof(KenshoTreeParser_program_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pKenshoTreeParser_programStack->push(ctx->pKenshoTreeParser_programStack, newAttributes, (void (*)(void *))programFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pKenshoTreeParser_programStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   KenshoTreeParserTokenNames[80+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "T_BOOL",
        (pANTLR3_UINT8) "T_BYTE",
        (pANTLR3_UINT8) "T_SHORT",
        (pANTLR3_UINT8) "T_INT",
        (pANTLR3_UINT8) "T_CHAR",
        (pANTLR3_UINT8) "T_LONG",
        (pANTLR3_UINT8) "T_FLOAT",
        (pANTLR3_UINT8) "T_DOUBLE",
        (pANTLR3_UINT8) "T_VOID",
        (pANTLR3_UINT8) "OP_ADD",
        (pANTLR3_UINT8) "OP_SUB",
        (pANTLR3_UINT8) "OP_MUL",
        (pANTLR3_UINT8) "OP_DIV",
        (pANTLR3_UINT8) "OP_NOT",
        (pANTLR3_UINT8) "OP_BIT_NOT",
        (pANTLR3_UINT8) "OP_AND",
        (pANTLR3_UINT8) "OP_OR",
        (pANTLR3_UINT8) "OP_REM",
        (pANTLR3_UINT8) "OP_BIT_AND",
        (pANTLR3_UINT8) "OP_BIT_OR",
        (pANTLR3_UINT8) "OP_XOR",
        (pANTLR3_UINT8) "OP_SHIFT_L",
        (pANTLR3_UINT8) "OP_SHIFT_R",
        (pANTLR3_UINT8) "OP_USHIFT_R",
        (pANTLR3_UINT8) "CMP_EQ",
        (pANTLR3_UINT8) "CMP_NEQ",
        (pANTLR3_UINT8) "CMP_LT",
        (pANTLR3_UINT8) "CMP_GT",
        (pANTLR3_UINT8) "CMP_LTE",
        (pANTLR3_UINT8) "CMP_GTE",
        (pANTLR3_UINT8) "OP_ASSIGN",
        (pANTLR3_UINT8) "K_IF",
        (pANTLR3_UINT8) "K_ELSE",
        (pANTLR3_UINT8) "K_WHILE",
        (pANTLR3_UINT8) "LITERAL_TRUE",
        (pANTLR3_UINT8) "LITERAL_FALSE",
        (pANTLR3_UINT8) "K_NATIVE",
        (pANTLR3_UINT8) "K_RETURN",
        (pANTLR3_UINT8) "K_NEW",
        (pANTLR3_UINT8) "K_DELETE",
        (pANTLR3_UINT8) "K_THIS",
        (pANTLR3_UINT8) "K_STRUCT",
        (pANTLR3_UINT8) "K_STATIC",
        (pANTLR3_UINT8) "BRACE_L",
        (pANTLR3_UINT8) "BRACE_R",
        (pANTLR3_UINT8) "PAREN_L",
        (pANTLR3_UINT8) "PAREN_R",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "FUNDEF",
        (pANTLR3_UINT8) "FUNSIG",
        (pANTLR3_UINT8) "ARGDEF",
        (pANTLR3_UINT8) "BINOP",
        (pANTLR3_UINT8) "LIT",
        (pANTLR3_UINT8) "UNOP",
        (pANTLR3_UINT8) "VARDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "CAST",
        (pANTLR3_UINT8) "KENNIDEF",
        (pANTLR3_UINT8) "ELSEIF",
        (pANTLR3_UINT8) "STRUCTFUN",
        (pANTLR3_UINT8) "MODS",
        (pANTLR3_UINT8) "CTOR",
        (pANTLR3_UINT8) "DTOR",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LITERAL_INT",
        (pANTLR3_UINT8) "LITERAL_OCT",
        (pANTLR3_UINT8) "LITERAL_HEX",
        (pANTLR3_UINT8) "LITERAL_FLOAT",
        (pANTLR3_UINT8) "LITERAL_CHAR",
        (pANTLR3_UINT8) "OP_USHIFT_L",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "POSDIGIT",
        (pANTLR3_UINT8) "HEXDIGIT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "ESCSEQ",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "BLOCK_COMMENT"
       };

        
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pKenshoTreeParser_programStack
 */
void
pKenshoTreeParser_programPop(pKenshoTreeParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(program)->free != NULL)
	{
        SCOPE_TOP(program)->free(SCOPE_TOP(program));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pKenshoTreeParser_programStack_limit--;
    SCOPE_TOP(program) = (pKenshoTreeParser_program_SCOPE)(ctx->pKenshoTreeParser_programStack->get(ctx->pKenshoTreeParser_programStack, ctx->pKenshoTreeParser_programStack_limit - 1));
}


// Forward declare the locally static matching functions we have generated.
//
static KenshoTreeParser_program_return	program    (pKenshoTreeParser ctx);
static KenshoTreeParser_kenniFunction_return	kenniFunction    (pKenshoTreeParser ctx);
static KenshoTreeParser_structDecl_return	structDecl    (pKenshoTreeParser ctx);
static KenshoTreeParser_structBodyDecl_return	structBodyDecl    (pKenshoTreeParser ctx, kensho::ast::Struct* parent);
static KenshoTreeParser_structCtor_return	structCtor    (pKenshoTreeParser ctx, kensho::ast::Struct* parent);
static KenshoTreeParser_structDtor_return	structDtor    (pKenshoTreeParser ctx, kensho::ast::Struct* parent);
static KenshoTreeParser_structFunction_return	structFunction    (pKenshoTreeParser ctx, kensho::ast::Struct* parent);
static KenshoTreeParser_structFunMods_return	structFunMods    (pKenshoTreeParser ctx);
static KenshoTreeParser_function_return	function    (pKenshoTreeParser ctx);
static KenshoTreeParser_signature_return	signature    (pKenshoTreeParser ctx, kensho::ast::FunctionFactory* fc);
static KenshoTreeParser_functionType_return	functionType    (pKenshoTreeParser ctx);
static KenshoTreeParser_params_return	params    (pKenshoTreeParser ctx, kensho::ast::AbstractFunction* node, uint32_t index);
static KenshoTreeParser_statement_return	statement    (pKenshoTreeParser ctx);
static KenshoTreeParser_deleteStatement_return	deleteStatement    (pKenshoTreeParser ctx);
static KenshoTreeParser_returnStatement_return	returnStatement    (pKenshoTreeParser ctx);
static KenshoTreeParser_ifStat_return	ifStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_elseIfStat_return	elseIfStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_elseStat_return	elseStat    (pKenshoTreeParser ctx, kensho::ast::Conditional* node);
static KenshoTreeParser_whileStat_return	whileStat    (pKenshoTreeParser ctx);
static KenshoTreeParser_variable_return	variable    (pKenshoTreeParser ctx);
static KenshoTreeParser_type_return	type    (pKenshoTreeParser ctx);
static KenshoTreeParser_expression_return	expression    (pKenshoTreeParser ctx);
static KenshoTreeParser_call_return	call    (pKenshoTreeParser ctx);
static KenshoTreeParser_ctorCall_return	ctorCall    (pKenshoTreeParser ctx);
static KenshoTreeParser_literal_return	literal    (pKenshoTreeParser ctx);
static KenshoTreeParser_unop_return	unop    (pKenshoTreeParser ctx);
static KenshoTreeParser_binop_return	binop    (pKenshoTreeParser ctx);
static void	KenshoTreeParserFree(pKenshoTreeParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "f:/dev/projects/kensho/docs/KenshoTreeParser.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new KenshoTreeParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoTreeParser
KenshoTreeParserNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return KenshoTreeParserNewSSD(instream, NULL);
}

/** \brief Create a new KenshoTreeParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pKenshoTreeParser
KenshoTreeParserNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pKenshoTreeParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pKenshoTreeParser) ANTLR3_CALLOC(1, sizeof(KenshoTreeParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in KenshoTreeParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our KenshoTreeParser interface
     */
    ctx->program	= program;
    ctx->kenniFunction	= kenniFunction;
    ctx->structDecl	= structDecl;
    ctx->structBodyDecl	= structBodyDecl;
    ctx->structCtor	= structCtor;
    ctx->structDtor	= structDtor;
    ctx->structFunction	= structFunction;
    ctx->structFunMods	= structFunMods;
    ctx->function	= function;
    ctx->signature	= signature;
    ctx->functionType	= functionType;
    ctx->params	= params;
    ctx->statement	= statement;
    ctx->deleteStatement	= deleteStatement;
    ctx->returnStatement	= returnStatement;
    ctx->ifStat	= ifStat;
    ctx->elseIfStat	= elseIfStat;
    ctx->elseStat	= elseStat;
    ctx->whileStat	= whileStat;
    ctx->variable	= variable;
    ctx->type	= type;
    ctx->expression	= expression;
    ctx->call	= call;
    ctx->ctorCall	= ctorCall;
    ctx->literal	= literal;
    ctx->unop	= unop;
    ctx->binop	= binop;
    ctx->free			= KenshoTreeParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pKenshoTreeParser_programPush     = pKenshoTreeParser_programPush;
    ctx->pKenshoTreeParser_programStack    = antlr3StackNew(0);
    ctx->pKenshoTreeParser_programStack_limit    = 0;
    ctx->pKenshoTreeParser_programTop      = NULL;

    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = KenshoTreeParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 KenshoTreeParserFree(pKenshoTreeParser ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pKenshoTreeParser_programStack->free(ctx->pKenshoTreeParser_programStack);

    
    ctx->vectors->close(ctx->vectors);

	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return KenshoTreeParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_program90  */
static	ANTLR3_BITWORD FOLLOW_function_in_program90_bits[]	= { ANTLR3_UINT64_LIT(0x4020200000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_program90	= { FOLLOW_function_in_program90_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_kenniFunction_in_program100  */
static	ANTLR3_BITWORD FOLLOW_kenniFunction_in_program100_bits[]	= { ANTLR3_UINT64_LIT(0x4020200000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_kenniFunction_in_program100	= { FOLLOW_kenniFunction_in_program100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structDecl_in_program109  */
static	ANTLR3_BITWORD FOLLOW_structDecl_in_program109_bits[]	= { ANTLR3_UINT64_LIT(0x4020200000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structDecl_in_program109	= { FOLLOW_structDecl_in_program109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KENNIDEF_in_kenniFunction133  */
static	ANTLR3_BITWORD FOLLOW_KENNIDEF_in_kenniFunction133_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_KENNIDEF_in_kenniFunction133	= { FOLLOW_KENNIDEF_in_kenniFunction133_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_kenniFunction141  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_kenniFunction141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_kenniFunction141	= { FOLLOW_functionType_in_kenniFunction141_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_kenniFunction149  */
static	ANTLR3_BITWORD FOLLOW_ID_in_kenniFunction149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000FF8), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_kenniFunction149	= { FOLLOW_ID_in_kenniFunction149_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_kenniFunction158  */
static	ANTLR3_BITWORD FOLLOW_type_in_kenniFunction158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000FF8), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_kenniFunction158	= { FOLLOW_type_in_kenniFunction158_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_STRUCT_in_structDecl184  */
static	ANTLR3_BITWORD FOLLOW_K_STRUCT_in_structDecl184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_STRUCT_in_structDecl184	= { FOLLOW_K_STRUCT_in_structDecl184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_structDecl192  */
static	ANTLR3_BITWORD FOLLOW_ID_in_structDecl192_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000008), ANTLR3_UINT64_LIT(0x000000000000000D) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_structDecl192	= { FOLLOW_ID_in_structDecl192_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structBodyDecl_in_structDecl202  */
static	ANTLR3_BITWORD FOLLOW_structBodyDecl_in_structDecl202_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000008), ANTLR3_UINT64_LIT(0x000000000000000D) };
static  ANTLR3_BITSET_LIST FOLLOW_structBodyDecl_in_structDecl202	= { FOLLOW_structBodyDecl_in_structDecl202_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_structBodyDecl223  */
static	ANTLR3_BITWORD FOLLOW_variable_in_structBodyDecl223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_structBodyDecl223	= { FOLLOW_variable_in_structBodyDecl223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structFunction_in_structBodyDecl230  */
static	ANTLR3_BITWORD FOLLOW_structFunction_in_structBodyDecl230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structFunction_in_structBodyDecl230	= { FOLLOW_structFunction_in_structBodyDecl230_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structCtor_in_structBodyDecl238  */
static	ANTLR3_BITWORD FOLLOW_structCtor_in_structBodyDecl238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structCtor_in_structBodyDecl238	= { FOLLOW_structCtor_in_structBodyDecl238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structDtor_in_structBodyDecl246  */
static	ANTLR3_BITWORD FOLLOW_structDtor_in_structBodyDecl246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structDtor_in_structBodyDecl246	= { FOLLOW_structDtor_in_structBodyDecl246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CTOR_in_structCtor270  */
static	ANTLR3_BITWORD FOLLOW_CTOR_in_structCtor270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CTOR_in_structCtor270	= { FOLLOW_CTOR_in_structCtor270_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_params_in_structCtor277  */
static	ANTLR3_BITWORD FOLLOW_params_in_structCtor277_bits[]	= { ANTLR3_UINT64_LIT(0x3F800E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_params_in_structCtor277	= { FOLLOW_params_in_structCtor277_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_structCtor287  */
static	ANTLR3_BITWORD FOLLOW_statement_in_structCtor287_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_structCtor287	= { FOLLOW_statement_in_structCtor287_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DTOR_in_structDtor309  */
static	ANTLR3_BITWORD FOLLOW_DTOR_in_structDtor309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DTOR_in_structDtor309	= { FOLLOW_DTOR_in_structDtor309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_structDtor320  */
static	ANTLR3_BITWORD FOLLOW_statement_in_structDtor320_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_structDtor320	= { FOLLOW_statement_in_structDtor320_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRUCTFUN_in_structFunction353  */
static	ANTLR3_BITWORD FOLLOW_STRUCTFUN_in_structFunction353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_STRUCTFUN_in_structFunction353	= { FOLLOW_STRUCTFUN_in_structFunction353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structFunMods_in_structFunction361  */
static	ANTLR3_BITWORD FOLLOW_structFunMods_in_structFunction361_bits[]	= { ANTLR3_UINT64_LIT(0x0040000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_structFunMods_in_structFunction361	= { FOLLOW_structFunMods_in_structFunction361_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_structFunction374  */
static	ANTLR3_BITWORD FOLLOW_signature_in_structFunction374_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_structFunction374	= { FOLLOW_signature_in_structFunction374_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_structFunction382  */
static	ANTLR3_BITWORD FOLLOW_statement_in_structFunction382_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_structFunction382	= { FOLLOW_statement_in_structFunction382_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MODS_in_structFunMods409  */
static	ANTLR3_BITWORD FOLLOW_MODS_in_structFunMods409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MODS_in_structFunMods409	= { FOLLOW_MODS_in_structFunMods409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_STATIC_in_structFunMods411  */
static	ANTLR3_BITWORD FOLLOW_K_STATIC_in_structFunMods411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_K_STATIC_in_structFunMods411	= { FOLLOW_K_STATIC_in_structFunMods411_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNDEF_in_function437  */
static	ANTLR3_BITWORD FOLLOW_FUNDEF_in_function437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNDEF_in_function437	= { FOLLOW_FUNDEF_in_function437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signature_in_function443  */
static	ANTLR3_BITWORD FOLLOW_signature_in_function443_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_signature_in_function443	= { FOLLOW_signature_in_function443_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_function454  */
static	ANTLR3_BITWORD FOLLOW_statement_in_function454_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_function454	= { FOLLOW_statement_in_function454_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNSIG_in_signature487  */
static	ANTLR3_BITWORD FOLLOW_FUNSIG_in_signature487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNSIG_in_signature487	= { FOLLOW_FUNSIG_in_signature487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionType_in_signature495  */
static	ANTLR3_BITWORD FOLLOW_functionType_in_signature495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_functionType_in_signature495	= { FOLLOW_functionType_in_signature495_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_signature503  */
static	ANTLR3_BITWORD FOLLOW_ID_in_signature503_bits[]	= { ANTLR3_UINT64_LIT(0x3F800E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_signature503	= { FOLLOW_ID_in_signature503_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_params_in_signature511  */
static	ANTLR3_BITWORD FOLLOW_params_in_signature511_bits[]	= { ANTLR3_UINT64_LIT(0x3F800E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_params_in_signature511	= { FOLLOW_params_in_signature511_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_VOID_in_functionType534  */
static	ANTLR3_BITWORD FOLLOW_T_VOID_in_functionType534_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_VOID_in_functionType534	= { FOLLOW_T_VOID_in_functionType534_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_functionType543  */
static	ANTLR3_BITWORD FOLLOW_type_in_functionType543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_functionType543	= { FOLLOW_type_in_functionType543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGDEF_in_params561  */
static	ANTLR3_BITWORD FOLLOW_ARGDEF_in_params561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGDEF_in_params561	= { FOLLOW_ARGDEF_in_params561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_params563  */
static	ANTLR3_BITWORD FOLLOW_type_in_params563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_params563	= { FOLLOW_type_in_params563_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_params567  */
static	ANTLR3_BITWORD FOLLOW_ID_in_params567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_params567	= { FOLLOW_ID_in_params567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_statement585  */
static	ANTLR3_BITWORD FOLLOW_variable_in_statement585_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_statement585	= { FOLLOW_variable_in_statement585_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_statement592  */
static	ANTLR3_BITWORD FOLLOW_expression_in_statement592_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_statement592	= { FOLLOW_expression_in_statement592_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStat_in_statement599  */
static	ANTLR3_BITWORD FOLLOW_ifStat_in_statement599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStat_in_statement599	= { FOLLOW_ifStat_in_statement599_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStat_in_statement606  */
static	ANTLR3_BITWORD FOLLOW_whileStat_in_statement606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStat_in_statement606	= { FOLLOW_whileStat_in_statement606_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement613  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement613	= { FOLLOW_returnStatement_in_statement613_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_deleteStatement_in_statement620  */
static	ANTLR3_BITWORD FOLLOW_deleteStatement_in_statement620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_deleteStatement_in_statement620	= { FOLLOW_deleteStatement_in_statement620_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_DELETE_in_deleteStatement639  */
static	ANTLR3_BITWORD FOLLOW_K_DELETE_in_deleteStatement639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_DELETE_in_deleteStatement639	= { FOLLOW_K_DELETE_in_deleteStatement639_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_deleteStatement643  */
static	ANTLR3_BITWORD FOLLOW_ID_in_deleteStatement643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_deleteStatement643	= { FOLLOW_ID_in_deleteStatement643_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_RETURN_in_returnStatement668  */
static	ANTLR3_BITWORD FOLLOW_K_RETURN_in_returnStatement668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_RETURN_in_returnStatement668	= { FOLLOW_K_RETURN_in_returnStatement668_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement678  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement678	= { FOLLOW_expression_in_returnStatement678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_IF_in_ifStat704  */
static	ANTLR3_BITWORD FOLLOW_K_IF_in_ifStat704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_IF_in_ifStat704	= { FOLLOW_K_IF_in_ifStat704_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStat712  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStat712_bits[]	= { ANTLR3_UINT64_LIT(0xBF000E3800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStat712	= { FOLLOW_expression_in_ifStat712_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStat721  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStat721_bits[]	= { ANTLR3_UINT64_LIT(0xBF000E3800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStat721	= { FOLLOW_statement_in_ifStat721_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseIfStat_in_ifStat733  */
static	ANTLR3_BITWORD FOLLOW_elseIfStat_in_ifStat733_bits[]	= { ANTLR3_UINT64_LIT(0x8000001000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_elseIfStat_in_ifStat733	= { FOLLOW_elseIfStat_in_ifStat733_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_elseStat_in_ifStat745  */
static	ANTLR3_BITWORD FOLLOW_elseStat_in_ifStat745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_elseStat_in_ifStat745	= { FOLLOW_elseStat_in_ifStat745_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ELSEIF_in_elseIfStat771  */
static	ANTLR3_BITWORD FOLLOW_ELSEIF_in_elseIfStat771_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ELSEIF_in_elseIfStat771	= { FOLLOW_ELSEIF_in_elseIfStat771_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_elseIfStat779  */
static	ANTLR3_BITWORD FOLLOW_expression_in_elseIfStat779_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_elseIfStat779	= { FOLLOW_expression_in_elseIfStat779_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_elseIfStat788  */
static	ANTLR3_BITWORD FOLLOW_statement_in_elseIfStat788_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_elseIfStat788	= { FOLLOW_statement_in_elseIfStat788_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_ELSE_in_elseStat810  */
static	ANTLR3_BITWORD FOLLOW_K_ELSE_in_elseStat810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_ELSE_in_elseStat810	= { FOLLOW_K_ELSE_in_elseStat810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_elseStat818  */
static	ANTLR3_BITWORD FOLLOW_statement_in_elseStat818_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_elseStat818	= { FOLLOW_statement_in_elseStat818_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_WHILE_in_whileStat844  */
static	ANTLR3_BITWORD FOLLOW_K_WHILE_in_whileStat844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_WHILE_in_whileStat844	= { FOLLOW_K_WHILE_in_whileStat844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStat852  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStat852_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStat852	= { FOLLOW_expression_in_whileStat852_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStat864  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStat864_bits[]	= { ANTLR3_UINT64_LIT(0x3F000E2800000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStat864	= { FOLLOW_statement_in_whileStat864_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARDEF_in_variable895  */
static	ANTLR3_BITWORD FOLLOW_VARDEF_in_variable895_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARDEF_in_variable895	= { FOLLOW_VARDEF_in_variable895_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variable899  */
static	ANTLR3_BITWORD FOLLOW_type_in_variable899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variable899	= { FOLLOW_type_in_variable899_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_variable903  */
static	ANTLR3_BITWORD FOLLOW_ID_in_variable903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_variable903	= { FOLLOW_ID_in_variable903_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_BOOL_in_type933  */
static	ANTLR3_BITWORD FOLLOW_T_BOOL_in_type933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_BOOL_in_type933	= { FOLLOW_T_BOOL_in_type933_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_BYTE_in_type943  */
static	ANTLR3_BITWORD FOLLOW_T_BYTE_in_type943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_BYTE_in_type943	= { FOLLOW_T_BYTE_in_type943_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_SHORT_in_type953  */
static	ANTLR3_BITWORD FOLLOW_T_SHORT_in_type953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_SHORT_in_type953	= { FOLLOW_T_SHORT_in_type953_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_CHAR_in_type963  */
static	ANTLR3_BITWORD FOLLOW_T_CHAR_in_type963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_CHAR_in_type963	= { FOLLOW_T_CHAR_in_type963_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_INT_in_type973  */
static	ANTLR3_BITWORD FOLLOW_T_INT_in_type973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_INT_in_type973	= { FOLLOW_T_INT_in_type973_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_LONG_in_type983  */
static	ANTLR3_BITWORD FOLLOW_T_LONG_in_type983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_LONG_in_type983	= { FOLLOW_T_LONG_in_type983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_FLOAT_in_type993  */
static	ANTLR3_BITWORD FOLLOW_T_FLOAT_in_type993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_FLOAT_in_type993	= { FOLLOW_T_FLOAT_in_type993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_DOUBLE_in_type1003  */
static	ANTLR3_BITWORD FOLLOW_T_DOUBLE_in_type1003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_T_DOUBLE_in_type1003	= { FOLLOW_T_DOUBLE_in_type1003_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_type1012  */
static	ANTLR3_BITWORD FOLLOW_ID_in_type1012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_type1012	= { FOLLOW_ID_in_type1012_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_expression1033  */
static	ANTLR3_BITWORD FOLLOW_ID_in_expression1033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_expression1033	= { FOLLOW_ID_in_expression1033_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIT_in_expression1041  */
static	ANTLR3_BITWORD FOLLOW_LIT_in_expression1041_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LIT_in_expression1041	= { FOLLOW_LIT_in_expression1041_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_expression1045  */
static	ANTLR3_BITWORD FOLLOW_literal_in_expression1045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_expression1045	= { FOLLOW_literal_in_expression1045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_call_in_expression1053  */
static	ANTLR3_BITWORD FOLLOW_call_in_expression1053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_call_in_expression1053	= { FOLLOW_call_in_expression1053_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctorCall_in_expression1060  */
static	ANTLR3_BITWORD FOLLOW_ctorCall_in_expression1060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctorCall_in_expression1060	= { FOLLOW_ctorCall_in_expression1060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNOP_in_expression1068  */
static	ANTLR3_BITWORD FOLLOW_UNOP_in_expression1068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_UNOP_in_expression1068	= { FOLLOW_UNOP_in_expression1068_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unop_in_expression1070  */
static	ANTLR3_BITWORD FOLLOW_unop_in_expression1070_bits[]	= { ANTLR3_UINT64_LIT(0x3700040000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_unop_in_expression1070	= { FOLLOW_unop_in_expression1070_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression1074  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression1074_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression1074	= { FOLLOW_expression_in_expression1074_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CAST_in_expression1083  */
static	ANTLR3_BITWORD FOLLOW_CAST_in_expression1083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CAST_in_expression1083	= { FOLLOW_CAST_in_expression1083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_expression1085  */
static	ANTLR3_BITWORD FOLLOW_type_in_expression1085_bits[]	= { ANTLR3_UINT64_LIT(0x3700040000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_expression1085	= { FOLLOW_type_in_expression1085_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression1089  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression1089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression1089	= { FOLLOW_expression_in_expression1089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINOP_in_expression1098  */
static	ANTLR3_BITWORD FOLLOW_BINOP_in_expression1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BINOP_in_expression1098	= { FOLLOW_BINOP_in_expression1098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binop_in_expression1100  */
static	ANTLR3_BITWORD FOLLOW_binop_in_expression1100_bits[]	= { ANTLR3_UINT64_LIT(0x3700040000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_binop_in_expression1100	= { FOLLOW_binop_in_expression1100_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression1104  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression1104_bits[]	= { ANTLR3_UINT64_LIT(0x3700040000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression1104	= { FOLLOW_expression_in_expression1104_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expression1108  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expression1108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expression1108	= { FOLLOW_expression_in_expression1108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CALL_in_call1129  */
static	ANTLR3_BITWORD FOLLOW_CALL_in_call1129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CALL_in_call1129	= { FOLLOW_CALL_in_call1129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_call1137  */
static	ANTLR3_BITWORD FOLLOW_ID_in_call1137_bits[]	= { ANTLR3_UINT64_LIT(0x3700040000000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_call1137	= { FOLLOW_ID_in_call1137_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_call1149  */
static	ANTLR3_BITWORD FOLLOW_expression_in_call1149_bits[]	= { ANTLR3_UINT64_LIT(0x3700040000000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_call1149	= { FOLLOW_expression_in_call1149_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_K_NEW_in_ctorCall1174  */
static	ANTLR3_BITWORD FOLLOW_K_NEW_in_ctorCall1174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_K_NEW_in_ctorCall1174	= { FOLLOW_K_NEW_in_ctorCall1174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ctorCall1182  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ctorCall1182_bits[]	= { ANTLR3_UINT64_LIT(0x3700040000000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ctorCall1182	= { FOLLOW_ID_in_ctorCall1182_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ctorCall1193  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ctorCall1193_bits[]	= { ANTLR3_UINT64_LIT(0x3700040000000008), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ctorCall1193	= { FOLLOW_expression_in_ctorCall1193_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LITERAL_INT_in_literal1227  */
static	ANTLR3_BITWORD FOLLOW_LITERAL_INT_in_literal1227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LITERAL_INT_in_literal1227	= { FOLLOW_LITERAL_INT_in_literal1227_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LITERAL_OCT_in_literal1235  */
static	ANTLR3_BITWORD FOLLOW_LITERAL_OCT_in_literal1235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LITERAL_OCT_in_literal1235	= { FOLLOW_LITERAL_OCT_in_literal1235_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LITERAL_HEX_in_literal1243  */
static	ANTLR3_BITWORD FOLLOW_LITERAL_HEX_in_literal1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LITERAL_HEX_in_literal1243	= { FOLLOW_LITERAL_HEX_in_literal1243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LITERAL_FLOAT_in_literal1251  */
static	ANTLR3_BITWORD FOLLOW_LITERAL_FLOAT_in_literal1251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LITERAL_FLOAT_in_literal1251	= { FOLLOW_LITERAL_FLOAT_in_literal1251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LITERAL_TRUE_in_literal1258  */
static	ANTLR3_BITWORD FOLLOW_LITERAL_TRUE_in_literal1258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LITERAL_TRUE_in_literal1258	= { FOLLOW_LITERAL_TRUE_in_literal1258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LITERAL_FALSE_in_literal1265  */
static	ANTLR3_BITWORD FOLLOW_LITERAL_FALSE_in_literal1265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LITERAL_FALSE_in_literal1265	= { FOLLOW_LITERAL_FALSE_in_literal1265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LITERAL_CHAR_in_literal1272  */
static	ANTLR3_BITWORD FOLLOW_LITERAL_CHAR_in_literal1272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LITERAL_CHAR_in_literal1272	= { FOLLOW_LITERAL_CHAR_in_literal1272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_ADD_in_unop1290  */
static	ANTLR3_BITWORD FOLLOW_OP_ADD_in_unop1290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_ADD_in_unop1290	= { FOLLOW_OP_ADD_in_unop1290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_SUB_in_unop1301  */
static	ANTLR3_BITWORD FOLLOW_OP_SUB_in_unop1301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_SUB_in_unop1301	= { FOLLOW_OP_SUB_in_unop1301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_NOT_in_unop1312  */
static	ANTLR3_BITWORD FOLLOW_OP_NOT_in_unop1312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_NOT_in_unop1312	= { FOLLOW_OP_NOT_in_unop1312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_BIT_NOT_in_unop1323  */
static	ANTLR3_BITWORD FOLLOW_OP_BIT_NOT_in_unop1323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_BIT_NOT_in_unop1323	= { FOLLOW_OP_BIT_NOT_in_unop1323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_ADD_in_binop1342  */
static	ANTLR3_BITWORD FOLLOW_OP_ADD_in_binop1342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_ADD_in_binop1342	= { FOLLOW_OP_ADD_in_binop1342_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_SUB_in_binop1353  */
static	ANTLR3_BITWORD FOLLOW_OP_SUB_in_binop1353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_SUB_in_binop1353	= { FOLLOW_OP_SUB_in_binop1353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_MUL_in_binop1364  */
static	ANTLR3_BITWORD FOLLOW_OP_MUL_in_binop1364_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_MUL_in_binop1364	= { FOLLOW_OP_MUL_in_binop1364_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_DIV_in_binop1375  */
static	ANTLR3_BITWORD FOLLOW_OP_DIV_in_binop1375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_DIV_in_binop1375	= { FOLLOW_OP_DIV_in_binop1375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_REM_in_binop1384  */
static	ANTLR3_BITWORD FOLLOW_OP_REM_in_binop1384_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_REM_in_binop1384	= { FOLLOW_OP_REM_in_binop1384_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_ASSIGN_in_binop1393  */
static	ANTLR3_BITWORD FOLLOW_OP_ASSIGN_in_binop1393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_ASSIGN_in_binop1393	= { FOLLOW_OP_ASSIGN_in_binop1393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_AND_in_binop1401  */
static	ANTLR3_BITWORD FOLLOW_OP_AND_in_binop1401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_AND_in_binop1401	= { FOLLOW_OP_AND_in_binop1401_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_OR_in_binop1410  */
static	ANTLR3_BITWORD FOLLOW_OP_OR_in_binop1410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_OR_in_binop1410	= { FOLLOW_OP_OR_in_binop1410_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_XOR_in_binop1419  */
static	ANTLR3_BITWORD FOLLOW_OP_XOR_in_binop1419_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_XOR_in_binop1419	= { FOLLOW_OP_XOR_in_binop1419_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_BIT_AND_in_binop1428  */
static	ANTLR3_BITWORD FOLLOW_OP_BIT_AND_in_binop1428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_BIT_AND_in_binop1428	= { FOLLOW_OP_BIT_AND_in_binop1428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_BIT_OR_in_binop1436  */
static	ANTLR3_BITWORD FOLLOW_OP_BIT_OR_in_binop1436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_BIT_OR_in_binop1436	= { FOLLOW_OP_BIT_OR_in_binop1436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_SHIFT_L_in_binop1444  */
static	ANTLR3_BITWORD FOLLOW_OP_SHIFT_L_in_binop1444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_SHIFT_L_in_binop1444	= { FOLLOW_OP_SHIFT_L_in_binop1444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_SHIFT_R_in_binop1452  */
static	ANTLR3_BITWORD FOLLOW_OP_SHIFT_R_in_binop1452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_SHIFT_R_in_binop1452	= { FOLLOW_OP_SHIFT_R_in_binop1452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_USHIFT_R_in_binop1460  */
static	ANTLR3_BITWORD FOLLOW_OP_USHIFT_R_in_binop1460_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_USHIFT_R_in_binop1460	= { FOLLOW_OP_USHIFT_R_in_binop1460_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CMP_EQ_in_binop1468  */
static	ANTLR3_BITWORD FOLLOW_CMP_EQ_in_binop1468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CMP_EQ_in_binop1468	= { FOLLOW_CMP_EQ_in_binop1468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CMP_NEQ_in_binop1477  */
static	ANTLR3_BITWORD FOLLOW_CMP_NEQ_in_binop1477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CMP_NEQ_in_binop1477	= { FOLLOW_CMP_NEQ_in_binop1477_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CMP_GT_in_binop1486  */
static	ANTLR3_BITWORD FOLLOW_CMP_GT_in_binop1486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CMP_GT_in_binop1486	= { FOLLOW_CMP_GT_in_binop1486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CMP_GTE_in_binop1495  */
static	ANTLR3_BITWORD FOLLOW_CMP_GTE_in_binop1495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CMP_GTE_in_binop1495	= { FOLLOW_CMP_GTE_in_binop1495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CMP_LT_in_binop1504  */
static	ANTLR3_BITWORD FOLLOW_CMP_LT_in_binop1504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CMP_LT_in_binop1504	= { FOLLOW_CMP_LT_in_binop1504_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CMP_LTE_in_binop1513  */
static	ANTLR3_BITWORD FOLLOW_CMP_LTE_in_binop1513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CMP_LTE_in_binop1513	= { FOLLOW_CMP_LTE_in_binop1513_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:49:1: program returns [kensho::ast::ModuleBuilder* builder] : ( function | kenniFunction | structDecl )* ;
 */
static KenshoTreeParser_program_return
program(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_program_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_function_return function1;
    #undef	RETURN_TYPE_function1
    #define	RETURN_TYPE_function1 KenshoTreeParser_function_return

    KenshoTreeParser_kenniFunction_return kenniFunction2;
    #undef	RETURN_TYPE_kenniFunction2
    #define	RETURN_TYPE_kenniFunction2 KenshoTreeParser_kenniFunction_return

    KenshoTreeParser_structDecl_return structDecl3;
    #undef	RETURN_TYPE_structDecl3
    #define	RETURN_TYPE_structDecl3 KenshoTreeParser_structDecl_return


    /* Initialize rule variables
     */

    ctx->pKenshoTreeParser_programTop = pKenshoTreeParser_programPush(ctx);
    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;


    		(SCOPE_TOP(program))->mb= new kensho::ast::ModuleBuilder("default");

    function1.tree = NULL;

    kenniFunction2.tree = NULL;

    structDecl3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:57:2: ( ( function | kenniFunction | structDecl )* )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:57:4: ( function | kenniFunction | structDecl )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:57:4: ( function | kenniFunction | structDecl )*

            for (;;)
            {
                int alt1=4;
                switch ( LA(1) ) 
                {
                case FUNDEF:
                	{
                		alt1=1;
                	}
                    break;
                case KENNIDEF:
                	{
                		alt1=2;
                	}
                    break;
                case K_STRUCT:
                	{
                		alt1=3;
                	}
                    break;

                }

                switch (alt1) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:57:7: function
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_function_in_program90);
            	        function1=function(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, function1.tree);
            	        {

            	            				(SCOPE_TOP(program))->mb->addFunction(function1.node);
            	            		
            	        }

            	    }
            	    break;
            	case 2:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:60:6: kenniFunction
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_kenniFunction_in_program100);
            	        kenniFunction2=kenniFunction(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, kenniFunction2.tree);
            	        {
            	             
            	            					(SCOPE_TOP(program))->mb->addFunction(kenniFunction2.node); 
            	            			
            	        }

            	    }
            	    break;
            	case 3:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:63:5: structDecl
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_structDecl_in_program109);
            	        structDecl3=structDecl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_0, structDecl3.tree);
            	        {

            	            					(SCOPE_TOP(program))->mb->addStruct(structDecl3.node);			
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {
                     retval.builder= 	(SCOPE_TOP(program))->mb; 
                }
            }

    pKenshoTreeParser_programPop(ctx);

    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start kenniFunction
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:69:1: kenniFunction returns [kensho::ast::Callable* node] : ^( KENNIDEF t= functionType n= ID ( type )* ) ;
 */
static KenshoTreeParser_kenniFunction_return
kenniFunction(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_kenniFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    KENNIDEF4;
    KenshoTreeParser_functionType_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_functionType_return

    KenshoTreeParser_type_return type5;
    #undef	RETURN_TYPE_type5
    #define	RETURN_TYPE_type5 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE KENNIDEF4_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    KENNIDEF4       = NULL;
    t.tree = NULL;

    type5.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    KENNIDEF4_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:70:2: ( ^( KENNIDEF t= functionType n= ID ( type )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:70:4: ^( KENNIDEF t= functionType n= ID ( type )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            KENNIDEF4 = (pANTLR3_BASE_TREE) MATCHT(KENNIDEF, &FOLLOW_KENNIDEF_in_kenniFunction133); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            KENNIDEF4_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, KENNIDEF4);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, KENNIDEF4_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_functionType_in_kenniFunction141);
            t=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_kenniFunction149); 
            if  (HASEXCEPTION())
            {
                goto rulekenniFunctionEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);

            {

                				std::string name((char*)n->getText(n)->chars);
                				retval.node= new kensho::ast::Callable(name, t.ty);
                				retval.node->setSourcePosition((n->getLine(n)), (n->getCharPositionInLine(n)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:77:4: ( type )*

            for (;;)
            {
                int alt2=2;
                switch ( LA(1) ) 
                {
                case T_BOOL:
                case T_BYTE:
                case T_SHORT:
                case T_INT:
                case T_CHAR:
                case T_LONG:
                case T_FLOAT:
                case T_DOUBLE:
                case ID:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:77:6: type
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_type_in_kenniFunction158);
            	        type5=type(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulekenniFunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, type5.tree);
            	        {

            	            				retval.node->addParameter(type5.ty);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulekenniFunctionEx; /* Prevent compiler warnings */
    rulekenniFunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end kenniFunction */

/** 
 * $ANTLR start structDecl
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:83:1: structDecl returns [kensho::ast::Struct* node] : ^( K_STRUCT n= ID ( structBodyDecl[$node] )* ) ;
 */
static KenshoTreeParser_structDecl_return
structDecl(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_structDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    K_STRUCT6;
    KenshoTreeParser_structBodyDecl_return structBodyDecl7;
    #undef	RETURN_TYPE_structBodyDecl7
    #define	RETURN_TYPE_structBodyDecl7 KenshoTreeParser_structBodyDecl_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE K_STRUCT6_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    K_STRUCT6       = NULL;
    structBodyDecl7.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    K_STRUCT6_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:84:2: ( ^( K_STRUCT n= ID ( structBodyDecl[$node] )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:84:4: ^( K_STRUCT n= ID ( structBodyDecl[$node] )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_STRUCT6 = (pANTLR3_BASE_TREE) MATCHT(K_STRUCT, &FOLLOW_K_STRUCT_in_structDecl184); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }

            K_STRUCT6_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_STRUCT6);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_STRUCT6_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_structDecl192); 
            if  (HASEXCEPTION())
            {
                goto rulestructDeclEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);

            {

                				std::string name((char*)n->getText(n)->chars);
                				retval.node= new kensho::ast::Struct(name);
                				retval.node->setSourcePosition((n->getLine(n)), (n->getCharPositionInLine(n)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:90:4: ( structBodyDecl[$node] )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) ) 
                {
                case VARDEF:
                case STRUCTFUN:
                case CTOR:
                case DTOR:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:90:6: structBodyDecl[$node]
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_structBodyDecl_in_structDecl202);
            	        structBodyDecl7=structBodyDecl(ctx, retval.node);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructDeclEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, structBodyDecl7.tree);

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructDeclEx; /* Prevent compiler warnings */
    rulestructDeclEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end structDecl */

/** 
 * $ANTLR start structBodyDecl
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:94:1: structBodyDecl[kensho::ast::Struct* parent] : ( variable | structFunction[$parent] | ctor= structCtor[$parent] | structDtor[$parent] );
 */
static KenshoTreeParser_structBodyDecl_return
structBodyDecl(pKenshoTreeParser ctx, kensho::ast::Struct* parent)
{   
    KenshoTreeParser_structBodyDecl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_structCtor_return ctor;
    #undef	RETURN_TYPE_ctor
    #define	RETURN_TYPE_ctor KenshoTreeParser_structCtor_return

    KenshoTreeParser_variable_return variable8;
    #undef	RETURN_TYPE_variable8
    #define	RETURN_TYPE_variable8 KenshoTreeParser_variable_return

    KenshoTreeParser_structFunction_return structFunction9;
    #undef	RETURN_TYPE_structFunction9
    #define	RETURN_TYPE_structFunction9 KenshoTreeParser_structFunction_return

    KenshoTreeParser_structDtor_return structDtor10;
    #undef	RETURN_TYPE_structDtor10
    #define	RETURN_TYPE_structDtor10 KenshoTreeParser_structDtor_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ctor.tree = NULL;

    variable8.tree = NULL;

    structFunction9.tree = NULL;

    structDtor10.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:95:2: ( variable | structFunction[$parent] | ctor= structCtor[$parent] | structDtor[$parent] )
            
            ANTLR3_UINT32 alt4;

            alt4=4;

            switch ( LA(1) ) 
            {
            case VARDEF:
            	{
            		alt4=1;
            	}
                break;
            case STRUCTFUN:
            	{
            		alt4=2;
            	}
                break;
            case CTOR:
            	{
            		alt4=3;
            	}
                break;
            case DTOR:
            	{
            		alt4=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto rulestructBodyDeclEx;
            }

            switch (alt4) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:95:4: variable
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_variable_in_structBodyDecl223);
        	        variable8=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, variable8.tree);
        	        {

        	            		parent->addVariableDefinition(variable8.node);
        	            	
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:98:4: structFunction[$parent]
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_structFunction_in_structBodyDecl230);
        	        structFunction9=structFunction(ctx, parent);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, structFunction9.tree);

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:99:4: ctor= structCtor[$parent]
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_structCtor_in_structBodyDecl238);
        	        ctor=structCtor(ctx, parent);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, ctor.tree);
        	        {

        	            			if (parent->getConstructor() != NULL) {
        	            				throw(kensho::ParseError("more than one constructor defined in struct " 
        	            					+ parent->getName()));
        	            			}
        	            			parent->setConstructor(dynamic_cast<kensho::ast::StructFunction*>(ctor.node));
        	            		
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:106:4: structDtor[$parent]
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_structDtor_in_structBodyDecl246);
        	        structDtor10=structDtor(ctx, parent);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestructBodyDeclEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, structDtor10.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestructBodyDeclEx; /* Prevent compiler warnings */
    rulestructBodyDeclEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end structBodyDecl */

/** 
 * $ANTLR start structCtor
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:109:1: structCtor[kensho::ast::Struct* parent] returns [kensho::ast::StructFunction* node] : ^( CTOR ( params[$node, paramCount++] )* ( statement )* ) ;
 */
static KenshoTreeParser_structCtor_return
structCtor(pKenshoTreeParser ctx, kensho::ast::Struct* parent)
{   
    KenshoTreeParser_structCtor_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    CTOR11;
    KenshoTreeParser_params_return params12;
    #undef	RETURN_TYPE_params12
    #define	RETURN_TYPE_params12 KenshoTreeParser_params_return

    KenshoTreeParser_statement_return statement13;
    #undef	RETURN_TYPE_statement13
    #define	RETURN_TYPE_statement13 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE CTOR11_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

     uint32_t paramCount = 0; 
    CTOR11       = NULL;
    params12.tree = NULL;

    statement13.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    CTOR11_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:111:2: ( ^( CTOR ( params[$node, paramCount++] )* ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:111:4: ^( CTOR ( params[$node, paramCount++] )* ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            CTOR11 = (pANTLR3_BASE_TREE) MATCHT(CTOR, &FOLLOW_CTOR_in_structCtor270); 
            if  (HASEXCEPTION())
            {
                goto rulestructCtorEx;
            }

            CTOR11_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CTOR11);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CTOR11_tree, root_1);


            {

                			retval.node= dynamic_cast<kensho::ast::StructFunction*>(
                				parent->createFunction(
                					"new", 
                						(SCOPE_TOP(program))->mb->createType(kensho::ast::TyVoid)
                				)
                			);
                		
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

                // f:/dev/projects/kensho/docs/KenshoTreeParser.g:119:4: ( params[$node, paramCount++] )*

                for (;;)
                {
                    int alt5=2;
                    switch ( LA(1) ) 
                    {
                    case ARGDEF:
                    	{
                    		alt5=1;
                    	}
                        break;

                    }

                    switch (alt5) 
                    {
                	case 1:
                	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:119:4: params[$node, paramCount++]
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_params_in_structCtor277);
                	        params12=params(ctx, retval.node, paramCount++);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulestructCtorEx;
                	        }

                	        	ADAPTOR->addChild(ADAPTOR, root_1, params12.tree);

                	    }
                	    break;

                	default:
                	    goto loop5;	/* break out of the loop */
                	    break;
                    }
                }
                loop5: ; /* Jump out to here if this rule does not match */


                // f:/dev/projects/kensho/docs/KenshoTreeParser.g:120:4: ( statement )*

                for (;;)
                {
                    int alt6=2;
                    switch ( LA(1) ) 
                    {
                    case K_IF:
                    case K_WHILE:
                    case K_RETURN:
                    case K_NEW:
                    case K_DELETE:
                    case BINOP:
                    case LIT:
                    case UNOP:
                    case VARDEF:
                    case CALL:
                    case CAST:
                    case ID:
                    	{
                    		alt6=1;
                    	}
                        break;

                    }

                    switch (alt6) 
                    {
                	case 1:
                	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:120:6: statement
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_statement_in_structCtor287);
                	        statement13=statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulestructCtorEx;
                	        }

                	        	ADAPTOR->addChild(ADAPTOR, root_1, statement13.tree);
                	        {

                	            				retval.node->addBodyNode(statement13.node);
                	            			
                	        }

                	    }
                	    break;

                	default:
                	    goto loop6;	/* break out of the loop */
                	    break;
                    }
                }
                loop6: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
            }ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructCtorEx; /* Prevent compiler warnings */
    rulestructCtorEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end structCtor */

/** 
 * $ANTLR start structDtor
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:126:1: structDtor[kensho::ast::Struct* parent] : ^( DTOR (stat= statement )* ) ;
 */
static KenshoTreeParser_structDtor_return
structDtor(pKenshoTreeParser ctx, kensho::ast::Struct* parent)
{   
    KenshoTreeParser_structDtor_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    DTOR14;
    KenshoTreeParser_statement_return stat;
    #undef	RETURN_TYPE_stat
    #define	RETURN_TYPE_stat KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE DTOR14_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    DTOR14       = NULL;
    stat.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    DTOR14_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:127:2: ( ^( DTOR (stat= statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:127:4: ^( DTOR (stat= statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            DTOR14 = (pANTLR3_BASE_TREE) MATCHT(DTOR, &FOLLOW_DTOR_in_structDtor309); 
            if  (HASEXCEPTION())
            {
                goto rulestructDtorEx;
            }

            DTOR14_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, DTOR14);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, DTOR14_tree, root_1);


            {

                			if (parent->hasDestructor()) {
                				throw(kensho::ParseError("more than one destructor defined in struct "
                					+ parent->getName()));
                			}
                		
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

                // f:/dev/projects/kensho/docs/KenshoTreeParser.g:133:4: (stat= statement )*

                for (;;)
                {
                    int alt7=2;
                    switch ( LA(1) ) 
                    {
                    case K_IF:
                    case K_WHILE:
                    case K_RETURN:
                    case K_NEW:
                    case K_DELETE:
                    case BINOP:
                    case LIT:
                    case UNOP:
                    case VARDEF:
                    case CALL:
                    case CAST:
                    case ID:
                    	{
                    		alt7=1;
                    	}
                        break;

                    }

                    switch (alt7) 
                    {
                	case 1:
                	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:133:6: stat= statement
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_statement_in_structDtor320);
                	        stat=statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulestructDtorEx;
                	        }

                	        	ADAPTOR->addChild(ADAPTOR, root_1, stat.tree);
                	        {

                	            				parent->addDestructorBodyNode(stat.node);
                	            			
                	        }

                	    }
                	    break;

                	default:
                	    goto loop7;	/* break out of the loop */
                	    break;
                    }
                }
                loop7: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
            }ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructDtorEx; /* Prevent compiler warnings */
    rulestructDtorEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end structDtor */

/** 
 * $ANTLR start structFunction
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:139:1: structFunction[kensho::ast::Struct* parent] : ^( STRUCTFUN ( structFunMods )* sig= signature[$parent] ( statement )* ) ;
 */
static KenshoTreeParser_structFunction_return
structFunction(pKenshoTreeParser ctx, kensho::ast::Struct* parent)
{   
    KenshoTreeParser_structFunction_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    STRUCTFUN15;
    KenshoTreeParser_signature_return sig;
    #undef	RETURN_TYPE_sig
    #define	RETURN_TYPE_sig KenshoTreeParser_signature_return

    KenshoTreeParser_structFunMods_return structFunMods16;
    #undef	RETURN_TYPE_structFunMods16
    #define	RETURN_TYPE_structFunMods16 KenshoTreeParser_structFunMods_return

    KenshoTreeParser_statement_return statement17;
    #undef	RETURN_TYPE_statement17
    #define	RETURN_TYPE_statement17 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE STRUCTFUN15_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;


    	bool staticDef = false;

    STRUCTFUN15       = NULL;
    sig.tree = NULL;

    structFunMods16.tree = NULL;

    statement17.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    STRUCTFUN15_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:150:2: ( ^( STRUCTFUN ( structFunMods )* sig= signature[$parent] ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:150:4: ^( STRUCTFUN ( structFunMods )* sig= signature[$parent] ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            STRUCTFUN15 = (pANTLR3_BASE_TREE) MATCHT(STRUCTFUN, &FOLLOW_STRUCTFUN_in_structFunction353); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }

            STRUCTFUN15_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, STRUCTFUN15);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, STRUCTFUN15_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:151:4: ( structFunMods )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                case MODS:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:151:6: structFunMods
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_structFunMods_in_structFunction361);
            	        structFunMods16=structFunMods(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructFunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, structFunMods16.tree);
            	        {
            	             if (structFunMods16.staticDef) staticDef = true; 
            	        }

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_signature_in_structFunction374);
            sig=signature(ctx, parent);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestructFunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, sig.tree);

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:153:4: ( statement )*

            for (;;)
            {
                int alt9=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case K_NEW:
                case K_DELETE:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:153:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_structFunction382);
            	        statement17=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructFunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement17.tree);
            	        {

            	            				sig.node->addBodyNode(statement17.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructFunctionEx; /* Prevent compiler warnings */
    rulestructFunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	kensho::ast::StructFunction* fun = 
                    		dynamic_cast<kensho::ast::StructFunction*>(sig.node);
                    	assert(fun != NULL);
                    	fun->setStatic(staticDef);
                    	parent->addFunction(fun);

                }
            }


    return retval;
}
/* $ANTLR end structFunction */

/** 
 * $ANTLR start structFunMods
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:159:1: structFunMods returns [bool staticDef] : ^( MODS K_STATIC ) ;
 */
static KenshoTreeParser_structFunMods_return
structFunMods(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_structFunMods_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    MODS18;
    pANTLR3_BASE_TREE    K_STATIC19;

    pANTLR3_BASE_TREE MODS18_tree;
    pANTLR3_BASE_TREE K_STATIC19_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    MODS18       = NULL;
    K_STATIC19       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    MODS18_tree   = NULL;
    K_STATIC19_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:160:2: ( ^( MODS K_STATIC ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:160:4: ^( MODS K_STATIC )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            MODS18 = (pANTLR3_BASE_TREE) MATCHT(MODS, &FOLLOW_MODS_in_structFunMods409); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunModsEx;
            }

            MODS18_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, MODS18);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, MODS18_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            K_STATIC19 = (pANTLR3_BASE_TREE) MATCHT(K_STATIC, &FOLLOW_K_STATIC_in_structFunMods411); 
            if  (HASEXCEPTION())
            {
                goto rulestructFunModsEx;
            }

            K_STATIC19_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_STATIC19);ADAPTOR->addChild(ADAPTOR, root_1, K_STATIC19_tree);

            {
                 retval.staticDef= true; 
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructFunModsEx; /* Prevent compiler warnings */
    rulestructFunModsEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end structFunMods */

/** 
 * $ANTLR start function
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:163:1: function returns [kensho::ast::Function* node] : ^( FUNDEF signature[factory] ( statement )* ) ;
 */
static KenshoTreeParser_function_return
function(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_function_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    FUNDEF20;
    KenshoTreeParser_signature_return signature21;
    #undef	RETURN_TYPE_signature21
    #define	RETURN_TYPE_signature21 KenshoTreeParser_signature_return

    KenshoTreeParser_statement_return statement22;
    #undef	RETURN_TYPE_statement22
    #define	RETURN_TYPE_statement22 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE FUNDEF20_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;


    	static kensho::ast::Function::Factory* factory = 
    		new kensho::ast::Function::Factory();

    FUNDEF20       = NULL;
    signature21.tree = NULL;

    statement22.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    FUNDEF20_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:168:2: ( ^( FUNDEF signature[factory] ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:168:4: ^( FUNDEF signature[factory] ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUNDEF20 = (pANTLR3_BASE_TREE) MATCHT(FUNDEF, &FOLLOW_FUNDEF_in_function437); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            FUNDEF20_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUNDEF20);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUNDEF20_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_signature_in_function443);
            signature21=signature(ctx, factory);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, signature21.tree);
            {
                 
                				retval.node= dynamic_cast<kensho::ast::Function*>(signature21.node);
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:172:4: ( statement )*

            for (;;)
            {
                int alt10=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case K_NEW:
                case K_DELETE:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:172:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_function454);
            	        statement22=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement22.tree);
            	        {

            	            				retval.node->addBodyNode(statement22.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end function */

/** 
 * $ANTLR start signature
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:178:1: signature[kensho::ast::FunctionFactory* fc] returns [kensho::ast::AbstractFunction* node] : ^( FUNSIG t= functionType n= ID ( params[$node, paramCount++] )* ) ;
 */
static KenshoTreeParser_signature_return
signature(pKenshoTreeParser ctx, kensho::ast::FunctionFactory* fc)
{   
    KenshoTreeParser_signature_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    FUNSIG23;
    KenshoTreeParser_functionType_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_functionType_return

    KenshoTreeParser_params_return params24;
    #undef	RETURN_TYPE_params24
    #define	RETURN_TYPE_params24 KenshoTreeParser_params_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE FUNSIG23_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

     uint32_t paramCount = 0; 
    n       = NULL;
    FUNSIG23       = NULL;
    t.tree = NULL;

    params24.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    FUNSIG23_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:181:2: ( ^( FUNSIG t= functionType n= ID ( params[$node, paramCount++] )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:181:4: ^( FUNSIG t= functionType n= ID ( params[$node, paramCount++] )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUNSIG23 = (pANTLR3_BASE_TREE) MATCHT(FUNSIG, &FOLLOW_FUNSIG_in_signature487); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            FUNSIG23_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUNSIG23);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUNSIG23_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_functionType_in_signature495);
            t=functionType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_signature503); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);

            {

                				std::string name((char*)n->getText(n)->chars);
                				retval.node= fc->createFunction(name, t.ty);
                				retval.node->setSourcePosition((n->getLine(n)), (n->getCharPositionInLine(n)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:188:4: ( params[$node, paramCount++] )*

            for (;;)
            {
                int alt11=2;
                switch ( LA(1) ) 
                {
                case ARGDEF:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:188:4: params[$node, paramCount++]
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_params_in_signature511);
            	        params24=params(ctx, retval.node, paramCount++);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignatureEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, params24.tree);

            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureEx; /* Prevent compiler warnings */
    rulesignatureEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end signature */

/** 
 * $ANTLR start functionType
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:192:1: functionType returns [kensho::ast::Type* ty] : ( T_VOID | type );
 */
static KenshoTreeParser_functionType_return
functionType(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_functionType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    T_VOID25;
    KenshoTreeParser_type_return type26;
    #undef	RETURN_TYPE_type26
    #define	RETURN_TYPE_type26 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE T_VOID25_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    T_VOID25       = NULL;
    type26.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    T_VOID25_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:193:2: ( T_VOID | type )
            
            ANTLR3_UINT32 alt12;

            alt12=2;

            switch ( LA(1) ) 
            {
            case T_VOID:
            	{
            		alt12=1;
            	}
                break;
            case T_BOOL:
            case T_BYTE:
            case T_SHORT:
            case T_INT:
            case T_CHAR:
            case T_LONG:
            case T_FLOAT:
            case T_DOUBLE:
            case ID:
            	{
            		alt12=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 12;
                EXCEPTION->state        = 0;


                goto rulefunctionTypeEx;
            }

            switch (alt12) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:193:4: T_VOID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        T_VOID25 = (pANTLR3_BASE_TREE) MATCHT(T_VOID, &FOLLOW_T_VOID_in_functionType534); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        T_VOID25_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, T_VOID25);ADAPTOR->addChild(ADAPTOR, root_0, T_VOID25_tree);

        	        {

        	            			retval.ty= 	(SCOPE_TOP(program))->mb->createType(kensho::ast::TyVoid);
        	            		
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:196:5: type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_type_in_functionType543);
        	        type26=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionTypeEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, type26.tree);
        	        {
        	             retval.ty= type26.ty; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionTypeEx; /* Prevent compiler warnings */
    rulefunctionTypeEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end functionType */

/** 
 * $ANTLR start params
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:199:1: params[kensho::ast::AbstractFunction* node, uint32_t index] : ^( ARGDEF type n= ID ) ;
 */
static KenshoTreeParser_params_return
params(pKenshoTreeParser ctx, kensho::ast::AbstractFunction* node, uint32_t index)
{   
    KenshoTreeParser_params_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    ARGDEF27;
    KenshoTreeParser_type_return type28;
    #undef	RETURN_TYPE_type28
    #define	RETURN_TYPE_type28 KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE ARGDEF27_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    ARGDEF27       = NULL;
    type28.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    ARGDEF27_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:200:2: ( ^( ARGDEF type n= ID ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:200:4: ^( ARGDEF type n= ID )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ARGDEF27 = (pANTLR3_BASE_TREE) MATCHT(ARGDEF, &FOLLOW_ARGDEF_in_params561); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            ARGDEF27_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARGDEF27);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARGDEF27_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_type_in_params563);
            type28=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, type28.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_params567); 
            if  (HASEXCEPTION())
            {
                goto ruleparamsEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }

            {

                			std::string name((char*)n->getText(n)->chars);
                			node->addNamedParameter(name, type28.ty);
                		
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparamsEx; /* Prevent compiler warnings */
    ruleparamsEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end params */

/** 
 * $ANTLR start statement
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:206:1: statement returns [kensho::ast::Buildable* node] : ( variable | expression | ifStat | whileStat | returnStatement | deleteStatement );
 */
static KenshoTreeParser_statement_return
statement(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_statement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    KenshoTreeParser_variable_return variable29;
    #undef	RETURN_TYPE_variable29
    #define	RETURN_TYPE_variable29 KenshoTreeParser_variable_return

    KenshoTreeParser_expression_return expression30;
    #undef	RETURN_TYPE_expression30
    #define	RETURN_TYPE_expression30 KenshoTreeParser_expression_return

    KenshoTreeParser_ifStat_return ifStat31;
    #undef	RETURN_TYPE_ifStat31
    #define	RETURN_TYPE_ifStat31 KenshoTreeParser_ifStat_return

    KenshoTreeParser_whileStat_return whileStat32;
    #undef	RETURN_TYPE_whileStat32
    #define	RETURN_TYPE_whileStat32 KenshoTreeParser_whileStat_return

    KenshoTreeParser_returnStatement_return returnStatement33;
    #undef	RETURN_TYPE_returnStatement33
    #define	RETURN_TYPE_returnStatement33 KenshoTreeParser_returnStatement_return

    KenshoTreeParser_deleteStatement_return deleteStatement34;
    #undef	RETURN_TYPE_deleteStatement34
    #define	RETURN_TYPE_deleteStatement34 KenshoTreeParser_deleteStatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    variable29.tree = NULL;

    expression30.tree = NULL;

    ifStat31.tree = NULL;

    whileStat32.tree = NULL;

    returnStatement33.tree = NULL;

    deleteStatement34.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:207:2: ( variable | expression | ifStat | whileStat | returnStatement | deleteStatement )
            
            ANTLR3_UINT32 alt13;

            alt13=6;

            switch ( LA(1) ) 
            {
            case VARDEF:
            	{
            		alt13=1;
            	}
                break;
            case K_NEW:
            case BINOP:
            case LIT:
            case UNOP:
            case CALL:
            case CAST:
            case ID:
            	{
            		alt13=2;
            	}
                break;
            case K_IF:
            	{
            		alt13=3;
            	}
                break;
            case K_WHILE:
            	{
            		alt13=4;
            	}
                break;
            case K_RETURN:
            	{
            		alt13=5;
            	}
                break;
            case K_DELETE:
            	{
            		alt13=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt13) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:207:4: variable
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_variable_in_statement585);
        	        variable29=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, variable29.tree);
        	        {
        	             retval.node= variable29.node; 
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:208:4: expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_statement592);
        	        expression30=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, expression30.tree);
        	        {
        	             retval.node= expression30.node; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:209:4: ifStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_ifStat_in_statement599);
        	        ifStat31=ifStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, ifStat31.tree);
        	        {
        	             retval.node= ifStat31.node; 
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:210:4: whileStat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_whileStat_in_statement606);
        	        whileStat32=whileStat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, whileStat32.tree);
        	        {
        	             retval.node= whileStat32.node; 
        	        }

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:211:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement613);
        	        returnStatement33=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, returnStatement33.tree);
        	        {
        	             retval.node= returnStatement33.node; 
        	        }

        	    }
        	    break;
        	case 6:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:212:4: deleteStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_deleteStatement_in_statement620);
        	        deleteStatement34=deleteStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, deleteStatement34.tree);
        	        {
        	             retval.node= deleteStatement34.node; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start deleteStatement
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:215:1: deleteStatement returns [kensho::ast::Delete* node] : ^( K_DELETE n= ID ) ;
 */
static KenshoTreeParser_deleteStatement_return
deleteStatement(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_deleteStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    K_DELETE35;

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE K_DELETE35_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    K_DELETE35       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    K_DELETE35_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:216:2: ( ^( K_DELETE n= ID ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:216:4: ^( K_DELETE n= ID )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_DELETE35 = (pANTLR3_BASE_TREE) MATCHT(K_DELETE, &FOLLOW_K_DELETE_in_deleteStatement639); 
            if  (HASEXCEPTION())
            {
                goto ruledeleteStatementEx;
            }

            K_DELETE35_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_DELETE35);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_DELETE35_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_deleteStatement643); 
            if  (HASEXCEPTION())
            {
                goto ruledeleteStatementEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }

            {

                			retval.node= new kensho::ast::Delete(std::string((char*)n->getText(n)->chars));
                		
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledeleteStatementEx; /* Prevent compiler warnings */
    ruledeleteStatementEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end deleteStatement */

/** 
 * $ANTLR start returnStatement
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:221:1: returnStatement returns [kensho::ast::Return* node] : ^( K_RETURN (ex= expression )? ) ;
 */
static KenshoTreeParser_returnStatement_return
returnStatement(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_returnStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_RETURN36;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    pANTLR3_BASE_TREE K_RETURN36_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_RETURN36       = NULL;
    ex.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_RETURN36_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:227:2: ( ^( K_RETURN (ex= expression )? ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:227:4: ^( K_RETURN (ex= expression )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_RETURN36 = (pANTLR3_BASE_TREE) MATCHT(K_RETURN, &FOLLOW_K_RETURN_in_returnStatement668); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }

            K_RETURN36_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_RETURN36);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_RETURN36_tree, root_1);



            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

                // f:/dev/projects/kensho/docs/KenshoTreeParser.g:228:4: (ex= expression )?
                {
                    int alt14=2;
                    switch ( LA(1) ) 
                    {
                        case K_NEW:
                        case BINOP:
                        case LIT:
                        case UNOP:
                        case CALL:
                        case CAST:
                        case ID:
                        	{
                        		alt14=1;
                        	}
                            break;
                    }

                    switch (alt14) 
                    {
                	case 1:
                	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:228:6: ex= expression
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement678);
                	        ex=expression(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulereturnStatementEx;
                	        }

                	        	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
                	        {
                	             
                	            				retval.node= new kensho::ast::Return(ex.node); 
                	            				pANTLR3_COMMON_TOKEN tok = (ex.tree)->getToken((ex.tree));
                	            				retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
                	            			
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
            }ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	if (retval.node == NULL) {
                    		retval.node= new kensho::ast::Return(NULL);
                    	}

                }
            }


    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start ifStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:236:1: ifStat returns [kensho::ast::Conditional* node] : ^( K_IF ex= expression ( statement )* ( elseIfStat )* ( elseStat[$node] )? ) ;
 */
static KenshoTreeParser_ifStat_return
ifStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_ifStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_IF37;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return statement38;
    #undef	RETURN_TYPE_statement38
    #define	RETURN_TYPE_statement38 KenshoTreeParser_statement_return

    KenshoTreeParser_elseIfStat_return elseIfStat39;
    #undef	RETURN_TYPE_elseIfStat39
    #define	RETURN_TYPE_elseIfStat39 KenshoTreeParser_elseIfStat_return

    KenshoTreeParser_elseStat_return elseStat40;
    #undef	RETURN_TYPE_elseStat40
    #define	RETURN_TYPE_elseStat40 KenshoTreeParser_elseStat_return

    pANTLR3_BASE_TREE K_IF37_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_IF37       = NULL;
    ex.tree = NULL;

    statement38.tree = NULL;

    elseIfStat39.tree = NULL;

    elseStat40.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_IF37_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:237:2: ( ^( K_IF ex= expression ( statement )* ( elseIfStat )* ( elseStat[$node] )? ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:237:4: ^( K_IF ex= expression ( statement )* ( elseIfStat )* ( elseStat[$node] )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_IF37 = (pANTLR3_BASE_TREE) MATCHT(K_IF, &FOLLOW_K_IF_in_ifStat704); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            K_IF37_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_IF37);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_IF37_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_ifStat712);
            ex=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            {

                				retval.node= new kensho::ast::Conditional(ex.node);
                				pANTLR3_COMMON_TOKEN tok = (ex.tree)->getToken((ex.tree));
                				retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:243:4: ( statement )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case K_NEW:
                case K_DELETE:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:243:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_ifStat721);
            	        statement38=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement38.tree);
            	        {

            	            				retval.node->addTrueBodyNode(statement38.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:246:4: ( elseIfStat )*

            for (;;)
            {
                int alt16=2;
                switch ( LA(1) ) 
                {
                case ELSEIF:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:246:6: elseIfStat
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_elseIfStat_in_ifStat733);
            	        elseIfStat39=elseIfStat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, elseIfStat39.tree);
            	        {

            	            				retval.node->addBranch(elseIfStat39.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:249:4: ( elseStat[$node] )?
            {
                int alt17=2;
                switch ( LA(1) ) 
                {
                    case K_ELSE:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:249:6: elseStat[$node]
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_elseStat_in_ifStat745);
            	        elseStat40=elseStat(ctx, retval.node);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, elseStat40.tree);

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatEx; /* Prevent compiler warnings */
    ruleifStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end ifStat */

/** 
 * $ANTLR start elseIfStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:253:1: elseIfStat returns [kensho::ast::Conditional* node] : ^( ELSEIF ex= expression ( statement )* ) ;
 */
static KenshoTreeParser_elseIfStat_return
elseIfStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_elseIfStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ELSEIF41;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return statement42;
    #undef	RETURN_TYPE_statement42
    #define	RETURN_TYPE_statement42 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE ELSEIF41_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ELSEIF41       = NULL;
    ex.tree = NULL;

    statement42.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ELSEIF41_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:254:2: ( ^( ELSEIF ex= expression ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:254:4: ^( ELSEIF ex= expression ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ELSEIF41 = (pANTLR3_BASE_TREE) MATCHT(ELSEIF, &FOLLOW_ELSEIF_in_elseIfStat771); 
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            ELSEIF41_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ELSEIF41);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ELSEIF41_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_elseIfStat779);
            ex=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleelseIfStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            {

                				retval.node= new kensho::ast::Conditional(ex.node);
                				pANTLR3_COMMON_TOKEN tok = (ex.tree)->getToken((ex.tree));
                				retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:260:4: ( statement )*

            for (;;)
            {
                int alt18=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case K_NEW:
                case K_DELETE:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:260:6: statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_elseIfStat788);
            	        statement42=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleelseIfStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, statement42.tree);
            	        {

            	            				retval.node->addTrueBodyNode(statement42.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseIfStatEx; /* Prevent compiler warnings */
    ruleelseIfStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end elseIfStat */

/** 
 * $ANTLR start elseStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:266:1: elseStat[kensho::ast::Conditional* node] : ^( K_ELSE ( statement )* ) ;
 */
static KenshoTreeParser_elseStat_return
elseStat(pKenshoTreeParser ctx, kensho::ast::Conditional* node)
{   
    KenshoTreeParser_elseStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    K_ELSE43;
    KenshoTreeParser_statement_return statement44;
    #undef	RETURN_TYPE_statement44
    #define	RETURN_TYPE_statement44 KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE K_ELSE43_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    K_ELSE43       = NULL;
    statement44.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    K_ELSE43_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:267:2: ( ^( K_ELSE ( statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:267:4: ^( K_ELSE ( statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_ELSE43 = (pANTLR3_BASE_TREE) MATCHT(K_ELSE, &FOLLOW_K_ELSE_in_elseStat810); 
            if  (HASEXCEPTION())
            {
                goto ruleelseStatEx;
            }

            K_ELSE43_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_ELSE43);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_ELSE43_tree, root_1);



            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

                // f:/dev/projects/kensho/docs/KenshoTreeParser.g:268:4: ( statement )*

                for (;;)
                {
                    int alt19=2;
                    switch ( LA(1) ) 
                    {
                    case K_IF:
                    case K_WHILE:
                    case K_RETURN:
                    case K_NEW:
                    case K_DELETE:
                    case BINOP:
                    case LIT:
                    case UNOP:
                    case VARDEF:
                    case CALL:
                    case CAST:
                    case ID:
                    	{
                    		alt19=1;
                    	}
                        break;

                    }

                    switch (alt19) 
                    {
                	case 1:
                	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:268:6: statement
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_statement_in_elseStat818);
                	        statement44=statement(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleelseStatEx;
                	        }

                	        	ADAPTOR->addChild(ADAPTOR, root_1, statement44.tree);
                	        {

                	            				node->addFalseBodyNode(statement44.node);
                	            			
                	        }

                	    }
                	    break;

                	default:
                	    goto loop19;	/* break out of the loop */
                	    break;
                    }
                }
                loop19: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
            }ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleelseStatEx; /* Prevent compiler warnings */
    ruleelseStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end elseStat */

/** 
 * $ANTLR start whileStat
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:274:1: whileStat returns [kensho::ast::While* node] : ^(t= K_WHILE ex= expression (s= statement )* ) ;
 */
static KenshoTreeParser_whileStat_return
whileStat(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_whileStat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    t;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    KenshoTreeParser_statement_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s KenshoTreeParser_statement_return

    pANTLR3_BASE_TREE t_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    t       = NULL;
    ex.tree = NULL;

    s.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:275:2: ( ^(t= K_WHILE ex= expression (s= statement )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:275:4: ^(t= K_WHILE ex= expression (s= statement )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            t = (pANTLR3_BASE_TREE) MATCHT(K_WHILE, &FOLLOW_K_WHILE_in_whileStat844); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, t_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expression_in_whileStat852);
            ex=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            {

                				retval.node= new kensho::ast::While(ex.node);
                				pANTLR3_COMMON_TOKEN tok = (ex.tree)->getToken((ex.tree));
                				retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:281:4: (s= statement )*

            for (;;)
            {
                int alt20=2;
                switch ( LA(1) ) 
                {
                case K_IF:
                case K_WHILE:
                case K_RETURN:
                case K_NEW:
                case K_DELETE:
                case BINOP:
                case LIT:
                case UNOP:
                case VARDEF:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt20=1;
                	}
                    break;

                }

                switch (alt20) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:281:6: s= statement
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_statement_in_whileStat864);
            	        s=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, s.tree);
            	        {

            	            				retval.node->addBodyNode(s.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatEx; /* Prevent compiler warnings */
    rulewhileStatEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end whileStat */

/** 
 * $ANTLR start variable
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:287:1: variable returns [kensho::ast::VariableDefinition* node] : ^( VARDEF t= type n= ID ) ;
 */
static KenshoTreeParser_variable_return
variable(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_variable_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    n;
    pANTLR3_BASE_TREE    VARDEF45;
    KenshoTreeParser_type_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t KenshoTreeParser_type_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE VARDEF45_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    n       = NULL;
    VARDEF45       = NULL;
    t.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    VARDEF45_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:294:2: ( ^( VARDEF t= type n= ID ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:294:4: ^( VARDEF t= type n= ID )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            VARDEF45 = (pANTLR3_BASE_TREE) MATCHT(VARDEF, &FOLLOW_VARDEF_in_variable895); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            VARDEF45_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, VARDEF45);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, VARDEF45_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_type_in_variable899);
            t=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            	ADAPTOR->addChild(ADAPTOR, root_1, t.tree);
            _last = (pANTLR3_BASE_TREE)LT(1);
            n = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_variable903); 
            if  (HASEXCEPTION())
            {
                goto rulevariableEx;
            }

            n_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, n);ADAPTOR->addChild(ADAPTOR, root_1, n_tree);


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	std::string name((char*)n->getText(n)->chars);
                    	std::string text((char*)(t.tree)->getText((t.tree))->chars);
                    	retval.node= new kensho::ast::VariableDefinition(name, t.ty);
                    	retval.node->setSourcePosition((n->getLine(n)), (n->getCharPositionInLine(n)));

                }
            }


    return retval;
}
/* $ANTLR end variable */

/** 
 * $ANTLR start type
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:297:1: type returns [kensho::ast::Type* ty] : (t= T_BOOL | t= T_BYTE | t= T_SHORT | t= T_CHAR | t= T_INT | t= T_LONG | t= T_FLOAT | t= T_DOUBLE | t= ID );
 */
static KenshoTreeParser_type_return
type(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    t;

    pANTLR3_BASE_TREE t_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;


    	kensho::ast::TypeToken tt;

    t       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    t_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:310:2: (t= T_BOOL | t= T_BYTE | t= T_SHORT | t= T_CHAR | t= T_INT | t= T_LONG | t= T_FLOAT | t= T_DOUBLE | t= ID )
            
            ANTLR3_UINT32 alt21;

            alt21=9;

            switch ( LA(1) ) 
            {
            case T_BOOL:
            	{
            		alt21=1;
            	}
                break;
            case T_BYTE:
            	{
            		alt21=2;
            	}
                break;
            case T_SHORT:
            	{
            		alt21=3;
            	}
                break;
            case T_CHAR:
            	{
            		alt21=4;
            	}
                break;
            case T_INT:
            	{
            		alt21=5;
            	}
                break;
            case T_LONG:
            	{
            		alt21=6;
            	}
                break;
            case T_FLOAT:
            	{
            		alt21=7;
            	}
                break;
            case T_DOUBLE:
            	{
            		alt21=8;
            	}
                break;
            case ID:
            	{
            		alt21=9;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 21;
                EXCEPTION->state        = 0;


                goto ruletypeEx;
            }

            switch (alt21) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:310:4: t= T_BOOL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        t = (pANTLR3_BASE_TREE) MATCHT(T_BOOL, &FOLLOW_T_BOOL_in_type933); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);ADAPTOR->addChild(ADAPTOR, root_0, t_tree);

        	        {
        	             tt = kensho::ast::TyBool; 
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:311:4: t= T_BYTE
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        t = (pANTLR3_BASE_TREE) MATCHT(T_BYTE, &FOLLOW_T_BYTE_in_type943); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);ADAPTOR->addChild(ADAPTOR, root_0, t_tree);

        	        {
        	             tt = kensho::ast::TyByte; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:312:4: t= T_SHORT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        t = (pANTLR3_BASE_TREE) MATCHT(T_SHORT, &FOLLOW_T_SHORT_in_type953); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);ADAPTOR->addChild(ADAPTOR, root_0, t_tree);

        	        {
        	             tt = kensho::ast::TyShort; 
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:313:4: t= T_CHAR
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        t = (pANTLR3_BASE_TREE) MATCHT(T_CHAR, &FOLLOW_T_CHAR_in_type963); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);ADAPTOR->addChild(ADAPTOR, root_0, t_tree);

        	        {
        	             tt = kensho::ast::TyChar; 
        	        }

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:314:4: t= T_INT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        t = (pANTLR3_BASE_TREE) MATCHT(T_INT, &FOLLOW_T_INT_in_type973); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);ADAPTOR->addChild(ADAPTOR, root_0, t_tree);

        	        {
        	             tt = kensho::ast::TyInt; 
        	        }

        	    }
        	    break;
        	case 6:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:315:4: t= T_LONG
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        t = (pANTLR3_BASE_TREE) MATCHT(T_LONG, &FOLLOW_T_LONG_in_type983); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);ADAPTOR->addChild(ADAPTOR, root_0, t_tree);

        	        {
        	             tt = kensho::ast::TyLong; 
        	        }

        	    }
        	    break;
        	case 7:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:316:4: t= T_FLOAT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        t = (pANTLR3_BASE_TREE) MATCHT(T_FLOAT, &FOLLOW_T_FLOAT_in_type993); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);ADAPTOR->addChild(ADAPTOR, root_0, t_tree);

        	        {
        	             tt = kensho::ast::TyFloat; 
        	        }

        	    }
        	    break;
        	case 8:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:317:4: t= T_DOUBLE
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        t = (pANTLR3_BASE_TREE) MATCHT(T_DOUBLE, &FOLLOW_T_DOUBLE_in_type1003); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);ADAPTOR->addChild(ADAPTOR, root_0, t_tree);

        	        {
        	             tt = kensho::ast::TyDouble; 
        	        }

        	    }
        	    break;
        	case 9:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:318:4: t= ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        t = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_type1012); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletypeEx;
        	        }

        	        t_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, t);ADAPTOR->addChild(ADAPTOR, root_0, t_tree);

        	        {
        	             tt = kensho::ast::TyPtr; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	std::string text;
                    	pANTLR3_STRING str = retval.tree->getText(retval.tree);
                    	if (str != NULL) {
                    		text = std::string((char*)str->chars); 
                    	}
                    	retval.ty= 	(SCOPE_TOP(program))->mb->createType(tt, text);
                    	retval.ty->setSourcePosition((t->getLine(t)), (t->getCharPositionInLine(t)));

                }
            }


    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start expression
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:321:1: expression returns [kensho::ast::Node* node] : (name= ID | ^( LIT lit= literal ) | call | ctorCall | ^( UNOP unop unex= expression ) | ^( CAST type castex= expression ) | ^( BINOP binop left= expression right= expression ) );
 */
static KenshoTreeParser_expression_return
expression(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    name;
    pANTLR3_BASE_TREE    LIT46;
    pANTLR3_BASE_TREE    UNOP49;
    pANTLR3_BASE_TREE    CAST51;
    pANTLR3_BASE_TREE    BINOP53;
    KenshoTreeParser_literal_return lit;
    #undef	RETURN_TYPE_lit
    #define	RETURN_TYPE_lit KenshoTreeParser_literal_return

    KenshoTreeParser_expression_return unex;
    #undef	RETURN_TYPE_unex
    #define	RETURN_TYPE_unex KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return castex;
    #undef	RETURN_TYPE_castex
    #define	RETURN_TYPE_castex KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return left;
    #undef	RETURN_TYPE_left
    #define	RETURN_TYPE_left KenshoTreeParser_expression_return

    KenshoTreeParser_expression_return right;
    #undef	RETURN_TYPE_right
    #define	RETURN_TYPE_right KenshoTreeParser_expression_return

    KenshoTreeParser_call_return call47;
    #undef	RETURN_TYPE_call47
    #define	RETURN_TYPE_call47 KenshoTreeParser_call_return

    KenshoTreeParser_ctorCall_return ctorCall48;
    #undef	RETURN_TYPE_ctorCall48
    #define	RETURN_TYPE_ctorCall48 KenshoTreeParser_ctorCall_return

    KenshoTreeParser_unop_return unop50;
    #undef	RETURN_TYPE_unop50
    #define	RETURN_TYPE_unop50 KenshoTreeParser_unop_return

    KenshoTreeParser_type_return type52;
    #undef	RETURN_TYPE_type52
    #define	RETURN_TYPE_type52 KenshoTreeParser_type_return

    KenshoTreeParser_binop_return binop54;
    #undef	RETURN_TYPE_binop54
    #define	RETURN_TYPE_binop54 KenshoTreeParser_binop_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE LIT46_tree;
    pANTLR3_BASE_TREE UNOP49_tree;
    pANTLR3_BASE_TREE CAST51_tree;
    pANTLR3_BASE_TREE BINOP53_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    name       = NULL;
    LIT46       = NULL;
    UNOP49       = NULL;
    CAST51       = NULL;
    BINOP53       = NULL;
    lit.tree = NULL;

    unex.tree = NULL;

    castex.tree = NULL;

    left.tree = NULL;

    right.tree = NULL;

    call47.tree = NULL;

    ctorCall48.tree = NULL;

    unop50.tree = NULL;

    type52.tree = NULL;

    binop54.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    LIT46_tree   = NULL;
    UNOP49_tree   = NULL;
    CAST51_tree   = NULL;
    BINOP53_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:322:2: (name= ID | ^( LIT lit= literal ) | call | ctorCall | ^( UNOP unop unex= expression ) | ^( CAST type castex= expression ) | ^( BINOP binop left= expression right= expression ) )
            
            ANTLR3_UINT32 alt22;

            alt22=7;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		alt22=1;
            	}
                break;
            case LIT:
            	{
            		alt22=2;
            	}
                break;
            case CALL:
            	{
            		alt22=3;
            	}
                break;
            case K_NEW:
            	{
            		alt22=4;
            	}
                break;
            case UNOP:
            	{
            		alt22=5;
            	}
                break;
            case CAST:
            	{
            		alt22=6;
            	}
                break;
            case BINOP:
            	{
            		alt22=7;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 22;
                EXCEPTION->state        = 0;


                goto ruleexpressionEx;
            }

            switch (alt22) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:322:4: name= ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        name = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_expression1033); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        name_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, name);ADAPTOR->addChild(ADAPTOR, root_0, name_tree);

        	        {
        	             
        	            			retval.node= new kensho::ast::Variable(
        	            				std::string((char*)name->getText(name)->chars)
        	            			); 
        	            			retval.node->setSourcePosition((name->getLine(name)), (name->getCharPositionInLine(name)));
        	            		
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:328:4: ^( LIT lit= literal )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_1     = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        LIT46 = (pANTLR3_BASE_TREE) MATCHT(LIT, &FOLLOW_LIT_in_expression1041); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        LIT46_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LIT46);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, LIT46_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_literal_in_expression1045);
        	        lit=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, lit.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			retval.node= lit.node;
        	            		
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:331:4: call
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_call_in_expression1053);
        	        call47=call(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, call47.tree);
        	        {

        	            			retval.node= call47.node;
        	            		
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:334:4: ctorCall
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_ctorCall_in_expression1060);
        	        ctorCall48=ctorCall(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_0, ctorCall48.tree);
        	        {

        	            			retval.node= ctorCall48.node;
        	            		
        	        }

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:337:4: ^( UNOP unop unex= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_1     = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        UNOP49 = (pANTLR3_BASE_TREE) MATCHT(UNOP, &FOLLOW_UNOP_in_expression1068); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        UNOP49_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, UNOP49);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, UNOP49_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_unop_in_expression1070);
        	        unop50=unop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, unop50.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression1074);
        	        unex=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, unex.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (unop50.tree)->getToken((unop50.tree));
        	            			retval.node= new kensho::ast::UnaryExpression(unop50.op, unex.node); 
        	            			retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
        	            		
        	        }

        	    }
        	    break;
        	case 6:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:342:4: ^( CAST type castex= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_1     = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CAST51 = (pANTLR3_BASE_TREE) MATCHT(CAST, &FOLLOW_CAST_in_expression1083); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        CAST51_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CAST51);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CAST51_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_type_in_expression1085);
        	        type52=type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, type52.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression1089);
        	        castex=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, castex.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (type52.tree)->getToken((type52.tree));
        	            			retval.node= new kensho::ast::Cast(type52.ty, castex.node);
        	            			retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
        	            		
        	        }

        	    }
        	    break;
        	case 7:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:347:4: ^( BINOP binop left= expression right= expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_1     = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        BINOP53 = (pANTLR3_BASE_TREE) MATCHT(BINOP, &FOLLOW_BINOP_in_expression1098); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        BINOP53_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, BINOP53);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, BINOP53_tree, root_1);



        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_binop_in_expression1100);
        	        binop54=binop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, binop54.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression1104);
        	        left=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, left.tree);
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expression_in_expression1108);
        	        right=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }

        	        	ADAPTOR->addChild(ADAPTOR, root_1, right.tree);

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        {

        	            			pANTLR3_COMMON_TOKEN tok = (binop54.tree)->getToken((binop54.tree));
        	            			if (binop54.op == kensho::ast::OpAssign) {
        	            				retval.node= new kensho::ast::Assignment(left.node, right.node);
        	            			}
        	            			else {
        	            				retval.node= new kensho::ast::BinaryExpression(
        	            					binop54.op, left.node, right.node
        	            				);
        	            			}
        	            			retval.node->setSourcePosition(tok->getLine(tok), tok->getCharPositionInLine(tok));
        	            		
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start call
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:361:1: call returns [kensho::ast::Call* node] : ^( CALL name= ID (ex= expression )* ) ;
 */
static KenshoTreeParser_call_return
call(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_call_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    name;
    pANTLR3_BASE_TREE    CALL55;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE CALL55_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    name       = NULL;
    CALL55       = NULL;
    ex.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    CALL55_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:362:2: ( ^( CALL name= ID (ex= expression )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:362:4: ^( CALL name= ID (ex= expression )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            CALL55 = (pANTLR3_BASE_TREE) MATCHT(CALL, &FOLLOW_CALL_in_call1129); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }

            CALL55_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CALL55);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CALL55_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            name = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_call1137); 
            if  (HASEXCEPTION())
            {
                goto rulecallEx;
            }

            name_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, name);ADAPTOR->addChild(ADAPTOR, root_1, name_tree);

            {

                				std::string nameStr((char*)name->getText(name)->chars);
                				retval.node= new kensho::ast::Call(nameStr);   
                				retval.node->setSourcePosition((name->getLine(name)), (name->getCharPositionInLine(name)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:368:4: (ex= expression )*

            for (;;)
            {
                int alt23=2;
                switch ( LA(1) ) 
                {
                case K_NEW:
                case BINOP:
                case LIT:
                case UNOP:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt23=1;
                	}
                    break;

                }

                switch (alt23) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:368:6: ex= expression
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expression_in_call1149);
            	        ex=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            	        {

            	            				retval.node->addArgument(ex.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallEx; /* Prevent compiler warnings */
    rulecallEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end call */

/** 
 * $ANTLR start ctorCall
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:374:1: ctorCall returns [kensho::ast::ConstructorCall* node] : ^( K_NEW name= ID (ex= expression )* ) ;
 */
static KenshoTreeParser_ctorCall_return
ctorCall(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_ctorCall_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    name;
    pANTLR3_BASE_TREE    K_NEW56;
    KenshoTreeParser_expression_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex KenshoTreeParser_expression_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE K_NEW56_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    name       = NULL;
    K_NEW56       = NULL;
    ex.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    K_NEW56_tree   = NULL;


    retval.tree  = NULL;
    {
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:375:2: ( ^( K_NEW name= ID (ex= expression )* ) )
        // f:/dev/projects/kensho/docs/KenshoTreeParser.g:375:4: ^( K_NEW name= ID (ex= expression )* )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_1     = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            K_NEW56 = (pANTLR3_BASE_TREE) MATCHT(K_NEW, &FOLLOW_K_NEW_in_ctorCall1174); 
            if  (HASEXCEPTION())
            {
                goto rulectorCallEx;
            }

            K_NEW56_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, K_NEW56);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, K_NEW56_tree, root_1);



            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            name = (pANTLR3_BASE_TREE) MATCHT(ID, &FOLLOW_ID_in_ctorCall1182); 
            if  (HASEXCEPTION())
            {
                goto rulectorCallEx;
            }

            name_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, name);ADAPTOR->addChild(ADAPTOR, root_1, name_tree);

            {

                				std::string nameStr((char*)name->getText(name)->chars);
                				retval.node= new kensho::ast::ConstructorCall(nameStr);
                				retval.node->setSourcePosition((name->getLine(name)), (name->getCharPositionInLine(name)));
                			
            }

            // f:/dev/projects/kensho/docs/KenshoTreeParser.g:381:4: (ex= expression )*

            for (;;)
            {
                int alt24=2;
                switch ( LA(1) ) 
                {
                case K_NEW:
                case BINOP:
                case LIT:
                case UNOP:
                case CALL:
                case CAST:
                case ID:
                	{
                		alt24=1;
                	}
                    break;

                }

                switch (alt24) 
                {
            	case 1:
            	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:381:6: ex= expression
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expression_in_ctorCall1193);
            	        ex=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulectorCallEx;
            	        }

            	        	ADAPTOR->addChild(ADAPTOR, root_1, ex.tree);
            	        {

            	            				retval.node->addArgument(ex.node);
            	            			
            	        }

            	    }
            	    break;

            	default:
            	    goto loop24;	/* break out of the loop */
            	    break;
                }
            }
            loop24: ; /* Jump out to here if this rule does not match */


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulectorCallEx; /* Prevent compiler warnings */
    rulectorCallEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end ctorCall */

/** 
 * $ANTLR start literal
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:387:1: literal returns [kensho::ast::Literal* node] : ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR );
 */
static KenshoTreeParser_literal_return
literal(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    LITERAL_INT57;
    pANTLR3_BASE_TREE    LITERAL_OCT58;
    pANTLR3_BASE_TREE    LITERAL_HEX59;
    pANTLR3_BASE_TREE    LITERAL_FLOAT60;
    pANTLR3_BASE_TREE    LITERAL_TRUE61;
    pANTLR3_BASE_TREE    LITERAL_FALSE62;
    pANTLR3_BASE_TREE    LITERAL_CHAR63;

    pANTLR3_BASE_TREE LITERAL_INT57_tree;
    pANTLR3_BASE_TREE LITERAL_OCT58_tree;
    pANTLR3_BASE_TREE LITERAL_HEX59_tree;
    pANTLR3_BASE_TREE LITERAL_FLOAT60_tree;
    pANTLR3_BASE_TREE LITERAL_TRUE61_tree;
    pANTLR3_BASE_TREE LITERAL_FALSE62_tree;
    pANTLR3_BASE_TREE LITERAL_CHAR63_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;


    	kensho::ast::LiteralToken lt;

    LITERAL_INT57       = NULL;
    LITERAL_OCT58       = NULL;
    LITERAL_HEX59       = NULL;
    LITERAL_FLOAT60       = NULL;
    LITERAL_TRUE61       = NULL;
    LITERAL_FALSE62       = NULL;
    LITERAL_CHAR63       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LITERAL_INT57_tree   = NULL;
    LITERAL_OCT58_tree   = NULL;
    LITERAL_HEX59_tree   = NULL;
    LITERAL_FLOAT60_tree   = NULL;
    LITERAL_TRUE61_tree   = NULL;
    LITERAL_FALSE62_tree   = NULL;
    LITERAL_CHAR63_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:399:2: ( LITERAL_INT | LITERAL_OCT | LITERAL_HEX | LITERAL_FLOAT | LITERAL_TRUE | LITERAL_FALSE | LITERAL_CHAR )
            
            ANTLR3_UINT32 alt25;

            alt25=7;

            switch ( LA(1) ) 
            {
            case LITERAL_INT:
            	{
            		alt25=1;
            	}
                break;
            case LITERAL_OCT:
            	{
            		alt25=2;
            	}
                break;
            case LITERAL_HEX:
            	{
            		alt25=3;
            	}
                break;
            case LITERAL_FLOAT:
            	{
            		alt25=4;
            	}
                break;
            case LITERAL_TRUE:
            	{
            		alt25=5;
            	}
                break;
            case LITERAL_FALSE:
            	{
            		alt25=6;
            	}
                break;
            case LITERAL_CHAR:
            	{
            		alt25=7;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 25;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;
            }

            switch (alt25) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:399:4: LITERAL_INT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        LITERAL_INT57 = (pANTLR3_BASE_TREE) MATCHT(LITERAL_INT, &FOLLOW_LITERAL_INT_in_literal1227); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        LITERAL_INT57_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LITERAL_INT57);ADAPTOR->addChild(ADAPTOR, root_0, LITERAL_INT57_tree);

        	        {
        	             lt = kensho::ast::LitInt; 
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:400:4: LITERAL_OCT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        LITERAL_OCT58 = (pANTLR3_BASE_TREE) MATCHT(LITERAL_OCT, &FOLLOW_LITERAL_OCT_in_literal1235); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        LITERAL_OCT58_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LITERAL_OCT58);ADAPTOR->addChild(ADAPTOR, root_0, LITERAL_OCT58_tree);

        	        {
        	             lt = kensho::ast::LitOct; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:401:4: LITERAL_HEX
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        LITERAL_HEX59 = (pANTLR3_BASE_TREE) MATCHT(LITERAL_HEX, &FOLLOW_LITERAL_HEX_in_literal1243); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        LITERAL_HEX59_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LITERAL_HEX59);ADAPTOR->addChild(ADAPTOR, root_0, LITERAL_HEX59_tree);

        	        {
        	             lt = kensho::ast::LitHex; 
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:402:4: LITERAL_FLOAT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        LITERAL_FLOAT60 = (pANTLR3_BASE_TREE) MATCHT(LITERAL_FLOAT, &FOLLOW_LITERAL_FLOAT_in_literal1251); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        LITERAL_FLOAT60_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LITERAL_FLOAT60);ADAPTOR->addChild(ADAPTOR, root_0, LITERAL_FLOAT60_tree);

        	        {
        	             lt = kensho::ast::LitFloat; 
        	        }

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:403:4: LITERAL_TRUE
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        LITERAL_TRUE61 = (pANTLR3_BASE_TREE) MATCHT(LITERAL_TRUE, &FOLLOW_LITERAL_TRUE_in_literal1258); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        LITERAL_TRUE61_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LITERAL_TRUE61);ADAPTOR->addChild(ADAPTOR, root_0, LITERAL_TRUE61_tree);

        	        {
        	             lt = kensho::ast::LitTrue; 
        	        }

        	    }
        	    break;
        	case 6:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:404:4: LITERAL_FALSE
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        LITERAL_FALSE62 = (pANTLR3_BASE_TREE) MATCHT(LITERAL_FALSE, &FOLLOW_LITERAL_FALSE_in_literal1265); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        LITERAL_FALSE62_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LITERAL_FALSE62);ADAPTOR->addChild(ADAPTOR, root_0, LITERAL_FALSE62_tree);

        	        {
        	             lt = kensho::ast::LitFalse; 
        	        }

        	    }
        	    break;
        	case 7:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:405:4: LITERAL_CHAR
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        LITERAL_CHAR63 = (pANTLR3_BASE_TREE) MATCHT(LITERAL_CHAR, &FOLLOW_LITERAL_CHAR_in_literal1272); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        LITERAL_CHAR63_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LITERAL_CHAR63);ADAPTOR->addChild(ADAPTOR, root_0, LITERAL_CHAR63_tree);

        	        {
        	             lt = kensho::ast::LitChar; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	pANTLR3_COMMON_TOKEN token = retval.tree->getToken(retval.tree);
                    	retval.node= new kensho::ast::Literal(
                    		lt, std::string((char*)token->getText(token)->chars)
                    	);
                    	retval.node->setSourcePosition(token->getLine(token), token->getCharPositionInLine(token));

                }
            }


    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start unop
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:408:1: unop returns [kensho::ast::OperatorToken op] : ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT );
 */
static KenshoTreeParser_unop_return
unop(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_unop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    OP_ADD64;
    pANTLR3_BASE_TREE    OP_SUB65;
    pANTLR3_BASE_TREE    OP_NOT66;
    pANTLR3_BASE_TREE    OP_BIT_NOT67;

    pANTLR3_BASE_TREE OP_ADD64_tree;
    pANTLR3_BASE_TREE OP_SUB65_tree;
    pANTLR3_BASE_TREE OP_NOT66_tree;
    pANTLR3_BASE_TREE OP_BIT_NOT67_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    OP_ADD64       = NULL;
    OP_SUB65       = NULL;
    OP_NOT66       = NULL;
    OP_BIT_NOT67       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    OP_ADD64_tree   = NULL;
    OP_SUB65_tree   = NULL;
    OP_NOT66_tree   = NULL;
    OP_BIT_NOT67_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:409:2: ( OP_ADD | OP_SUB | OP_NOT | OP_BIT_NOT )
            
            ANTLR3_UINT32 alt26;

            alt26=4;

            switch ( LA(1) ) 
            {
            case OP_ADD:
            	{
            		alt26=1;
            	}
                break;
            case OP_SUB:
            	{
            		alt26=2;
            	}
                break;
            case OP_NOT:
            	{
            		alt26=3;
            	}
                break;
            case OP_BIT_NOT:
            	{
            		alt26=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 26;
                EXCEPTION->state        = 0;


                goto ruleunopEx;
            }

            switch (alt26) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:409:4: OP_ADD
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_ADD64 = (pANTLR3_BASE_TREE) MATCHT(OP_ADD, &FOLLOW_OP_ADD_in_unop1290); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunopEx;
        	        }

        	        OP_ADD64_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_ADD64);ADAPTOR->addChild(ADAPTOR, root_0, OP_ADD64_tree);

        	        {
        	             retval.op= kensho::ast::OpAdd; 
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:410:5: OP_SUB
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_SUB65 = (pANTLR3_BASE_TREE) MATCHT(OP_SUB, &FOLLOW_OP_SUB_in_unop1301); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunopEx;
        	        }

        	        OP_SUB65_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_SUB65);ADAPTOR->addChild(ADAPTOR, root_0, OP_SUB65_tree);

        	        {
        	             retval.op= kensho::ast::OpSub; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:411:5: OP_NOT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_NOT66 = (pANTLR3_BASE_TREE) MATCHT(OP_NOT, &FOLLOW_OP_NOT_in_unop1312); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunopEx;
        	        }

        	        OP_NOT66_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_NOT66);ADAPTOR->addChild(ADAPTOR, root_0, OP_NOT66_tree);

        	        {
        	             retval.op= kensho::ast::OpNot; 
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:412:5: OP_BIT_NOT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_BIT_NOT67 = (pANTLR3_BASE_TREE) MATCHT(OP_BIT_NOT, &FOLLOW_OP_BIT_NOT_in_unop1323); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunopEx;
        	        }

        	        OP_BIT_NOT67_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_BIT_NOT67);ADAPTOR->addChild(ADAPTOR, root_0, OP_BIT_NOT67_tree);

        	        {
        	             retval.op= kensho::ast::OpBitNot; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunopEx; /* Prevent compiler warnings */
    ruleunopEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end unop */

/** 
 * $ANTLR start binop
 * f:/dev/projects/kensho/docs/KenshoTreeParser.g:415:1: binop returns [kensho::ast::OperatorToken op] : ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_REM | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE );
 */
static KenshoTreeParser_binop_return
binop(pKenshoTreeParser ctx)
{   
    KenshoTreeParser_binop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    OP_ADD68;
    pANTLR3_BASE_TREE    OP_SUB69;
    pANTLR3_BASE_TREE    OP_MUL70;
    pANTLR3_BASE_TREE    OP_DIV71;
    pANTLR3_BASE_TREE    OP_REM72;
    pANTLR3_BASE_TREE    OP_ASSIGN73;
    pANTLR3_BASE_TREE    OP_AND74;
    pANTLR3_BASE_TREE    OP_OR75;
    pANTLR3_BASE_TREE    OP_XOR76;
    pANTLR3_BASE_TREE    OP_BIT_AND77;
    pANTLR3_BASE_TREE    OP_BIT_OR78;
    pANTLR3_BASE_TREE    OP_SHIFT_L79;
    pANTLR3_BASE_TREE    OP_SHIFT_R80;
    pANTLR3_BASE_TREE    OP_USHIFT_R81;
    pANTLR3_BASE_TREE    CMP_EQ82;
    pANTLR3_BASE_TREE    CMP_NEQ83;
    pANTLR3_BASE_TREE    CMP_GT84;
    pANTLR3_BASE_TREE    CMP_GTE85;
    pANTLR3_BASE_TREE    CMP_LT86;
    pANTLR3_BASE_TREE    CMP_LTE87;

    pANTLR3_BASE_TREE OP_ADD68_tree;
    pANTLR3_BASE_TREE OP_SUB69_tree;
    pANTLR3_BASE_TREE OP_MUL70_tree;
    pANTLR3_BASE_TREE OP_DIV71_tree;
    pANTLR3_BASE_TREE OP_REM72_tree;
    pANTLR3_BASE_TREE OP_ASSIGN73_tree;
    pANTLR3_BASE_TREE OP_AND74_tree;
    pANTLR3_BASE_TREE OP_OR75_tree;
    pANTLR3_BASE_TREE OP_XOR76_tree;
    pANTLR3_BASE_TREE OP_BIT_AND77_tree;
    pANTLR3_BASE_TREE OP_BIT_OR78_tree;
    pANTLR3_BASE_TREE OP_SHIFT_L79_tree;
    pANTLR3_BASE_TREE OP_SHIFT_R80_tree;
    pANTLR3_BASE_TREE OP_USHIFT_R81_tree;
    pANTLR3_BASE_TREE CMP_EQ82_tree;
    pANTLR3_BASE_TREE CMP_NEQ83_tree;
    pANTLR3_BASE_TREE CMP_GT84_tree;
    pANTLR3_BASE_TREE CMP_GTE85_tree;
    pANTLR3_BASE_TREE CMP_LT86_tree;
    pANTLR3_BASE_TREE CMP_LTE87_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    OP_ADD68       = NULL;
    OP_SUB69       = NULL;
    OP_MUL70       = NULL;
    OP_DIV71       = NULL;
    OP_REM72       = NULL;
    OP_ASSIGN73       = NULL;
    OP_AND74       = NULL;
    OP_OR75       = NULL;
    OP_XOR76       = NULL;
    OP_BIT_AND77       = NULL;
    OP_BIT_OR78       = NULL;
    OP_SHIFT_L79       = NULL;
    OP_SHIFT_R80       = NULL;
    OP_USHIFT_R81       = NULL;
    CMP_EQ82       = NULL;
    CMP_NEQ83       = NULL;
    CMP_GT84       = NULL;
    CMP_GTE85       = NULL;
    CMP_LT86       = NULL;
    CMP_LTE87       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    OP_ADD68_tree   = NULL;
    OP_SUB69_tree   = NULL;
    OP_MUL70_tree   = NULL;
    OP_DIV71_tree   = NULL;
    OP_REM72_tree   = NULL;
    OP_ASSIGN73_tree   = NULL;
    OP_AND74_tree   = NULL;
    OP_OR75_tree   = NULL;
    OP_XOR76_tree   = NULL;
    OP_BIT_AND77_tree   = NULL;
    OP_BIT_OR78_tree   = NULL;
    OP_SHIFT_L79_tree   = NULL;
    OP_SHIFT_R80_tree   = NULL;
    OP_USHIFT_R81_tree   = NULL;
    CMP_EQ82_tree   = NULL;
    CMP_NEQ83_tree   = NULL;
    CMP_GT84_tree   = NULL;
    CMP_GTE85_tree   = NULL;
    CMP_LT86_tree   = NULL;
    CMP_LTE87_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  f:/dev/projects/kensho/docs/KenshoTreeParser.g:416:2: ( OP_ADD | OP_SUB | OP_MUL | OP_DIV | OP_REM | OP_ASSIGN | OP_AND | OP_OR | OP_XOR | OP_BIT_AND | OP_BIT_OR | OP_SHIFT_L | OP_SHIFT_R | OP_USHIFT_R | CMP_EQ | CMP_NEQ | CMP_GT | CMP_GTE | CMP_LT | CMP_LTE )
            
            ANTLR3_UINT32 alt27;

            alt27=20;

            switch ( LA(1) ) 
            {
            case OP_ADD:
            	{
            		alt27=1;
            	}
                break;
            case OP_SUB:
            	{
            		alt27=2;
            	}
                break;
            case OP_MUL:
            	{
            		alt27=3;
            	}
                break;
            case OP_DIV:
            	{
            		alt27=4;
            	}
                break;
            case OP_REM:
            	{
            		alt27=5;
            	}
                break;
            case OP_ASSIGN:
            	{
            		alt27=6;
            	}
                break;
            case OP_AND:
            	{
            		alt27=7;
            	}
                break;
            case OP_OR:
            	{
            		alt27=8;
            	}
                break;
            case OP_XOR:
            	{
            		alt27=9;
            	}
                break;
            case OP_BIT_AND:
            	{
            		alt27=10;
            	}
                break;
            case OP_BIT_OR:
            	{
            		alt27=11;
            	}
                break;
            case OP_SHIFT_L:
            	{
            		alt27=12;
            	}
                break;
            case OP_SHIFT_R:
            	{
            		alt27=13;
            	}
                break;
            case OP_USHIFT_R:
            	{
            		alt27=14;
            	}
                break;
            case CMP_EQ:
            	{
            		alt27=15;
            	}
                break;
            case CMP_NEQ:
            	{
            		alt27=16;
            	}
                break;
            case CMP_GT:
            	{
            		alt27=17;
            	}
                break;
            case CMP_GTE:
            	{
            		alt27=18;
            	}
                break;
            case CMP_LT:
            	{
            		alt27=19;
            	}
                break;
            case CMP_LTE:
            	{
            		alt27=20;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 27;
                EXCEPTION->state        = 0;


                goto rulebinopEx;
            }

            switch (alt27) 
            {
        	case 1:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:416:4: OP_ADD
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_ADD68 = (pANTLR3_BASE_TREE) MATCHT(OP_ADD, &FOLLOW_OP_ADD_in_binop1342); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_ADD68_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_ADD68);ADAPTOR->addChild(ADAPTOR, root_0, OP_ADD68_tree);

        	        {
        	             retval.op= kensho::ast::OpAdd; 
        	        }

        	    }
        	    break;
        	case 2:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:417:5: OP_SUB
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_SUB69 = (pANTLR3_BASE_TREE) MATCHT(OP_SUB, &FOLLOW_OP_SUB_in_binop1353); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_SUB69_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_SUB69);ADAPTOR->addChild(ADAPTOR, root_0, OP_SUB69_tree);

        	        {
        	             retval.op= kensho::ast::OpSub; 
        	        }

        	    }
        	    break;
        	case 3:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:418:5: OP_MUL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_MUL70 = (pANTLR3_BASE_TREE) MATCHT(OP_MUL, &FOLLOW_OP_MUL_in_binop1364); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_MUL70_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_MUL70);ADAPTOR->addChild(ADAPTOR, root_0, OP_MUL70_tree);

        	        {
        	             retval.op= kensho::ast::OpMul; 
        	        }

        	    }
        	    break;
        	case 4:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:419:5: OP_DIV
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_DIV71 = (pANTLR3_BASE_TREE) MATCHT(OP_DIV, &FOLLOW_OP_DIV_in_binop1375); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_DIV71_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_DIV71);ADAPTOR->addChild(ADAPTOR, root_0, OP_DIV71_tree);

        	        {
        	             retval.op= kensho::ast::OpDiv; 
        	        }

        	    }
        	    break;
        	case 5:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:420:4: OP_REM
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_REM72 = (pANTLR3_BASE_TREE) MATCHT(OP_REM, &FOLLOW_OP_REM_in_binop1384); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_REM72_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_REM72);ADAPTOR->addChild(ADAPTOR, root_0, OP_REM72_tree);

        	        {
        	             retval.op= kensho::ast::OpRem; 
        	        }

        	    }
        	    break;
        	case 6:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:421:4: OP_ASSIGN
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_ASSIGN73 = (pANTLR3_BASE_TREE) MATCHT(OP_ASSIGN, &FOLLOW_OP_ASSIGN_in_binop1393); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_ASSIGN73_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_ASSIGN73);ADAPTOR->addChild(ADAPTOR, root_0, OP_ASSIGN73_tree);

        	        {
        	             retval.op= kensho::ast::OpAssign; 
        	        }

        	    }
        	    break;
        	case 7:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:422:4: OP_AND
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_AND74 = (pANTLR3_BASE_TREE) MATCHT(OP_AND, &FOLLOW_OP_AND_in_binop1401); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_AND74_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_AND74);ADAPTOR->addChild(ADAPTOR, root_0, OP_AND74_tree);

        	        {
        	             retval.op= kensho::ast::OpAnd; 
        	        }

        	    }
        	    break;
        	case 8:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:423:4: OP_OR
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_OR75 = (pANTLR3_BASE_TREE) MATCHT(OP_OR, &FOLLOW_OP_OR_in_binop1410); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_OR75_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_OR75);ADAPTOR->addChild(ADAPTOR, root_0, OP_OR75_tree);

        	        {
        	             retval.op= kensho::ast::OpOr; 
        	        }

        	    }
        	    break;
        	case 9:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:424:4: OP_XOR
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_XOR76 = (pANTLR3_BASE_TREE) MATCHT(OP_XOR, &FOLLOW_OP_XOR_in_binop1419); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_XOR76_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_XOR76);ADAPTOR->addChild(ADAPTOR, root_0, OP_XOR76_tree);

        	        {
        	             retval.op= kensho::ast::OpXor; 
        	        }

        	    }
        	    break;
        	case 10:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:425:4: OP_BIT_AND
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_BIT_AND77 = (pANTLR3_BASE_TREE) MATCHT(OP_BIT_AND, &FOLLOW_OP_BIT_AND_in_binop1428); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_BIT_AND77_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_BIT_AND77);ADAPTOR->addChild(ADAPTOR, root_0, OP_BIT_AND77_tree);

        	        {
        	             retval.op= kensho::ast::OpBitAnd; 
        	        }

        	    }
        	    break;
        	case 11:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:426:4: OP_BIT_OR
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_BIT_OR78 = (pANTLR3_BASE_TREE) MATCHT(OP_BIT_OR, &FOLLOW_OP_BIT_OR_in_binop1436); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_BIT_OR78_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_BIT_OR78);ADAPTOR->addChild(ADAPTOR, root_0, OP_BIT_OR78_tree);

        	        {
        	             retval.op= kensho::ast::OpBitOr; 
        	        }

        	    }
        	    break;
        	case 12:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:427:4: OP_SHIFT_L
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_SHIFT_L79 = (pANTLR3_BASE_TREE) MATCHT(OP_SHIFT_L, &FOLLOW_OP_SHIFT_L_in_binop1444); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_SHIFT_L79_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_SHIFT_L79);ADAPTOR->addChild(ADAPTOR, root_0, OP_SHIFT_L79_tree);

        	        {
        	             retval.op= kensho::ast::OpShiftL; 
        	        }

        	    }
        	    break;
        	case 13:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:428:4: OP_SHIFT_R
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_SHIFT_R80 = (pANTLR3_BASE_TREE) MATCHT(OP_SHIFT_R, &FOLLOW_OP_SHIFT_R_in_binop1452); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_SHIFT_R80_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_SHIFT_R80);ADAPTOR->addChild(ADAPTOR, root_0, OP_SHIFT_R80_tree);

        	        {
        	             retval.op= kensho::ast::OpShiftR; 
        	        }

        	    }
        	    break;
        	case 14:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:429:4: OP_USHIFT_R
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        OP_USHIFT_R81 = (pANTLR3_BASE_TREE) MATCHT(OP_USHIFT_R, &FOLLOW_OP_USHIFT_R_in_binop1460); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        OP_USHIFT_R81_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OP_USHIFT_R81);ADAPTOR->addChild(ADAPTOR, root_0, OP_USHIFT_R81_tree);

        	        {
        	             retval.op= kensho::ast::OpUShiftR; 
        	        }

        	    }
        	    break;
        	case 15:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:430:4: CMP_EQ
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        CMP_EQ82 = (pANTLR3_BASE_TREE) MATCHT(CMP_EQ, &FOLLOW_CMP_EQ_in_binop1468); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        CMP_EQ82_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CMP_EQ82);ADAPTOR->addChild(ADAPTOR, root_0, CMP_EQ82_tree);

        	        {
        	             retval.op= kensho::ast::OpEq; 
        	        }

        	    }
        	    break;
        	case 16:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:431:4: CMP_NEQ
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        CMP_NEQ83 = (pANTLR3_BASE_TREE) MATCHT(CMP_NEQ, &FOLLOW_CMP_NEQ_in_binop1477); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        CMP_NEQ83_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CMP_NEQ83);ADAPTOR->addChild(ADAPTOR, root_0, CMP_NEQ83_tree);

        	        {
        	             retval.op= kensho::ast::OpNeq; 
        	        }

        	    }
        	    break;
        	case 17:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:432:4: CMP_GT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        CMP_GT84 = (pANTLR3_BASE_TREE) MATCHT(CMP_GT, &FOLLOW_CMP_GT_in_binop1486); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        CMP_GT84_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CMP_GT84);ADAPTOR->addChild(ADAPTOR, root_0, CMP_GT84_tree);

        	        {
        	             retval.op= kensho::ast::OpGt; 
        	        }

        	    }
        	    break;
        	case 18:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:433:4: CMP_GTE
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        CMP_GTE85 = (pANTLR3_BASE_TREE) MATCHT(CMP_GTE, &FOLLOW_CMP_GTE_in_binop1495); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        CMP_GTE85_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CMP_GTE85);ADAPTOR->addChild(ADAPTOR, root_0, CMP_GTE85_tree);

        	        {
        	             retval.op= kensho::ast::OpGte; 
        	        }

        	    }
        	    break;
        	case 19:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:434:4: CMP_LT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        CMP_LT86 = (pANTLR3_BASE_TREE) MATCHT(CMP_LT, &FOLLOW_CMP_LT_in_binop1504); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        CMP_LT86_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CMP_LT86);ADAPTOR->addChild(ADAPTOR, root_0, CMP_LT86_tree);

        	        {
        	             retval.op= kensho::ast::OpLt; 
        	        }

        	    }
        	    break;
        	case 20:
        	    // f:/dev/projects/kensho/docs/KenshoTreeParser.g:435:4: CMP_LTE
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        CMP_LTE87 = (pANTLR3_BASE_TREE) MATCHT(CMP_LTE, &FOLLOW_CMP_LTE_in_binop1513); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinopEx;
        	        }

        	        CMP_LTE87_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CMP_LTE87);ADAPTOR->addChild(ADAPTOR, root_0, CMP_LTE87_tree);

        	        {
        	             retval.op= kensho::ast::OpLte; 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebinopEx; /* Prevent compiler warnings */
    rulebinopEx: ;

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end binop */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
